<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MudBlazor</name>
    </assembly>
    <members>
        <member name="T:MudBlazor.CategoryAttribute">
            <summary>
            Specifies the name of the category in which to group the property of a MudBlazor component when displayed in the API documentation.
            </summary>
            <remarks>
            Use this attribute together with the <see cref="T:Microsoft.AspNetCore.Components.ParameterAttribute"/>. <br/>
            This attribute is similar to <see cref="T:System.ComponentModel.CategoryAttribute"/>. <br/>
            The name of the category can be specified by using a constant defined in the <see cref="T:MudBlazor.CategoryTypes"/> class.
            </remarks>
        </member>
        <member name="P:MudBlazor.CategoryAttribute.Name">
            <summary> The name of the category. </summary>
        </member>
        <member name="P:MudBlazor.CategoryAttribute.Order">
            <summary> The order of the category - the greater the number the lower the category will be displayed in the API documentation. </summary>
        </member>
        <member name="T:MudBlazor.CategoryTypes">
             <summary>
             Possible categories of MudBlazor components properties.
             </summary>
             <remarks>
                 <b>General categories</b>
                 <para>
                   - <i>Data</i>       - Used e.g. in form fields, pickers, <see cref="T:MudBlazor.MudRating"/>, <see cref="T:MudBlazor.MudTable`1"/>, <see cref="T:MudBlazor.MudTreeView`1"/>,
                                          <see cref="T:MudBlazor.MudTreeViewItem`1"/>, and <see cref="T:MudBlazor.MudCarousel`1"/>. Containers have this group when their items can be defined
                                         not only in markup language, but also programmatically in the Items property and by specifying ItemTemplate.<br/>
                   - <i>Validation</i> - Used in form fields and pickers.<br/>
                   - <i>Behavior</i>   - Changing these properties changes behavior of the component and behavior of the application. So in some way they are or may be more
                                         important than the "Appearance" category. Example properties are: a) the <c>Disabled</c> property, b) icons (or avatars) without default value
                                         (because setting their value can pass additional information).<br/>
                   - <i>Appearance</i> - Changing these properties doesn't change behavior of the component and behavior of the application, but only changes the appearance
                                         of the component irrelevant to the understanding of the application by a user. So in some way they are less important than the "Behavior"
                                         category, because they are only used to adjust the look of the application. Example properties are: a) <c>Elevation</c>, <c>Outlined</c>,
                                         <c>Square</c>, <c>Rounded</c>, <c>DisableGutters</c>, <c>Dense</c>, <c>DisableRipple</c>; b) size, color, and typography of the item
                                         and its subelements; c) CSS classes and styles of subelements; d) icons with the default value already set (because most often changing its value
                                         doesn't change passed information).<br/>
                   - <i>Common</i>     - Properties defined in <see cref="T:MudBlazor.MudComponentBase"/>.
                 </para>
                 <para>
                 Note: The following properties belong to the "Behavior" group, not to the "Appearance" group:<br/>
                  - <see cref="P:MudBlazor.MudIconButton.Icon"/> - because it describes meaning of the button, since MudIconButton doesn't have text,<br/>
                  - <see cref="P:MudBlazor.MudBaseInput`1.Label"/> - because it describes meaning of the field,<br/>
                  - <see cref="P:MudBlazor.MudBaseInput`1.AdornmentText"/> - because it can describe information important to a user, e.g. a numeric field unit such as kilograms.<br/>
                 Sometimes choosing a category can be difficult - in such case choose a category that makes the most sense.
                 </para>
            
                 <b>Categories for specific behaviors or specific parts of components</b>
                 <para>If some elements or behaviors can be distinguished in a component, then their properties are included in separate groups.</para>
            
                 <para>Note: If a property qualifies for both the "Appearance" or "Behavior" group, and for some special group, then this special group takes precedence.
                       For example, <see cref="P:MudBlazor.MudTableBase.CommitEditIcon"/> could belong to the "Appearance" group, but belongs to the "Editing" group.</para>
             
                 <b>Additional information</b>
                 <para>The list of categories is inspired by the categories displayed for Windows Forms and Web Forms components in the Visual Studio "Properties" window.</para>
             </remarks>
        </member>
        <member name="T:MudBlazor.CategoryTypes.ComponentBase">
            <summary>Used in <see cref="T:MudBlazor.MudComponentBase"/>.</summary>
        </member>
        <member name="T:MudBlazor.CategoryTypes.Button">
            <summary>Used in: <see cref="T:MudBlazor.MudBaseButton"/>, all components inheriting from it, and <see cref="T:MudBlazor.MudToggleIconButton"/>.</summary>
        </member>
        <member name="T:MudBlazor.CategoryTypes.FormComponent">
            <summary>Used in <see cref="T:MudBlazor.MudFormComponent`2"/> and all components inheriting from it.</summary>
        </member>
        <member name="T:MudBlazor.CategoryTypes.Chart">
            <summary>Used in all charts, that is in <see cref="T:MudBlazor.MudChartBase"/> and all components inheriting from it.</summary>
        </member>
        <member name="T:MudBlazor.CategoryTypes.General">
            <summary>Used in other base classes.</summary>
        </member>
        <member name="P:MudBlazor.MudBaseBindableItemsControl`2.ItemsSource">
            <summary>
            Items Collection - For databinding usage
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseBindableItemsControl`2.ItemTemplate">
            <summary>
            Template for each Item in ItemsSource collection
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseBindableItemsControl`2.SelectedItem">
            <summary>
            Gets the Selected Item from ItemsSource, or Selected TChildComponent, when it's null
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.Activateable">
            <summary>
            Potential activation target for this button. This enables RenderFragments with user-defined
            buttons which will automatically activate the intended functionality. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.HtmlTag">
            <summary>
            The HTML element that will be rendered in the root by the component
            By default, is a button
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.ButtonType">
            <summary>
            The button Type (Button, Submit, Refresh)
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.Href">
            <summary>
            If set to a URL, clicking the button will open the referenced document. Use Target to specify where
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.Link">
            <summary>
            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.Target">
            <summary>
            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.Disabled">
            <summary>
            If true, the button will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.DisableElevation">
            <summary>
            If true, no drop-shadow will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.Command">
            <summary>
            Command executed when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.CommandParameter">
            <summary>
            Command parameter.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.OnClick">
            <summary>
            Button click event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Disabled">
            <summary>
            If true, the input element will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.ReadOnly">
            <summary>
            If true, the input will be read-only.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.FullWidth">
            <summary>
            If true, the input will take up the full width of its container.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Immediate">
            <summary>
            If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.DisableUnderLine">
            <summary>
            If true, the input will not have an underline.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.HelperText">
            <summary>
            The HelperText will be displayed below the text field.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.HelperTextOnFocus">
            <summary>
            If true, the helper text will only be visible on focus.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.AdornmentIcon">
            <summary>
            Icon that will be used if Adornment is set to Start or End.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.AdornmentText">
            <summary>
            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Adornment">
            <summary>
            The Adornment if used. By default, it is set to None.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.AdornmentColor">
            <summary>
            The color of the adornment if used. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.AdornmentAriaLabel">
            <summary>
            The aria-label of the adornment.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.IconSize">
            <summary>
            The Icon Size.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.OnAdornmentClick">
            <summary>
            Button click event if set and Adornment used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Variant">
            <summary>
            Variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Margin">
            <summary>
             Will adjust vertical spacing.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Placeholder">
            <summary>
            The short hint displayed in the input before the user enters a value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Counter">
            <summary>
            If set, will display the counter, value 0 will display current count but no stop count.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.MaxLength">
            <summary>
            Maximum number of characters that the input will accept
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Label">
            <summary>
            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.AutoFocus">
            <summary>
            If true the input will focus automatically.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Lines">
            <summary>
             A multiline input (textarea) will be shown, if set to more than one line.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Text">
            <summary>
             The text to be displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.TextUpdateSuppression">
            <summary>
            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).
            This solves issue #1012: Textfield swallowing chars when typing rapidly
            If you need to update the input's text while it is focused you can set this parameter to false.
            Note: on WASM text update suppression is not active, so this parameter has no effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.InputMode">
            <summary>
             Hints at the type of data that might be entered by the user while editing the input
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Pattern">
            <summary>
            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
            Not Supported in multline input
            </summary>
        </member>
        <member name="M:MudBlazor.MudBaseInput`1.GetInputType">
            <summary>
            Derived classes need to override this if they can be something other than text
            </summary>
        </member>
        <member name="M:MudBlazor.MudBaseInput`1.UpdateTextPropertyAsync(System.Boolean)">
            <summary>
            Text change hook for descendants. Called when Text needs to be refreshed from current Value property.
            </summary>
        </member>
        <member name="M:MudBlazor.MudBaseInput`1.FocusAsync">
            <summary>
            Focuses the element
            </summary>
            <returns>The ValueTask</returns>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.TextChanged">
            <summary>
            Fired when the text value changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.OnBlur">
            <summary>
            Fired when the element loses focus.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.OnInternalInputChanged">
            <summary>
            Fired when the element changes internally its text value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.OnKeyDown">
            <summary>
            Fired on the KeyDown event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.KeyDownPreventDefault">
            <summary>
            Prevent the default action for the KeyDown event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.OnKeyPress">
            <summary>
            Fired on the KeyPress event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.KeyPressPreventDefault">
            <summary>
            Prevent the default action for the KeyPress event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.OnKeyUp">
            <summary>
            Fired on the KeyUp event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.KeyUpPreventDefault">
            <summary>
            Prevent the default action for the KeyUp event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.ValueChanged">
            <summary>
            Fired when the Value property changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Value">
            <summary>
            The value of this input element.
            </summary>
        </member>
        <member name="M:MudBlazor.MudBaseInput`1.UpdateValuePropertyAsync(System.Boolean)">
            <summary>
            Value change hook for descendants. Called when Value needs to be refreshed from current Text property.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseInput`1.Format">
            <summary>
            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseItemsControl`1.ChildContent">
            <summary>
            Collection of T
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseItemsControl`1.Items">
            <summary>
            Items - will be ignored when ItemsSource is not null
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseItemsControl`1.SelectedIndex">
            <summary>
            Selected Item's index
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseItemsControl`1.LastContainer">
            <summary>
            Gets the Selected TChildComponent
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseItemsControl`1.SelectedContainer">
            <summary>
            Gets the Selected TChildComponent
            </summary>
        </member>
        <member name="M:MudBlazor.MudBaseItemsControl`1.Previous">
            <summary>
            Move to Previous Item
            </summary>
        </member>
        <member name="M:MudBlazor.MudBaseItemsControl`1.Next">
            <summary>
            Move to Next Item
            </summary>
        </member>
        <member name="M:MudBlazor.MudBaseItemsControl`1.MoveTo(System.Int32)">
            <summary>
            Move to Item at desired index
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseSelectItem.Disabled">
            <summary>
            If true, the input element will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseSelectItem.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseSelectItem.Href">
            <summary>
            Link to a URL when clicked.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseSelectItem.ForceLoad">
            <summary>
            If true, force browser to redirect outside component router-space.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseSelectItem.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseSelectItem.CommandParameter">
            <summary>
            Command parameter.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseSelectItem.Command">
            <summary>
            Command executed when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBooleanInput`1.Disabled">
            <summary>
            If true, the input will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBooleanInput`1.ReadOnly">
            <summary>
            If true, the input will be read-only.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBooleanInput`1.Checked">
            <summary>
            The state of the component
            </summary>
        </member>
        <member name="P:MudBlazor.MudBooleanInput`1.StopClickPropagation">
            <summary>
            If true will prevent the click from bubbling up the event tree.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBooleanInput`1.CheckedChanged">
            <summary>
            Fired when Checked changes.
            </summary>
        </member>
        <member name="M:MudBlazor.MudBooleanInput`1.HasValue(`0)">
            <summary>
            A value is required, so if not checked we return ERROR.
            </summary>
        </member>
        <member name="P:MudBlazor.MudComponentBase.Class">
            <summary>
            User class names, separated by space.
            </summary>
        </member>
        <member name="P:MudBlazor.MudComponentBase.Style">
            <summary>
            User styles, applied on top of the component's own classes and styles.
            </summary>
        </member>
        <member name="P:MudBlazor.MudComponentBase.Tag">
            <summary>
            Use Tag to attach any user data object to the component for your convenience.
            </summary>
        </member>
        <member name="P:MudBlazor.MudComponentBase.UserAttributes">
            <summary>
            UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.
            </summary>
        </member>
        <member name="P:MudBlazor.MudComponentBase.FieldId">
            <summary>
            If the UserAttributes contain an ID make it accessible for WCAG labelling of input fields
            </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.Standalone">
            <summary>
            If true, this is a top-level form component. If false, this input is a sub-component of another input (i.e. TextField, Select, etc).
            If it is sub-component, it will NOT do form validation!!
            </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.Required">
            <summary>
            If true, this form input is required to be filled out.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.RequiredError">
            <summary>
            The error text that will be displayed if the input is not filled out but required.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.ErrorText">
            <summary>
            The ErrorText that will be displayed if Error true.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.Error">
            <summary>
            If true, the label will be displayed in an error state.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.Converter">
            <summary>
            The generic converter of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.Culture">
            <summary>
            The culture of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.ConversionError">
            <summary>
            True if the conversion from string to T failed
            </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.ConversionErrorMessage">
            <summary>
            The error message of the conversion error from string to T. Null otherwise
            </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.HasErrors">
            <summary>
            True if the input has any of the following errors: An error set from outside, a conversion error or
            one or more validation errors
            </summary>
        </member>
        <member name="M:MudBlazor.MudFormComponent`2.GetErrorText">
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.Touched">
             <summary>
             This manages the state of having been "touched" by the user. A form control always starts out untouched
             but becomes touched when the user performed input or the blur event was raised.
            
             The touched state is only relevant for inputs that have no value (i.e. empty text fields). Being untouched will
             suppress RequiredError
             </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.Validation">
            <summary>
            A validation func or a validation attribute. Supported types are:
            <para>Func&lt;T, bool&gt; ... will output the standard error message "Invalid" if false</para>
            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>
            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>
            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>
            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message "Invalid" if false</para>
            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>
            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>
            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>
            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>
            </summary>
        </member>
        <member name="F:MudBlazor.MudFormComponent`2._value">
            <summary>
            This is the form component's value.
            </summary>
        </member>
        <member name="M:MudBlazor.MudFormComponent`2.Validate">
            <summary>
            Cause this component to validate its value.
            </summary>
        </member>
        <member name="M:MudBlazor.MudFormComponent`2.Reset">
            <summary>
            Reset the value and the validation.
            </summary>
        </member>
        <member name="M:MudBlazor.MudFormComponent`2.ResetValidation">
            <summary>
            Reset the validation.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.EditContext">
            <summary>
            This is the form validation context for Blazor's <EditForm></EditForm> component
            </summary>
        </member>
        <member name="M:MudBlazor.MudFormComponent`2.EditFormValidate">
            <summary>
            Triggers field to be validated.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFormComponent`2.For">
            <summary>
            Specify an expression which returns the model's field for which validation messages should be displayed.
            Currently only string fields are supported.
            </summary>
        </member>
        <member name="F:MudBlazor.MudFormComponent`2._validationAttrsFor">
            <summary>
            Stores the list of validation attributes attached to the property targeted by <seealso cref="P:MudBlazor.MudFormComponent`2.For"/>. If <seealso cref="P:MudBlazor.MudFormComponent`2.For"/> is null, this property is null too.
            </summary>
        </member>
        <member name="F:MudBlazor.MudFormComponent`2._fieldIdentifier">
            <summary>
            Points to a field of the model for which validation messages should be displayed.
            </summary>
        </member>
        <member name="F:MudBlazor.MudFormComponent`2._currentFor">
            <summary>
            To find out whether or not For parameter has changed we keep a separate reference
            </summary>
        </member>
        <member name="F:MudBlazor.MudFormComponent`2._currentEditContext">
            <summary>
            To find out whether or not EditContext parameter has changed we keep a separate reference
            </summary>
        </member>
        <member name="M:MudBlazor.MudFormComponent`2.Dispose(System.Boolean)">
            <summary>
            Called to dispose this instance.
            </summary>
            <param name="disposing"><see langword="true"/> if called within <see cref="M:System.IDisposable.Dispose"/>.</param>
        </member>
        <member name="P:MudBlazor.MudAlert.ContentAlignment">
            <summary>
            Sets the position of the text to the start (Left in LTR and right in RTL).
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.AlertTextPosition">
            <summary>
            Sets the position of the text to the start (Left in LTR and right in RTL).
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.CloseIconClicked">
            <summary>
            The callback, when the close button has been clicked.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.CloseIcon">
            <summary>
            Define the icon used for the close button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.ShowCloseIcon">
            <summary>
            Sets if the alert shows a close icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow. 0 for no shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.Square">
            <summary>
            If true, rounded corners are disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.Dense">
            <summary>
            If true, compact padding will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.NoIcon">
            <summary>
            If true, no alert icon will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.Severity">
            <summary>
            The severity of the alert. This defines the color and icon used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.Variant">
            <summary>
            The variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.Icon">
            <summary>
            Custom icon, leave unset to use the standard icon which depends on the Severity
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.OnClick">
            <summary>
            Raised when the alert is clicked
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.Bottom">
            <summary>
            If true, Appbar will be placed at the bottom of the screen.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow. 0 for no shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.Dense">
            <summary>
            If true, compact padding will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.DisableGutters">
            <summary>
            If true, the left and right padding is removed from from the appbar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.Fixed">
            <summary>
            If true, appbar will be Fixed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.ToolBarClass">
            <summary>
            User class names, separated by spaces for the nested toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.PopoverClass">
            <summary>
            User class names for the popover, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.AnchorOrigin">
            <summary>
            Set the anchor origin point to determen where the popover will open from.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.TransformOrigin">
            <summary>
            Sets the transform origin point for the popover.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.Direction">
            <summary>
            Set the anchor origin point to determen where the popover will open from.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.OffsetX">
            <summary>
            If true, the Autocomplete menu will open either before or after the input (left/right).
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.OffsetY">
            <summary>
            If true, the Autocomplete menu will open either before or after the input (top/bottom).
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.Dense">
            <summary>
            If true, compact vertical padding will be applied to all Autocomplete items.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.OpenIcon">
            <summary>
            The Open Autocomplete Icon
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.CloseIcon">
            <summary>
            The Close Autocomplete Icon
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.MaxHeight">
            <summary>
            The maximum height of the Autocomplete when it is open.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.ToStringFunc">
            <summary>
            Defines how values are displayed in the drop-down list
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.SearchFunc">
            <summary>
            The SearchFunc returns a list of items matching the typed text
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.MaxItems">
            <summary>
            Maximum items to display, defaults to 10.
            A null value will display all items.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.MinCharacters">
            <summary>
            Minimum characters to initiate a search
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.ResetValueOnEmptyText">
            <summary>
            Reset value if user deletes the text
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.SelectOnClick">
            <summary>
            If true, clicking the text field will select (highlight) its contents.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.DebounceInterval">
            <summary>
            Debounce interval in milliseconds.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.ItemTemplate">
            <summary>
            Optional presentation template for unselected items
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.ItemSelectedTemplate">
            <summary>
            Optional presentation template for the selected item
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.ItemDisabledTemplate">
            <summary>
            Optional presentation template for disabled item
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.CoerceText">
            <summary>
            On drop-down close override Text with selected Value. This makes it clear to the user
            which list value is currently selected and disallows incomplete values in Text.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.CoerceValue">
            <summary>
            If user input is not found by the search func and CoerceValue is set to true the user input
            will be applied to the Value which allows to validate it and display an error message.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.ItemDisabledFunc">
            <summary>
            Function to be invoked when checking whether an item should be disabled or not
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.IsOpen">
            <summary>
            Returns the open state of the drop-down.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.IsOpenChanged">
            <summary>
            An event triggered when the state of IsOpen has changed
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.SelectValueOnTab">
            <summary>
            If true, the currently selected item from the drop-down (if it is open) is selected.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.Clearable">
            <summary>
            Show clear button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAutocomplete`1.OnClearButtonClick">
            <summary>
            Button click event for clear button. Called after text and value has been cleared.
            </summary>
        </member>
        <member name="F:MudBlazor.MudAutocomplete`1._isCleared">
            <summary>
            This boolean will keep track if the clear function is called too keep the set text function to be called.
            </summary>
        </member>
        <member name="M:MudBlazor.MudAutocomplete`1.ToggleMenu">
            <summary>
            Toggle the menu (if not disabled or not readonly, and is opened).
            </summary>
        </member>
        <member name="M:MudBlazor.MudAutocomplete`1.OnSearchAsync">
            <remarks>
            This async method needs to return a task and be awaited in order for
            unit tests that trigger this method to work correctly.
            </remarks>
        </member>
        <member name="M:MudBlazor.MudAutocomplete`1.Clear">
            <summary>
            Clears the autocomplete's text
            </summary>
        </member>
        <member name="F:MudBlazor.MudAutocomplete`1._componentId">
            <summary>
            We need a random id for the year items in the year list so we can scroll to the item safely in every DatePicker.
            </summary>
        </member>
        <member name="M:MudBlazor.MudAutocomplete`1.ScrollToListItem(System.Int32,System.Int32)">
            <summary>
            Scroll to a specific item index in the Autocomplete list of items.
            </summary>
            <param name="index">the index to scroll to</param>
            <param name="increment">not used</param>
            <returns>ValueTask</returns>
        </member>
        <member name="M:MudBlazor.MudAutocomplete`1.ScrollToListItem(System.Int32)">
            <summary>
            Scroll to a specific item index in the Autocomplete list of items.
            </summary>
            <param name="index">the index to scroll to</param>
        </member>
        <member name="M:MudBlazor.MudAutocomplete`1.FocusAsync">
            <summary>
            Focus the input in the Autocomplete component.
            </summary>
        </member>
        <member name="M:MudBlazor.MudAutocomplete`1.SelectAsync">
            <summary>
            Select all text within the Autocomplete input.
            </summary>
        </member>
        <member name="M:MudBlazor.MudAutocomplete`1.SelectRangeAsync(System.Int32,System.Int32)">
            <summary>
            Select all text within the Autocomplete input and aligns its start and end points to the text content of the current input.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.Square">
            <summary>
            If true, border-radius is set to 0.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.Rounded">
            <summary>
            If true, border-radius is set to the themes default value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.Image">
            <summary>
            Link to image, if set a image will be displayed instead of text.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.Alt">
            <summary>
            If set (and Image is also set), will add an alt property to the img element
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.Size">
            <summary>
            The Size of the MudAvatar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.Variant">
            <summary>
            The variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatarGroup.Spacing">
            <summary>
            Spacing between avatars where 0 is none and 16 max.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatarGroup.Outlined">
            <summary>
            Outlines the grouped avatars to distinguish them, useful when avatars are the same color or uses images.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatarGroup.OutlineColor">
            <summary>
            Sets the color of the outline if its used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatarGroup.MaxElevation">
            <summary>
            Elevation of the MaxAvatar the higher the number, the heavier the drop-shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatarGroup.MaxSquare">
            <summary>
            If true, MaxAvatar border-radius is set to 0.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatarGroup.MaxRounded">
            <summary>
            If true, MaxAvatar will be rounded.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatarGroup.MaxColor">
            <summary>
            Color for the MaxAvatar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatarGroup.MaxSize">
            <summary>
            Size of the MaxAvatar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatarGroup.MaxVariant">
            <summary>
            Variant of the MaxAvatar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatarGroup.Max">
            <summary>
            Max avatars to show before showing +x avatar, default value 0 has no max.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatarGroup.MaxAvatarClass">
            <summary>
            Custom class/classes for MaxAvatar
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatarGroup.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Origin">
            <summary>
            The placement of the badge.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Visible">
            <summary>
            The visibility of the badge.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Color">
            <summary>
            The color of the badge.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Bottom">
            <summary>
            Aligns the badge to bottom.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Left">
            <summary>
            Aligns the badge to left.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Start">
            <summary>
            Aligns the badge to the start (Left in LTR and right in RTL).
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Dot">
            <summary>
            Reduces the size of the badge and hide any of its content.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Overlap">
            <summary>
            Overlaps the childcontent on top of the content.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Bordered">
            <summary>
            Applies a border around the badge.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Icon">
            <summary>
            Sets the Icon to use in the badge.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Max">
            <summary>
            Max value to show when content is integer type.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.Content">
            <summary>
            Content you want inside the badge. Supported types are string and integer.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.BadgeClass">
            <summary>
            Badge class names, separated by space.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.ChildContent">
            <summary>
            Child content of component, the content that the badge will apply to.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBadge.OnClick">
            <summary>
            Button click event if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBreadcrumbs.Items">
            <summary>
            A list of breadcrumb items/links.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBreadcrumbs.Separator">
            <summary>
            Specifies the separator between the items.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBreadcrumbs.SeparatorTemplate">
            <summary>
            Specifies a RenderFragment to use as the separator.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBreadcrumbs.ItemTemplate">
            <summary>
            Specifies a RenderFragment to use as the items' contents.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBreadcrumbs.MaxItems">
            <summary>
            Controls when (and if) the breadcrumbs will automatically collapse.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBreadcrumbs.ExpanderIcon">
            <summary>
            Custom expander icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButtonGroup.OverrideStyles">
            <summary>
            If true, the button group will override the styles of the individual buttons.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButtonGroup.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButtonGroup.VerticalAlign">
            <summary>
            If true, the button group will be displayed vertically.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButtonGroup.DisableElevation">
            <summary>
            If true, no drop-shadow will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButtonGroup.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButtonGroup.Size">
            <summary>
            The size of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButtonGroup.Variant">
            <summary>
            The variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.StartIcon">
            <summary>
            Icon placed before the text if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.EndIcon">
            <summary>
            Icon placed after the text if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.IconColor">
            <summary>
            The color of the icon. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.IconClass">
            <summary>
            Icon class names, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.Size">
            <summary>
            The Size of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.Variant">
            <summary>
            The variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.FullWidth">
            <summary>
            If true, the button will take up 100% of available width.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.Size">
            <summary>
            The Size of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.Icon">
            <summary>
            If applied Icon will be added at the start of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.StartIcon">
            <summary>
            If applied Icon will be added at the start of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.EndIcon">
            <summary>
            If applied Icon will be added at the end of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.IconColor">
            <summary>
            The color of the icon. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.IconSize">
            <summary>
            The size of the icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.Label">
            <summary>
            If applied the text will be added to the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.Icon">
            <summary>
            The Icon that will be used in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.Title">
            <summary>
            Title of the icon used for accessibility.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.Size">
            <summary>
            The Size of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.Edge">
            <summary>
            If set uses a negative margin.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.ChildContent">
            <summary>
            Child content of component, only shows if Icon is null or Empty.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.Variant">
            <summary>
            The variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.Toggled">
            <summary>
            The toggled value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.ToggledChanged">
            <summary>
            Fires whenever toggled is changed. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.Icon">
            <summary>
            The Icon that will be used in the untoggled state.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.ToggledIcon">
            <summary>
            The Icon that will be used in the toggled state.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.Title">
            <summary>
            Title of the icon used for accessibility.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.ToggledTitle">
            <summary>
            Title used in toggled state, if different.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.Color">
            <summary>
            The color of the icon in the untoggled state. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.ToggledColor">
            <summary>
            The color of the icon in the toggled state. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.Size">
            <summary>
            The Size of the component in the untoggled state.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.ToggledSize">
            <summary>
            The Size of the component in the toggled state.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.Edge">
            <summary>
            If set uses a negative margin.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.Disabled">
            <summary>
            If true, the button will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToggleIconButton.Variant">
            <summary>
            The variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCard.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow. 0 for no shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCard.Square">
            <summary>
            If true, border-radius is set to 0.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCard.Outlined">
            <summary>
            If true, card will be outlined.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCard.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardActions.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardContent.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardHeader.CardHeaderAvatar">
            <summary>
            If used renders child content of the CardHeaderAvatar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardHeader.CardHeaderContent">
            <summary>
            If used renders child content of the CardHeaderContent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardHeader.CardHeaderActions">
            <summary>
            If used renders child content of the CardHeaderActions.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardHeader.ChildContent">
            <summary>
            Optional child content
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardMedia.Title">
            <summary>
            Title of the image used for accessibility.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardMedia.Image">
            <summary>
            Specifies the path to the image.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardMedia.Height">
            <summary>
            Specifies the height of the image in px.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.ShowArrows">
            <summary>
            Gets or Sets if 'Next' and 'Previous' arrows must be visible
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.ArrowsPosition">
            <summary>
            Sets the position of the arrows. By default, the position is the Center position
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.ShowBullets">
            <summary>
            Gets or Sets if bar with Bullets must be visible
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.BulletsPosition">
            <summary>
            Sets the position of the bullets. By default, the position is the Bottom position
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.BulletsColor">
            <summary>
            Gets or Sets the Bullets color.
            If not set, the color is determined based on the <see cref="P:MudBlazor.MudCarouselItem.Color"/> property of the active child.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.ShowDelimiters">
            <summary>
            Gets or Sets if bottom bar with Delimiters must be visible.
            Deprecated, use ShowBullets instead.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.DelimitersColor">
            <summary>
            Gets or Sets the Delimiters color.
            If not set, the color is determined based on the <see cref="P:MudBlazor.MudCarouselItem.Color"/> property of the active child.
            Deprecated, use BulletsColor instead.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.AutoCycle">
            <summary>
            Gets or Sets automatic cycle on item collection.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.AutoCycleTime">
            <summary>
            Gets or Sets the Auto Cycle time
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.NavigationButtonsClass">
            <summary>
            Gets or Sets custom class(es) for 'Next' and 'Previous' arrows
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.BulletsClass">
            <summary>
            Gets or Sets custom class(es) for Bullets buttons
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.DelimitersClass">
            <summary>
            Gets or Sets custom class(es) for Delimiters buttons.
            Deprecated, use BulletsClass instead.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.PreviousIcon">
            <summary>
            Custom previous navigation icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.CheckedIcon">
            <summary>
            Custom selected bullet icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.UncheckedIcon">
            <summary>
            Custom unselected bullet icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.NextIcon">
            <summary>
            Custom next navigation icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.NextButtonTemplate">
            <summary>
            Gets or Sets the Template for the Left Arrow
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.PreviousButtonTemplate">
            <summary>
            Gets or Sets the Template for the Right Arrow
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.BulletTemplate">
            <summary>
            Gets or Sets the Template for Bullets
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarousel`1.DelimiterTemplate">
            <summary>
            Gets or Sets the Template for Delimiters.
            Deprecated, use BulletsTemplate instead.
            </summary>
        </member>
        <member name="M:MudBlazor.MudCarousel`1.SelectionChanged">
            <summary>
            Called when selected Index changed on base class
            </summary>
        </member>
        <member name="M:MudBlazor.MudCarousel`1.OnSwipe(MudBlazor.SwipeDirection)">
            <summary>
            Provides Selection changes by horizontal swipe gesture
            </summary>
        </member>
        <member name="M:MudBlazor.MudCarousel`1.StartTimerAsync">
            <summary>
            Immediately starts the AutoCycle timer
            </summary>
        </member>
        <member name="M:MudBlazor.MudCarousel`1.StopTimerAsync">
            <summary>
            Immediately stops the AutoCycle timer
            </summary>
        </member>
        <member name="M:MudBlazor.MudCarousel`1.ResetTimerAsync">
            <summary>
            Stops and restart the AutoCycle timer
            </summary>
        </member>
        <member name="M:MudBlazor.MudCarousel`1.TimerTickAsync">
            <summary>
            Changes the SelectedIndex to a next one (or restart on 0)
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarouselItem.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarouselItem.Transition">
            <summary>
            The transition effect of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarouselItem.CustomTransitionEnter">
            <summary>
            The name of custom transition on entrance time
            </summary>
        </member>
        <member name="P:MudBlazor.MudCarouselItem.CustomTransitionExit">
            <summary>
            The name of custom transition on exiting time
            </summary>
        </member>
        <member name="M:MudBlazor.Components.Chart.Interpolation.NaturalSpline.#ctor(System.Double[],System.Double[],System.Int32)">
            <summary>
            Natural Spline data interpolator
            </summary>  
        </member>
        <member name="M:MudBlazor.Components.Highlighter.Splitter.GetFragments(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Splits the text into fragments, according to the
            text to be highlighted
            </summary>
            <param name="text">The whole text</param>
            <param name="highlightedText">The text to be highlighted</param>
            <param name="caseSensitive">Whether it's case sensitive or not</param>
            <param name="untilNextBoundary">If true, splits until the next regex boundary</param>
            <returns></returns>
        </member>
        <member name="P:MudBlazor.ChartOptions.YAxisTicks">
            <summary>
            Spacing of Y-axis ticks.
            </summary>
        </member>
        <member name="P:MudBlazor.ChartOptions.MaxNumYAxisTicks">
            <summary>
            Maximum number of Y-axis ticks. The ticks will be thinned out if the value range is leading to too many ticks.
            </summary>
        </member>
        <member name="P:MudBlazor.ChartOptions.DisableLegend">
            <summary>
            If true, legend will not be displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.ChartOptions.LineStrokeWidth">
            <summary>
            Line width of series in px
            </summary>
        </member>
        <member name="P:MudBlazor.MudChartBase.CustomGraphics">
            <summary>
            RenderFragment for costumization inside the chart's svg.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChartBase.ChartType">
            <summary>
            The Type of the chart.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChartBase.Width">
            <summary>
            The Width of the chart, end with % or px.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChartBase.Height">
            <summary>
            The Height of the chart, end with % or px.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChartBase.LegendPosition">
            <summary>
            The placement direction of the legend if used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChartBase.SelectedIndex">
            <summary>
            Selected index of a portion of the chart.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChartBase.SelectedIndexChanged">
            <summary>
            Selected index of a portion of the chart.
            </summary>
        </member>
        <member name="M:MudBlazor.MudChartBase.GetNormalizedData">
            <summary>
            Scales the input data to the range between 0 and 1
            </summary>
        </member>
        <member name="P:MudBlazor.MudCheckBox`1.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCheckBox`1.Label">
            <summary>
            If applied the text will be added to the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCheckBox`1.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCheckBox`1.Dense">
            <summary>
            If true, compact padding will be applied.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCheckBox`1.Size">
            <summary>
            The Size of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCheckBox`1.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCheckBox`1.CheckedIcon">
            <summary>
            Custom checked icon, leave null for default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCheckBox`1.UncheckedIcon">
            <summary>
            Custom unchecked icon, leave null for default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCheckBox`1.IndeterminateIcon">
            <summary>
            Custom indeterminate icon, leave null for default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCheckBox`1.TriState">
            <summary>
            Define if the checkbox can cycle again through indeterminate status.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.MultiSelection">
            <summary>
            Allows to select more than one chip.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.Mandatory">
            <summary>
            Will not allow to deselect the selected chip in single selection mode.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.AllClosable">
            <summary>
            Will make all chips closable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.Filter">
            <summary>
             Will show a check-mark for the selected components.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.ReadOnly">
            <summary>
             Will make all chips read only.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.SelectedChip">
            <summary>
            The currently selected chip in Choice mode
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.SelectedChipChanged">
            <summary>
            Called when the selected chip changes, in Choice mode
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.SelectedChips">
            <summary>
            The currently selected chips in Filter mode
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.Comparer">
            <summary>
            The Comparer to use for comparing selected values internally.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.SelectedChipsChanged">
            <summary>
            Called when the selection changed, in Filter mode
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.SelectedValues">
            <summary>
            The current selected value.
            Note: make the list Clickable for item selection to work.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.SelectedValuesChanged">
            <summary>
            Called whenever the selection changed
            </summary>
        </member>
        <member name="P:MudBlazor.MudChipSet.OnClose">
            <summary>
            Called when a Chip was deleted (by click on the close icon)
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Color">
            <summary>
            The color of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Size">
            <summary>
            The size of the button. small is equivalent to the dense button styling.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Variant">
            <summary>
            The variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.SelectedColor">
            <summary>
            The selected color to use when selected, only works together with ChipSet, Color.Inherit for default value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Avatar">
            <summary>
            Avatar Icon, Overrides the regular Icon if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.AvatarClass">
            <summary>
            Avatar CSS Class, appends to Chips default avatar classes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Label">
            <summary>
            Removes circle edges and applies theme default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Disabled">
            <summary>
            If true, the chip will be displayed in disabled state and no events possible.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Icon">
            <summary>
            Sets the Icon to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.CheckedIcon">
            <summary>
            Custom checked icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.IconColor">
            <summary>
            The color of the icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.CloseIcon">
            <summary>
            Overrides the default close icon, only shown if OnClose is set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.DisableRipple">
            <summary>
            If true, disables ripple effect, ripple effect is only applied to clickable chips.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Link">
            <summary>
            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Href">
            <summary>
            If set to a URL, clicking the button will open the referenced document. Use Target to specify where
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Target">
            <summary>
            The target attribute specifies where to open the link, if Href is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Text">
            <summary>
            A string you want to associate with the chip. If the ChildContent is not set this will be shown as chip text.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Value">
            <summary>
            A value that should be managed in the SelectedValues collection.
            Note: do not change the value during the chip's lifetime
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.ForceLoad">
            <summary>
            If true, force browser to redirect outside component router-space.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Default">
            <summary>
            If true, this chip is selected by default if used in a ChipSet. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Command">
            <summary>
            Command executed when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.CommandParameter">
            <summary>
            Command parameter.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.OnClick">
            <summary>
            Chip click event, if set the chip focus, hover and click effects are applied.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.OnClose">
            <summary>
            Chip delete event, if set the delete icon will be visible.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.IsChecked">
            <summary>
            Set by MudChipSet
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.DefaultProcessed">
            <summary>
            If false, this chip has not been seen before
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.IsSelected">
            <summary>
            Set by MudChipSet
            </summary>
        </member>
        <member name="P:MudBlazor.MudCollapse.Expanded">
            <summary>
            If true, expands the panel, otherwise collapse it. Setting this prop enables control over the panel.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCollapse.MaxHeight">
            <summary>
            Explicitly sets the height for the Collapse element to override the css default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCollapse.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCollapse.CalculatedAnimationDuration">
            <summary>
            Modified Animation duration that scales with height parameter.
            Basic implementation for now but should be a math formula to allow it to scale between 0.1s and 1s for the effect to be consistently smooth.
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.DisableAlpha">
            <summary>
            If true, Alpha options will not be displayed and color output will be RGB, HSL or HEX and not RGBA, HSLA or HEXA.
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.DisableColorField">
            <summary>
            If true, the color field will not be displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.DisableModeSwitch">
            <summary>
            If true, the switch to change color mode will not be displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.DisableInputs">
            <summary>
            If true, textfield inputs and color mode switch will not be displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.DisableSliders">
            <summary>
            If true, hue and alpha sliders will not be displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.DisablePreview">
            <summary>
            If true, the preview color box will not be displayed, note that the preview color functions as a button as well for collection colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.ColorPickerMode">
            <summary>
            The initial mode (RGB, HSL or HEX) the picker should open. Defaults to RGB 
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.ColorPickerView">
            <summary>
            The initial view of the picker. Views can be changed if toolbar is enabled. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.UpdateBindingIfOnlyHSLChanged">
            <summary>
            If true, binding changes occurred also when HSL values changed without a corresponding RGB change 
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.Value">
            <summary>
            A two-way bindable property representing the selected value. MudColor is a utility class that can be used to get the value as RGB, HSL, hex or other value
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.Palette">
            <summary>
            MudColor list of predefined colors. The first five colors will show up as the quick colors on preview dot click.
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.DisableDragEffect">
            <summary>
            When set to true, no mouse move events in the spectrum mode will be captured, so the selector circle won't fellow the mouse. 
            Under some conditions like long latency the visual representation might not reflect the user behaviour anymore. So, it can be disabled 
            Enabled by default
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.CloseIcon">
            <summary>
            Custom close icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.SpectrumIcon">
            <summary>
            Custom spectrum icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.GridIcon">
            <summary>
            Custom grid icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.PaletteIcon">
            <summary>
            Custom palette icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudColorPicker.ImportExportIcon">
            <summary>
            Custom import/export icont.
            </summary>
        </member>
        <member name="M:MudBlazor.MudColorPicker.SetR(System.Int32)">
            <summary>
            Set the R (red) component of the color picker
            </summary>
            <param name="value">A value between 0 (no red) or 255 (max red)</param>
        </member>
        <member name="M:MudBlazor.MudColorPicker.SetG(System.Int32)">
            <summary>
            Set the G (green) component of the color picker
            </summary>
            <param name="value">A value between 0 (no green) or 255 (max green)</param>
        </member>
        <member name="M:MudBlazor.MudColorPicker.SetB(System.Int32)">
            <summary>
            Set the B (blue) component of the color picker
            </summary>
            <param name="value">A value between 0 (no blue) or 255 (max blue)</param>
        </member>
        <member name="M:MudBlazor.MudColorPicker.SetH(System.Double)">
            <summary>
            Set the H (hue) component of the color picker
            </summary>
            <param name="value">A value between 0 and 360 (degrees)</param>
        </member>
        <member name="M:MudBlazor.MudColorPicker.SetS(System.Double)">
            <summary>
            Set the S (saturation) component of the color picker
            </summary>
            <param name="value">A value between 0.0 (no saturation) and 1.0 (max saturation)</param>
        </member>
        <member name="M:MudBlazor.MudColorPicker.SetL(System.Double)">
            <summary>
            Set the L (Lightness) component of the color picker
            </summary>
            <param name="value">A value between 0.0 (no light, black) and 1.0 (max light, white)</param>
        </member>
        <member name="M:MudBlazor.MudColorPicker.SetAlpha(System.Double)">
            <summary>
            Set the Alpha (transparency) component of the color picker
            </summary>
            <param name="value">A value between 0.0 (full transparent) and 1.0 (solid) </param>
        </member>
        <member name="M:MudBlazor.MudColorPicker.SetAlpha(System.Int32)">
            <summary>
            Set the Alpha (transparency) component of the color picker
            </summary>
            <param name="value">A value between 0 (full transparent) and 1 (solid) </param>
        </member>
        <member name="M:MudBlazor.MudColorPicker.SetInputString(System.String)">
            <summary>
            Set the color of the picker based on the string input
            </summary>
            <param name="input">Accepting different formats for a color representation such as rbg, rgba, #</param>
        </member>
        <member name="P:MudBlazor.Column`1.Visible">
            <summary>
            Specifies the name of the object's property bound to the column
            </summary>
        </member>
        <member name="P:MudBlazor.Column`1.Sortable">
            <summary>
            Determines whether this columns data can be sorted. This overrides the Sortable parameter on the DataGrid.
            </summary>
        </member>
        <member name="P:MudBlazor.Column`1.Filterable">
            <summary>
            Determines whether this columns data can be filtered. This overrides the Filterable parameter on the DataGrid.
            </summary>
        </member>
        <member name="P:MudBlazor.Column`1.Hideable">
            <summary>
            Determines whether this column can be hidden. This overrides the Hideable parameter on the DataGrid.
            </summary>
        </member>
        <member name="P:MudBlazor.Column`1.ShowColumnOptions">
            <summary>
            Determines whether to show or hide column options. This overrides the ShowColumnOptions parameter on the DataGrid.
            </summary>
        </member>
        <member name="P:MudBlazor.Column`1.Groupable">
            <summary>
            Specifies whether the column can be grouped.
            </summary>
        </member>
        <member name="P:MudBlazor.Column`1.Grouping">
            <summary>
            Specifies whether the column is grouped.
            </summary>
        </member>
        <member name="M:MudBlazor.Column`1.RemoveGrouping">
            <summary>
            This method's sole purpose is for the DataGrid to remove grouping in mass.
            </summary>
        </member>
        <member name="M:MudBlazor.HeaderCell`1.ClearSort(System.String)">
            <summary>
            Removes the sort icon from the HeaderCell. This is triggered by the DataGrid when a sort is applied
            from another HeaderCell to remove all other sorts.
            </summary>
            <param name="field">The field that is the currently set sort.</param>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.SelectedItemChanged">
            <summary>
            Callback is called when a row has been clicked and returns the selected item.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.SelectedItemsChanged">
            <summary>
            Callback is called whenever items are selected or deselected in multi selection mode.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.RowClick">
            <summary>
            Callback is called whenever a row is clicked.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.StartedEditingItem">
            <summary>
            Callback is called when an item has begun to be edited. Returns the item being edited.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.CancelledEditingItem">
            <summary>
            Callback is called when the process of editing an item has been cancelled. Returns the item which was previously in edit mode.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.CommittedItemChanges">
            <summary>
            Callback is called when the changes to an item are committed. Returns the item whose changes were committed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Sortable">
            <summary>
            Controls whether data in the DataGrid can be sorted. This is overridable by each column.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Filterable">
            <summary>
            Controls whether data in the DataGrid can be filtered. This is overridable by each column.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Hideable">
            <summary>
            Controls whether columns in the DataGrid can be hidden. This is overridable by each column.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.ShowColumnOptions">
            <summary>
            Controls whether to hide or show the column options. This is overridable by each column.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Breakpoint">
            <summary>
            At what breakpoint the table should switch to mobile layout. Takes None, Xs, Sm, Md, Lg and Xl the default behavior is breaking on Xs.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow. 0 for no shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Square">
            <summary>
            Set true to disable rounded corners
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Outlined">
            <summary>
            If true, table will be outlined.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Bordered">
            <summary>
            If true, table's cells will have left/right borders.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.ColGroup">
            <summary>
            Specifies a group of one or more columns in a table for formatting.
            Ex:
            table
                colgroup
                   col span="2" style="background-color:red"
                   col style="background-color:yellow"
                 colgroup
                 header
                 body
            table
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Dense">
            <summary>
            Set true for rows with a narrow height
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Hover">
            <summary>
            Set true to see rows hover on mouse-over.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Striped">
            <summary>
            If true, striped table rows will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.FixedHeader">
            <summary>
            When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.FixedFooter">
            <summary>
            When true, the footer will be visible is not scrolled to the bottom. Note: set Height to make the table scrollable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.FilterDefinitions">
            <summary>
            The list of FilterDefinitions that have been added to the data grid. FilterDefinitions are managed by the data
            grid automatically when using the built in filter UI. You can also programmatically manage these definitions 
            through this collection.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Virtualize">
            <summary>
            If true, the results are displayed in a Virtualize component, allowing a boost in rendering speed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.RowClass">
            <summary>
            CSS class for the table rows. Note, many CSS settings are overridden by MudTd though
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.RowStyle">
            <summary>
            CSS styles for the table rows. Note, many CSS settings are overridden by MudTd though
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.RowClassFunc">
            <summary>
            Returns the class that will get joined with RowClass. Takes the current item and row index.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.RowStyleFunc">
            <summary>
            Returns the class that will get joined with RowClass. Takes the current item and row index.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.MultiSelection">
            <summary>
            Set to true to enable selection of multiple rows. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.EditMode">
            <summary>
            When the grid is not read only, you can specify what type of editing mode to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.EditTrigger">
            <summary>
            Allows you to specify the action that will trigger an edit when the EditMode is Form.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.EditDialogOptions">
            <summary>
            Fine tune the edit dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Items">
            <summary>
            The data to display in the table. MudTable will render one row per item
            </summary>
            
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Loading">
            <summary>
            Show a loading animation, if true.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.CanCancelEdit">
            <summary>
            Define if Cancel button is present or not for inline editing.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.LoadingProgressColor">
            <summary>
            The color of the loading progress if used. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.ToolBarContent">
            <summary>
            Optional. Add any kind of toolbar to this render fragment.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.HorizontalScrollbar">
            <summary>
            Defines if the table has a horizontal scrollbar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.HeaderClass">
            <summary>
            Add a class to the thead tag
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Height">
            <summary>
            Setting a height will allow to scroll the table. If not set, it will try to grow in height. You can set this to any CSS value that the
            attribute 'height' accepts, i.e. 500px. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.FooterClass">
            <summary>
            Add a class to the tfoot tag
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.QuickFilter">
            <summary>
            A function that returns whether or not an item should be displayed in the table. You can use this to implement your own search function.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Header">
            <summary>
            Allows adding a custom header beyond that specified in the Column component. Add HeaderCell 
            components to add a custom header.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Columns">
            <summary>
            The Columns that make up the data grid. Add Column components to this RenderFragment.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.ChildRowContent">
            <summary>
            Row Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.NoRecordsContent">
            <summary>
            Defines the table body content when there are no matching records found
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.LoadingContent">
            <summary>
            Defines the table body content  the table has no rows and is loading
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.PagerContent">
            <summary>
            Add MudTablePager here to enable breaking the rows in to multiple pages.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.ServerData">
            <summary>
            Supply an async function which (re)loads filtered, paginated and sorted data from server.
            Table will await this func and update based on the returned TableData.
            Used only with ServerData
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.RowsPerPage">
            <summary>
            If the table has more items than this number, it will break the rows into pages of said size.
            Note: requires a MudTablePager in PagerContent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.CurrentPage">
            <summary>
            The page index of the currently displayed page (Zero based). Usually called by MudTablePager.
            Note: requires a MudTablePager in PagerContent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.ReadOnly">
            <summary>
            Locks Inline Edit mode, if true.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.SelectedItems">
            <summary>
            If MultiSelection is true, this returns the currently selected items. You can bind this property and the initial content of the HashSet you bind it to will cause these rows to be selected initially.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.SelectedItem">
            <summary>
            Returns the item which was last clicked on in single selection mode (that is, if MultiSelection is false)
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.Groupable">
            <summary>
            Determines whether grouping of columns is allowed in the data grid.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.GroupExpanded">
            <summary>
            If set, a grouped column will be expanded by default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.GroupClass">
            <summary>
            CSS class for the groups.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGrid`1.GroupStyle">
            <summary>
            CSS styles for the groups.
            </summary>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.AddFilter">
            <summary>
            Called by the DataGrid when the "Add Filter" button is pressed.
            </summary>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.CommitItemChangesAsync(`0)">
            <summary>
            This method notifies the consumer that changes to the data have been committed
            and what those changes are. This variation of the method is only used by the Cell
            when the EditMode is set to cell.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.CommitItemChangesAsync">
            <summary>
            This method notifies the consumer that changes to the data have been committed
            and what those changes are. This variation of the method is used when the EditMode 
            is anything but Cell since the _editingItem is used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.GetFilteredItemsCount">
            <summary>
            Gets the total count of filtered items in the data grid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.NavigateTo(MudBlazor.Page)">
            <summary>
            Navigates to a specific page when the data grid has an attached data pager.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.SetRowsPerPageAsync(System.Int32)">
            <summary>
            Sets the rows displayed per page when the data grid has an attached data pager.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.SetSortAsync(MudBlazor.SortDirection,System.Func{`0,System.Object},System.String)">
            <summary>
            Sets the sort on the data grid.
            </summary>
            <param name="direction"></param>
            <param name="sortBy"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.SetSelectedItemAsync(`0)">
            <summary>
            Set the currently selected item in the data grid.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.SetEditingItemAsync(`0)">
            <summary>
            Set an item to be edited.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.CancelEditingItemAsync">
            <summary>
            Cancel editing an item.
            </summary>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.ToggleFiltersMenu">
            <summary>
            Opens or closes the filter panel.
            </summary>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.ReloadServerData">
            <summary>
            Call this to reload the server-filtered, -sorted and -paginated items
            </summary>
        </member>
        <member name="M:MudBlazor.MudDataGrid`1.OpenFilters">
            <summary>
            Opens the filter panel.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGridPager`1.DisableRowsPerPage">
            <summary>
            Set true to hide the part of the pager which allows to change the page size.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGridPager`1.PageSizeOptions">
            <summary>
            Define a list of available page size options for the user to choose from
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGridPager`1.InfoFormat">
            <summary>
            Format string for the display of the current page, which you can localize to your language. Available variables are:
            {first_item}, {last_item} and {all_items} which will replaced with the indices of the page's first and last item, as well as the total number of items.
            Default: "{first_item}-{last_item} of {all_items}" which is transformed into "0-25 of 77". 
            </summary>
        </member>
        <member name="P:MudBlazor.MudDataGridPager`1.RowsPerPageString">
            <summary>
            The localizable "Rows per page:" text.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.MaxDate">
            <summary>
            Max selectable date.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.MinDate">
            <summary>
            Max selectable date.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.OpenTo">
            <summary>
            First view to show in the MudDatePicker.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.DateFormat">
            <summary>
            String Format for selected date view
            </summary>
        </member>
        <member name="M:MudBlazor.MudBaseDatePicker.DateFormatChanged(System.String)">
            <summary>
            Date format value change hook for descendants.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.FirstDayOfWeek">
            <summary>
            Defines on which day the week starts. Depends on the value of Culture. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.PickerMonth">
            <summary>
            The current month of the date picker (two-way bindable). This changes when the user browses through the calender.
            The month is represented as a DateTime which is always the first day of that month. You can also set this to define which month is initially shown. If not set, the current month is shown.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.PickerMonthChanged">
            <summary>
            Fired when the date changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.ClosingDelay">
            <summary>
            Milliseconds to wait before closing the picker. This helps the user see that the date was selected before the popover disappears.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.DisplayMonths">
            <summary>
            Number of months to display in the calendar
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.MaxMonthColumns">
            <summary>
            Maximum number of months in one row
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.StartMonth">
            <summary>
            Start month when opening the picker. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.ShowWeekNumbers">
            <summary>
            Display week numbers according to the Culture parameter. If no culture is defined, CultureInfo.CurrentCulture will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.TitleDateFormat">
            <summary>
            Format of the selected date in the title. By default, this is "ddd, dd MMM" which abbreviates day and month names. 
            For instance, display the long names like this "dddd, dd. MMMM". 
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.IsDateDisabledFunc">
            <summary>
            Function to determine whether a date is disabled
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.PreviousIcon">
            <summary>
            Custom previous icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.NextIcon">
            <summary>
            Custom next icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.FixYear">
            <summary>
            Set a predefined fix year - no year can be selected
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.FixMonth">
            <summary>
            Set a predefined fix month - no month can be selected
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseDatePicker.FixDay">
            <summary>
            Set a predefined fix day - no day can be selected
            </summary>
        </member>
        <member name="M:MudBlazor.MudBaseDatePicker.GetMonthStart(System.Int32)">
            <summary>
            Get the first of the month to display
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudBaseDatePicker.GetMonthEnd(System.Int32)">
            <summary>
            Get the last of the month to display
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudBaseDatePicker.GetWeek(System.Int32,System.Int32)">
            <summary>
            Gets the n-th week of the currently displayed month. 
            </summary>
            <param name="month">offset from _picker_month</param>
            <param name="index">between 0 and 4</param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudBaseDatePicker.OnDayClicked(System.DateTime)">
            <summary>
            User clicked on a day
            </summary>
        </member>
        <member name="M:MudBlazor.MudBaseDatePicker.OnMonthSelected(System.DateTime)">
            <summary>
            user clicked on a month
            </summary>
            <param name="month"></param>
        </member>
        <member name="M:MudBlazor.MudBaseDatePicker.OnYearClicked(System.Int32)">
            <summary>
            user clicked on a year
            </summary>
            <param name="year"></param>
        </member>
        <member name="M:MudBlazor.MudBaseDatePicker.OnMonthClicked(System.Int32)">
            <summary>
            user clicked on a month
            </summary>
        </member>
        <member name="M:MudBlazor.MudBaseDatePicker.GetAbbreviatedDayNames">
            <summary>
            return Mo, Tu, We, Th, Fr, Sa, Su in the right culture
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudBaseDatePicker.Shift``1(``0[],System.Int32)">
            <summary>
            Shift array and cycle around from the end
            </summary>
        </member>
        <member name="F:MudBlazor.MudBaseDatePicker._componentId">
            <summary>
            We need a random id for the year items in the year list so we can scroll to the item safely in every DatePicker.
            </summary>
        </member>
        <member name="F:MudBlazor.MudBaseDatePicker._scrollToYearAfterRender">
            <summary>
            Is set to true to scroll to the actual year after the next render
            </summary>
        </member>
        <member name="M:MudBlazor.MudBaseDatePicker.GetCalendarYear(System.Int32)">
            <summary>
            Converts gregorian year into whatever year it is in the provided culture
            </summary>
            <param name="year">Gregorian year</param>
            <returns>Year according to culture</returns>
        </member>
        <member name="P:MudBlazor.MudDatePicker.DateChanged">
            <summary>
            Fired when the DateFormat changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDatePicker.Date">
            <summary>
            The currently selected date (two-way bindable). If null, then nothing was selected.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDatePicker.AutoClose">
            <summary>
            If AutoClose is set to true and PickerActions are defined, selecting a day will close the MudDatePicker.
            </summary>
        </member>
        <member name="M:MudBlazor.MudDatePicker.OnMonthSelected(System.DateTime)">
            <summary>
            user clicked on a month
            </summary>
            <param name="month"></param>
        </member>
        <member name="M:MudBlazor.MudDatePicker.OnYearClicked(System.Int32)">
            <summary>
            user clicked on a year
            </summary>
            <param name="year"></param>
        </member>
        <member name="M:MudBlazor.MudDatePicker.GoToDate">
            <summary>
            Scrolls to the date.
            </summary>
        </member>
        <member name="M:MudBlazor.MudDatePicker.GoToDate(System.DateTime,System.Boolean)">
            <summary>
            Scrolls to the defined date.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDateRangePicker.DateRangeChanged">
            <summary>
            Fired when the DateFormat changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDateRangePicker.DateRange">
            <summary>
            The currently selected range (two-way bindable). If null, then nothing was selected.
            </summary>
        </member>
        <member name="M:MudBlazor.MudDateRangePicker.FocusStartAsync">
            <summary>
            Focuses the start date of MudDateRangePicker
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDateRangePicker.SelectStartAsync">
            <summary>
            Selects the start date of MudDateRangePicker
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDateRangePicker.SelectRangeStartAsync(System.Int32,System.Int32)">
            <summary>
            Selects the specified range of the start date text
            </summary>
            <param name="pos1">Start position of the selection</param>
            <param name="pos2">End position of the selection</param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDateRangePicker.FocusEndAsync">
            <summary>
            Focuses the end date of MudDateRangePicker
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDateRangePicker.SelectEndAsync">
            <summary>
            Selects the end date of MudDateRangePicker
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDateRangePicker.SelectRangeEndAsync(System.Int32,System.Int32)">
            <summary>
            Selects the specified range of the end date text
            </summary>
            <param name="pos1">Start position of the selection</param>
            <param name="pos2">End position of the selection</param>
            <returns></returns>
        </member>
        <member name="P:MudBlazor.MudDialog.TitleContent">
            <summary>
            Define the dialog title as a renderfragment (overrides Title)
            </summary>
        </member>
        <member name="P:MudBlazor.MudDialog.DialogContent">
            <summary>
            Define the dialog body here
            </summary>
        </member>
        <member name="P:MudBlazor.MudDialog.DialogActions">
            <summary>
            Define the action buttons here
            </summary>
        </member>
        <member name="P:MudBlazor.MudDialog.Options">
            <summary>
            Default options to pass to Show(), if none are explicitly provided.
            Typically useful on inline dialogs.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDialog.DisableSidePadding">
            <summary>
            No padding at the sides
            </summary>
        </member>
        <member name="P:MudBlazor.MudDialog.ClassContent">
            <summary>
            CSS class that will be applied to the dialog content
            </summary>
        </member>
        <member name="P:MudBlazor.MudDialog.ClassActions">
            <summary>
            CSS class that will be applied to the action buttons container
            </summary>
        </member>
        <member name="P:MudBlazor.MudDialog.ContentStyle">
            <summary>
            CSS styles to be applied to the dialog content
            </summary>
        </member>
        <member name="P:MudBlazor.MudDialog.IsVisible">
            <summary>
            Bind this two-way to show and close an inlined dialog. Has no effect on opened dialogs
            </summary>
        </member>
        <member name="P:MudBlazor.MudDialog.IsVisibleChanged">
            <summary>
            Raised when the inline dialog's display status changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDialog.DefaultFocus">
            <summary>
            Define the dialog title as a renderfragment (overrides Title)
            </summary>
        </member>
        <member name="M:MudBlazor.MudDialog.Show(System.String,MudBlazor.DialogOptions)">
            <summary>
            Show this inlined dialog
            </summary>
            <param name="title"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDialog.ForceUpdate">
            <summary>
            Used for forwarding state changes from inlined dialog to its instance
            </summary>
        </member>
        <member name="M:MudBlazor.MudDialog.Close(MudBlazor.DialogResult)">
            <summary>
            Close the currently open inlined dialog
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:MudBlazor.MudDialogInstance.CloseIcon">
            <summary>
            Custom close icon.
            </summary>
        </member>
        <member name="M:MudBlazor.MudDialogInstance.Close">
            <summary>
            Close and return null. 
            
            This is a shorthand of Close(DialogResult.Ok((object)null));
            </summary>
        </member>
        <member name="M:MudBlazor.MudDialogInstance.Close(MudBlazor.DialogResult)">
            <summary>
            Close with dialog result.
            
            Usage: Close(DialogResult.Ok(returnValue))
            </summary>
        </member>
        <member name="M:MudBlazor.MudDialogInstance.Close``1(``0)">
            <summary>
            Close and directly pass a return value. 
            
            This is a shorthand for Close(DialogResult.Ok(returnValue))
            </summary>
            <typeparam name="T"></typeparam>
            <param name="returnValue"></param>
        </member>
        <member name="M:MudBlazor.MudDialogInstance.Cancel">
            <summary>
            Cancel the dialog. DialogResult.Cancelled will be set to true
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.Fixed">
            <summary>
            If true, drawer position will be fixed. (CSS position: fixed;)
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow. 0 for no shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.Anchor">
            <summary>
            Side from which the drawer will appear.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.Variant">
            <summary>
            Variant of the drawer. It specifies how the drawer will be displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.DisableOverlay">
            <summary>
            Show overlay for responsive and temporary drawers.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.PreserveOpenState">
            <summary>
            Preserve open state for responsive drawer when window resized above <see cref="P:MudBlazor.MudDrawer.Breakpoint" />.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.OpenMiniOnHover">
            <summary>
            Open drawer automatically on mouse enter when <see cref="P:MudBlazor.MudDrawer.Variant" /> parameter is set to <see cref="F:MudBlazor.DrawerVariant.Mini" />.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.Breakpoint">
            <summary>
            Switching point for responsive drawers
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.Open">
            <summary>
            Sets the opened state on the drawer. Can be used with two-way binding to close itself on navigation.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.Width">
            <summary>
            Width of left/right drawer. Only for non-fixed drawers.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.MiniWidth">
            <summary>
            Width of left/right drawer. Only for non-fixed drawers.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.Height">
            <summary>
            Height of top/bottom temporary drawer
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawer.ClipMode">
            <summary>
            Specify how the drawer should behave inside a MudLayout. It affects the position relative to <b>MudAppbar</b>
            </summary>
        </member>
        <member name="T:MudBlazor.MudDragAndDropItemTransaction`1">
            <summary>
            Used to encapsulate data for a drag and drop transaction
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MudBlazor.MudDragAndDropItemTransaction`1.Item">
            <summary>
            The Item that is dragged during the transaction
            </summary>
        </member>
        <member name="P:MudBlazor.MudDragAndDropItemTransaction`1.Index">
            <summary>
            The index of the item in the current drop zone
            </summary>
        </member>
        <member name="P:MudBlazor.MudDragAndDropItemTransaction`1.SourceIndex">
            <summary>
            The index of the item when the transaction started
            </summary>
        </member>
        <member name="P:MudBlazor.MudDragAndDropItemTransaction`1.SourceZoneIdentifier">
            <summary>
            Identifier for drop zone where the transaction started
            </summary>
        </member>
        <member name="M:MudBlazor.MudDragAndDropItemTransaction`1.#ctor(`0,System.String,System.Int32,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            create a new instance of a drag and drop transaction encapsulating the item and source
            </summary>
            <param name="item">The item of this transaction</param>
            <param name="identifier">The identifier of the drop zone, where the transaction started</param>
            <param name="index">The source index</param>
            <param name="commitCallback">A callback that is invokde when the transaction has been successful</param>
            <param name="cancelCallback">A callback that is inviked when the transaction has been cancelled</param>
        </member>
        <member name="M:MudBlazor.MudDragAndDropItemTransaction`1.Cancel">
            <summary>
            Cancel the transaction 
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudDragAndDropItemTransaction`1.Commit">
            <summary>
            Commit this transaction as succesful
            </summary>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.MudItemDropInfo`1">
            <summary>
            Record encaplusalting data regaring a completed transaction
            </summary>
            <typeparam name="T">Type of dragged item</typeparam>
            <param name="Item">The dragged item during the transaction</param>
            <param name="DropzoneIdentifier">Identifier of the zone where the transaction started</param>
            <param name="IndexInZone">The index of the item within in the dropzone</param>
        </member>
        <member name="M:MudBlazor.MudItemDropInfo`1.#ctor(`0,System.String,System.Int32)">
            <summary>
            Record encaplusalting data regaring a completed transaction
            </summary>
            <typeparam name="T">Type of dragged item</typeparam>
            <param name="Item">The dragged item during the transaction</param>
            <param name="DropzoneIdentifier">Identifier of the zone where the transaction started</param>
            <param name="IndexInZone">The index of the item within in the dropzone</param>
        </member>
        <member name="T:MudBlazor.MudDropContainer`1">
            <summary>
            The container of a drag and drop zones
            </summary>
            <typeparam name="T">Datetype of items</typeparam>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.ChildContent">
            <summary>
            Child content of component. This should include the drop zones
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.Items">
            <summary>
            The items that can be drag and dropped within the container
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.ItemRenderer">
            <summary>
            The render fragment (template) that should be used to render the items within a drop zone
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.ItemsSelector">
            <summary>
            The method is used to determinate if an item can be dropped within a drop zone
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.ItemDropped">
            <summary>
            Callback that indicates that an item has been dropped on a drop zone. Should be used to update the "status" of the data item
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.CanDrop">
            <summary>
            The method is used to determinate if an item can be dropped within a drop zone
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.CanDropClass">
            <summary>
            The CSS class(es), that is applied to drop zones that are a valid target for drag and drop transaction
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.NoDropClass">
            <summary>
            The CSS class(es), that is applied to drop zones that are NOT valid target for drag and drop transaction
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.ApplyDropClassesOnDragStarted">
            <summary>
            If true, drop classes CanDropClass <see cref="P:MudBlazor.MudDropContainer`1.CanDropClass"/>  or NoDropClass <see cref="P:MudBlazor.MudDropContainer`1.NoDropClass"/> or applied as soon, as a transaction has started
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.ItemIsDisabled">
            <summary>
            The method is used to determinate if an item should be disabled for dragging. Defaults to allow all items
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.DisabledClass">
            <summary>
            If a drop item is disabled (determinate by <see cref="P:MudBlazor.MudDropContainer`1.ItemIsDisabled"/>). This class is applied to the element
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.DraggingClass">
            <summary>
            An additional class that is applied to the drop zone where a drag operation started
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropContainer`1.ItemDraggingClass">
            <summary>
            An additional class that is applied to an drop item, when it is dragged
            </summary>
        </member>
        <member name="M:MudBlazor.MudDropContainer`1.Refresh">
            <summary>
            Refreshes the dropzone and all items within. This is neded in case of adding items to the collection or changed values of items
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.ChildContent">
            <summary>
            Child content of component
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.Identifier">
            <summary>
            The unique identifier of this drop zone. It is used within transaction to 
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.ItemRenderer">
            <summary>
            The render fragment (template) that should be used to render the items within a drop zone. Overrides value provided by drop container
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.ItemsSelector">
            <summary>
            The method is used to determinate if an item can be dropped within a drop zone. Overrides value provided by drop container
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.CanDrop">
            <summary>
            The method is used to determinate if an item can be dropped within a drop zone. Overrides value provided by drop container
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.CanDropClass">
            <summary>
            The CSS class(es), that is applied to drop zones that are a valid target for drag and drop transaction. Overrides value provided by drop container
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.NoDropClass">
            <summary>
            The CSS class(es), that is applied to drop zones that are NOT valid target for drag and drop transaction. Overrides value provided by drop container
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.ApplyDropClassesOnDragStarted">
            <summary>
            If true, drop classes CanDropClass <see cref="P:MudBlazor.MudDropZone`1.CanDropClass"/>  or NoDropClass <see cref="P:MudBlazor.MudDropZone`1.NoDropClass"/> or applied as soon, as a transaction has started. Overrides value provided by drop container
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.ItemIsDisabled">
            <summary>
            The method is used to determinate if an item should be disabled for dragging. Defaults to allow all items. Overrides value provided by drop container
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.DisabledClass">
            <summary>
            If a drop item is disabled (determinate by <see cref="P:MudBlazor.MudDropZone`1.ItemIsDisabled"/>). This class is applied to the element. Overrides value provided by drop container
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.DraggingClass">
            <summary>
            An additional class that is applied to the drop zone where a drag operation started
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.ItemDraggingClass">
            <summary>
            An additional class that is applied to an drop item, when it is dragged
            </summary>
        </member>
        <member name="P:MudBlazor.MudDropZone`1.OnlyZone">
            <summary>
            If true, will only act as a dropable zone and not render any items.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicDropItem`1.ZoneIdentifier">
            <summary>
            The zone identifier of the corresponding drop zone
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicDropItem`1.Item">
            <summary>
            the data item that is represneted by this item
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicDropItem`1.ChildContent">
            <summary>
            Child content of component
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicDropItem`1.DraggingClass">
            <summary>
            An additional class that is applied to this element when a drag operation is in progress
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicDropItem`1.OnDragStarted">
            <summary>
            An event callback set fires, when a drag operation has been started
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicDropItem`1.OnDragEnded">
            <summary>
            An event callback set fires, when a drag operation has been eneded. This included also a cancelled transaction
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicDropItem`1.Disabled">
            <summary>
            When true, the item can't be dragged. defaults to false
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicDropItem`1.DisabledClass">
            <summary>
            The class that is applied when disabled <see cref="P:MudBlazor.MudDynamicDropItem`1.Disabled"/> is set to true
            </summary>
        </member>
        <member name="T:MudBlazor.MudElement">
            <summary>
            Primitive component which allows rendering any HTML element we want
            through the HtmlTag property
            </summary>
        </member>
        <member name="P:MudBlazor.MudElement.ChildContent">
            <summary>
            Child content
            </summary>
        </member>
        <member name="P:MudBlazor.MudElement.HtmlTag">
            <summary>
            The HTML element that will be rendered in the root by the component
            </summary>
        </member>
        <member name="P:MudBlazor.MudElement.Ref">
            <summary>
            The ElementReference to bind to.
            Use like @bind-Ref="myRef"
            </summary>
        </member>
        <member name="M:MudBlazor.MudElement.Refresh">
            <summary>
            Calling StateHasChanged to refresh the component's state
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanel.MaxHeight">
            <summary>
            Explicitly sets the height for the Collapse element to override the css default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanel.TitleContent">
            <summary>
            RenderFragment to be displayed in the expansion panel which will override header text if defined.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanel.Text">
            <summary>
            The text to be displayed in the expansion panel.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanel.HideIcon">
            <summary>
            If true, expand icon will not show
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanel.Icon">
            <summary>
            Custom hide icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanel.Dense">
            <summary>
            If true, removes vertical padding from childcontent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanel.DisableGutters">
            <summary>
            If true, the left and right padding is removed from childcontent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanel.IsExpandedChanged">
            <summary>
            Raised when IsExpanded changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanel.IsExpanded">
            <summary>
            Expansion state of the panel (two-way bindable)
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanel.IsInitiallyExpanded">
            <summary>
            Sets the initial expansion state. Do not use in combination with IsExpanded.
            Combine with MultiExpansion to have more than one panel start open.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanel.Disabled">
            <summary>
            If true, the component will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanel.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanels.Square">
            <summary>
            If true, border-radius is set to 0.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanels.MultiExpansion">
            <summary>
            If true, multiple panels can be expanded at the same time.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanels.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow. 0 for no shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanels.Dense">
            <summary>
            If true, removes vertical padding from all panels' childcontent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanels.DisableGutters">
            <summary>
            If true, the left and right padding is removed from all panels' childcontent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanels.DisableBorders">
            <summary>
            If true, the borders around each panel will be removed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudExpansionPanels.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="M:MudBlazor.MudExpansionPanels.CollapseAllExcept(MudBlazor.MudExpansionPanel)">
            <summary>
            Collapses all panels except the given one.
            </summary>
            <param name="panel">The panel not to collapse.</param>
        </member>
        <member name="M:MudBlazor.MudExpansionPanels.CollapseAll">
            <summary>
            Collapses all panels.
            </summary>
        </member>
        <member name="M:MudBlazor.MudExpansionPanels.ExpandAll">
            <summary>
            Expands all panels.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.Margin">
            <summary>
             Will adjust vertical spacing. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.Error">
            <summary>
            If true, the label will be displayed in an error state.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.ErrorText">
            <summary>
            The ErrorText that will be displayed if Error true
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.HelperText">
            <summary>
            The HelperText will be displayed below the text field.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.FullWidth">
            <summary>
            If true, the field will take up the full width of its container.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.Label">
            <summary>
            If string has value the label text will be displayed in the input, and scaled down at the top if the field has value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.Variant">
            <summary>
            Variant can be Text, Filled or Outlined.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.Disabled">
            <summary>
            If true, the input element will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.AdornmentIcon">
            <summary>
            Icon that will be used if Adornment is set to Start or End.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.AdornmentText">
            <summary>
            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.Adornment">
            <summary>
            The Adornment if used. By default, it is set to None.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.AdornmentColor">
            <summary>
            The color of the adornment if used. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.IconSize">
            <summary>
            Sets the Icon Size.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.OnAdornmentClick">
            <summary>
            Button click event if set and Adornment used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.InnerPadding">
            <summary>
            If true, the inner contents padding is removed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudField.DisableUnderLine">
            <summary>
            If true, the field will not have an underline.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFocusTrap.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFocusTrap.Disabled">
            <summary>
            If true, the focus will no longer loop inside the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFocusTrap.DefaultFocus">
            <summary>
            Defines on which element to set the focus when the component is created or enabled.
            When DefaultFocus.Element is used, the focus will be set to the FocusTrap itself, so the user will have to press TAB key once to focus the first tabbable element.
            </summary>
        </member>
        <member name="P:MudBlazor.MudForm.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudForm.IsValid">
            <summary>
            Validation status. True if the form is valid and without errors. This parameter is two-way bindable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudForm.IsTouched">
            <summary>
            True if any field of the field was touched. This parameter is readonly.
            </summary>
        </member>
        <member name="P:MudBlazor.MudForm.ValidationDelay">
            <summary>
            Validation debounce delay in milliseconds. This can help improve rendering performance of forms with real-time validation of inputs
            i.e. when textfields have Immediate="true".
            </summary>
        </member>
        <member name="P:MudBlazor.MudForm.SuppressRenderingOnValidation">
            <summary>
            When true, the form will not re-render its child contents on validation updates (i.e. when IsValid changes).
            This is an optimization which can be necessary especially for larger forms on older devices.
            </summary>
        </member>
        <member name="P:MudBlazor.MudForm.SuppressImplicitSubmission">
            <summary>
            When true, will not cause a page refresh on Enter if any input has focus.
            </summary>
            <remarks>
            https://www.w3.org/TR/2018/SPSD-html5-20180327/forms.html#implicit-submission
            Usually this is not wanted, as it can cause a page refresh in the middle of editing a form. 
            When the form is in a dialog this will cause the dialog to close. So by default we suppress it.
            </remarks>
        </member>
        <member name="P:MudBlazor.MudForm.IsValidChanged">
            <summary>
            Raised when IsValid changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudForm.IsTouchedChanged">
            <summary>
            Raised when IsTouched changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudForm.Validation">
            <summary>
            A default validation func or a validation attribute to use for form controls that don't have one.
            Supported types are:
            <para>Func&lt;T, bool&gt; ... will output the standard error message "Invalid" if false</para>
            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>
            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>
            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>
            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message "Invalid" if false</para>
            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>
            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>
            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>
            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>
            </summary>
        </member>
        <member name="P:MudBlazor.MudForm.OverrideFieldValidation">
            <summary>
            If a field already has a validation, override it with <see cref="P:MudBlazor.MudForm.Validation"/>.
            </summary>
        </member>
        <member name="P:MudBlazor.MudForm.Errors">
            <summary>
            Validation error messages.
            </summary>
        </member>
        <member name="P:MudBlazor.MudForm.Model">
            <summary>
            Specifies the top-level model object for the form. Used with Fluent Validation
            </summary>
        </member>
        <member name="M:MudBlazor.MudForm.MudBlazor#Interfaces#IForm#Update(MudBlazor.Interfaces.IFormComponent)">
            <summary>
            Called by any input of the form to signal that its value changed. 
            </summary>
            <param name="formControl"></param>
        </member>
        <member name="M:MudBlazor.MudForm.Validate">
            <summary>
            Force a validation of all form controls, even if they haven't been touched by the user yet.
            </summary>
        </member>
        <member name="M:MudBlazor.MudForm.Reset">
            <summary>
            Reset all form controls and reset their validation state.
            </summary>
        </member>
        <member name="M:MudBlazor.MudForm.ResetValidation">
            <summary>
            Reset the validation state but keep the values.
            </summary>
        </member>
        <member name="P:MudBlazor.MudHidden.Breakpoint">
            <summary>
            The screen size(s) depending on which the ChildContent should not be rendered (or should be, if Invert is true)
            </summary>
        </member>
        <member name="P:MudBlazor.MudHidden.Invert">
            <summary>
            Inverts the Breakpoint, so that the ChildContent is only rendered when the breakpoint matches the screen size.
            </summary>
        </member>
        <member name="P:MudBlazor.MudHidden.IsHidden">
            <summary>
            True if the component is not visible (two-way bindable)
            </summary>
        </member>
        <member name="P:MudBlazor.MudHidden.IsHiddenChanged">
            <summary>
            Fires when the breakpoint changes visibility of the component
            </summary>
        </member>
        <member name="P:MudBlazor.MudHidden.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIcon.Icon">
            <summary>
            Icon to be used can either be svg paths for font icons.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIcon.Title">
            <summary>
            Title of the icon used for accessibility.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIcon.Size">
            <summary>
            The Size of the icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIcon.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIcon.ViewBox">
            <summary>
            The viewbox size of an svg element.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIcon.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudImage.Fluid">
            <summary>
            Applies the fluid class so the image scales with the parent width.
            </summary>
        </member>
        <member name="P:MudBlazor.MudImage.Src">
            <summary>
            Specifies the path to the image.
            </summary>
        </member>
        <member name="P:MudBlazor.MudImage.Alt">
            <summary>
            Specifies an alternate text for the image.
            </summary>
        </member>
        <member name="P:MudBlazor.MudImage.Height">
            <summary>
            Specifies the height of the image in px.
            </summary>
        </member>
        <member name="P:MudBlazor.MudImage.Width">
            <summary>
            Specifies the width of the image in px.
            </summary>
        </member>
        <member name="P:MudBlazor.MudImage.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudImage.ObjectFit">
            <summary>
            Controls how the image should be resized.
            </summary>
        </member>
        <member name="P:MudBlazor.MudImage.ObjectPosition">
            <summary>
            Controls how the image should positioned within its container.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.InputContent">
            <summary>
            Should be the Input
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.Margin">
            <summary>
             Will adjust vertical spacing. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.Required">
            <summary>
            If true, will apply mud-input-required class to the output div
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.Error">
            <summary>
            If true, the label will be displayed in an error state.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.ErrorText">
            <summary>
            The ErrorText that will be displayed if Error true
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.HelperText">
            <summary>
            The HelperText will be displayed below the text field.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.HelperTextOnFocus">
            <summary>
            If true, the helper text will only be visible on focus.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.CounterText">
            <summary>
            The current character counter, displayed below the text field.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.FullWidth">
            <summary>
            If true, the input will take up the full width of its container.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.Label">
            <summary>
            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.Variant">
            <summary>
            Variant can be Text, Filled or Outlined.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.Disabled">
            <summary>
            If true, the input element will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputControl.ForId">
            <summary>
            If string has value the label "for" attribute will be added.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDebouncedInput`1.DebounceInterval">
            <summary>
            Interval to be awaited in milliseconds before changing the Text value
            </summary>
        </member>
        <member name="P:MudBlazor.MudDebouncedInput`1.OnDebounceIntervalElapsed">
            <summary>
            callback to be called when the debounce interval has elapsed
            receives the Text as a parameter
            </summary>
        </member>
        <member name="P:MudBlazor.MudInput`1.InputType">
            <summary>
            Type of the input element. It should be a valid HTML5 input type.
            </summary>
        </member>
        <member name="M:MudBlazor.MudInput`1.OnPaste(Microsoft.AspNetCore.Components.Web.ClipboardEventArgs)">
            <summary>
            Paste hook for descendants.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInput`1.ChildContent">
            <summary>
            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInput`1.OnIncrement">
            <summary>
            Invokes the callback when the Up arrow button is clicked when the input is set to <see cref="F:MudBlazor.InputType.Number"/>.
            Note: use the optimized control <see cref="T:MudBlazor.MudNumericField`1"/> if you need to deal with numbers.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInput`1.OnDecrement">
            <summary>
            Invokes the callback when the Down arrow button is clicked when the input is set to <see cref="F:MudBlazor.InputType.Number"/>.
            Note: use the optimized control <see cref="T:MudBlazor.MudNumericField`1"/> if you need to deal with numbers.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInput`1.HideSpinButtons">
            <summary>
            Hides the spin buttons for <see cref="T:MudBlazor.MudNumericField`1"/>
            </summary>
        </member>
        <member name="P:MudBlazor.MudInput`1.Clearable">
            <summary>
            Show clear button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInput`1.OnClearButtonClick">
            <summary>
            Button click event for clear button. Called after text and value has been cleared.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInput`1.OnMouseWheel">
            <summary>
            Mouse wheel event for input.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInput`1.ClearIcon">
            <summary>
            Custom clear icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInput`1.NumericUpIcon">
            <summary>
            Custom numeric up icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInput`1.NumericDownIcon">
            <summary>
            Custom numeric down icon.
            </summary>
        </member>
        <member name="M:MudBlazor.MudInput`1.SetText(System.String)">
            <summary>
            Sets the input text from outside programmatically
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:MudBlazor.MudInputLabel.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputLabel.Disabled">
            <summary>
            If true, the input element will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputLabel.Error">
            <summary>
            If true, the label will be displayed in an error state.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputLabel.Variant">
            <summary>
            Variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputLabel.Margin">
            <summary>
             Will adjust vertical spacing. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudInputLabel.ForId">
            <summary>
             Will set the for attribute for WCAG accessiblility
            </summary>
        </member>
        <member name="P:MudBlazor.MudRangeInput`1.InputType">
            <summary>
            Type of the input element. It should be a valid HTML5 input type.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRangeInput`1.PlaceholderStart">
            <summary>
            The short hint displayed in the start input before the user enters a value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRangeInput`1.PlaceholderEnd">
            <summary>
            The short hint displayed in the end input before the user enters a value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRangeInput`1.ChildContent">
            <summary>
            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRangeInput`1.SeparatorIcon">
            <summary>
            Custom separator icon, leave null for default.
            </summary>
        </member>
        <member name="M:MudBlazor.MudRangeInput`1.FocusStartAsync">
            <summary>
            Focuses the start input of MudRangeInput
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudRangeInput`1.SelectStartAsync">
            <summary>
            Selects the start text of MudRangeInput
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudRangeInput`1.SelectRangeStartAsync(System.Int32,System.Int32)">
            <summary>
            Selects the specified range of the start text
            </summary>
            <param name="pos1">Start position of the selection</param>
            <param name="pos2">End position of the selection</param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudRangeInput`1.FocusEndAsync">
            <summary>
            Focuses the end input of MudRangeInput
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudRangeInput`1.SelectEndAsync">
            <summary>
            Selects the end text of MudRangeInput
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudRangeInput`1.SelectRangeEndAsync(System.Int32,System.Int32)">
            <summary>
            Selects the specified range of the end text
            </summary>
            <param name="pos1">Start position of the selection</param>
            <param name="pos2">End position of the selection</param>
            <returns></returns>
        </member>
        <member name="P:MudBlazor.MudLink.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudLink.Typo">
            <summary>
            Typography variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudLink.Underline">
            <summary>
            Controls when the link should have an underline.
            </summary>
        </member>
        <member name="P:MudBlazor.MudLink.Href">
            <summary>
            The URL, which is the actual link.
            </summary>
        </member>
        <member name="P:MudBlazor.MudLink.Target">
            <summary>
            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>
            </summary>
        </member>
        <member name="P:MudBlazor.MudLink.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudLink.Disabled">
            <summary>
            If true, the navlink will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudList.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudList.Clickable">
            <summary>
            Set true to make the list items clickable. This is also the precondition for list selection to work.
            </summary>
        </member>
        <member name="P:MudBlazor.MudList.DisablePadding">
            <summary>
            If true, vertical padding will be removed from the list.
            </summary>
        </member>
        <member name="P:MudBlazor.MudList.Dense">
            <summary>
            If true, compact vertical padding will be applied to all list items.
            </summary>
        </member>
        <member name="P:MudBlazor.MudList.DisableGutters">
            <summary>
            If true, the left and right padding is removed on all list items.
            </summary>
        </member>
        <member name="P:MudBlazor.MudList.Disabled">
            <summary>
            If true, will disable the list item if it has onclick.
            </summary>
        </member>
        <member name="P:MudBlazor.MudList.SelectedItem">
            <summary>
            The current selected list item.
            Note: make the list Clickable for item selection to work.
            </summary>
        </member>
        <member name="P:MudBlazor.MudList.SelectedItemChanged">
            <summary>
            Called whenever the selection changed
            </summary>
        </member>
        <member name="P:MudBlazor.MudList.SelectedValue">
            <summary>
            The current selected value.
            Note: make the list Clickable for item selection to work.
            </summary>
        </member>
        <member name="P:MudBlazor.MudList.SelectedValueChanged">
            <summary>
            Called whenever the selection changed
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.Text">
            <summary>
            The text to display
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.Avatar">
            <summary>
            Avatar to use if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.Href">
            <summary>
            Link to a URL when clicked.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.ForceLoad">
            <summary>
            If true, force browser to redirect outside component router-space.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.AvatarClass">
            <summary>
            Avatar CSS Class to apply if Avatar is set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.Disabled">
            <summary>
            If true, will disable the list item if it has onclick.
            The value can be overridden by the parent list.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.Icon">
            <summary>
            Icon to use if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.IconColor">
            <summary>
            The color of the icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.IconSize">
            <summary>
            Sets the Icon Size.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.AdornmentColor">
            <summary>
            The color of the adornment if used. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.ExpandLessIcon">
            <summary>
            Custom expand less icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.ExpandMoreIcon">
            <summary>
            Custom expand more icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.Inset">
            <summary>
            If true, the List Subheader will be indented.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.Dense">
            <summary>
            If true, compact vertical padding will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.DisableGutters">
            <summary>
            If true, the left and right padding is removed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.Expanded">
            <summary>
            Expand or collapse nested list. Two-way bindable. Note: if you directly set this to
            true or false (instead of using two-way binding) it will force the nested list's expansion state.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.InitiallyExpanded">
            <summary>
            If true, expands the nested list on first display
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.CommandParameter">
            <summary>
            Command parameter.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.Command">
            <summary>
            Command executed when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.ChildContent">
            <summary>
            Display content of this list item. If set, this overrides Text
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.NestedList">
            <summary>
            Add child list items here to create a nested list.
            </summary>
        </member>
        <member name="P:MudBlazor.MudListItem.OnClick">
            <summary>
            List click event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMask.ChildContent">
            <summary>
            ChildContent will only be displayed if InputType.Hidden and if its not null. Required for Select
            </summary>
        </member>
        <member name="P:MudBlazor.MudMask.Mask">
            <summary>
            Provide a masking object. Built-in masks are PatternMask, MultiMask, RegexMask and BlockMask
            </summary>
        </member>
        <member name="P:MudBlazor.MudMask.InputType">
            <summary>
            Type of the input element. It should be a valid HTML5 input type.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMask.Clearable">
            <summary>
            Show clear button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMask.OnClearButtonClick">
            <summary>
            Button click event for clear button. Called after text and value has been cleared.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMask.ClearIcon">
            <summary>
            Custom clear icon.
            </summary>
        </member>
        <member name="M:MudBlazor.MudMask.Clear">
            <summary>
            Clear the text field. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:MudBlazor.MudMenu.ListClass">
            <summary>
            User class names for the list, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.PopoverClass">
            <summary>
            User class names for the popover, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.Icon">
            <summary>
            Icon to use if set will turn the button into a MudIconButton.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.IconColor">
            <summary>
            The color of the icon. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.StartIcon">
            <summary>
            Icon placed before the text if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.EndIcon">
            <summary>
            Icon placed after the text if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.Color">
            <summary>
            The color of the button. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.Size">
            <summary>
            The button Size of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.Variant">
            <summary>
            The button variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.Dense">
            <summary>
            If true, compact vertical padding will be applied to all menu items.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.FullWidth">
            <summary>
            If true, the list menu will be same width as the parent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.MaxHeight">
            <summary>
            Sets the maxheight the menu can have when open.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.PositionAtCursor">
            <summary>
            If true, instead of positioning the menu at the left upper corner, position at the exact cursor location.
            This makes sense for larger activators
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.PositionAtCurser">
            <summary>
            If true, instead of positioning the menu at the left upper corner, position at the exact cursor location.
            This makes sense for larger activators
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.ActivatorContent">
            <summary>
            Place a MudButton, a MudIconButton or any other component capable of acting as an activator. This will
            override the standard button and all parameters which concern it.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.ActivationEvent">
            <summary>
            Specify the activation event when ActivatorContent is set
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.AnchorOrigin">
            <summary>
            Set the anchor origin point to determen where the popover will open from.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.TransformOrigin">
            <summary>
            Sets the transform origin point for the popover.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.Direction">
            <summary>
            Sets the direction the select menu will start from relative to its parent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.OffsetY">
            <summary>
            If true, the select menu will open either before or after the input depending on the direction.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.OffsetX">
            <summary>
            If true, the select menu will open either above or bellow the input depending on the direction.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.LockScroll">
            <summary>
            Set to true if you want to prevent page from scrolling when the menu is open
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.Disabled">
            <summary>
            If true, menu will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.DisableElevation">
            <summary>
            If true, no drop-shadow will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenu.ChildContent">
            <summary>
            Add menu items here
            </summary>
        </member>
        <member name="M:MudBlazor.MudMenu.Activate(System.Object,Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Implementation of IActivatable.Activate, toggles the menu.
            </summary>
            <param name="activator"></param>
            <param name="args"></param>
        </member>
        <member name="P:MudBlazor.MudMenuItem.Link">
            <summary>
            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)
            </summary>
        </member>
        <member name="P:MudBlazor.MudMenuItem.Href">
            <summary>
            If set to a URL, clicking the button will open the referenced document. Use Target to specify where
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.Title">
            <summary>
            The message box title. If null or empty, title will be hidden
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.TitleContent">
            <summary>
            Define the message box title as a renderfragment (overrides Title)
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.Message">
            <summary>
            The message box message as string.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.MarkupMessage">
            <summary>
            The message box message as markup string.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.MessageContent">
            <summary>
            Define the message box body as a renderfragment (overrides Message)
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.CancelText">
            <summary>
            Text of the cancel button. Leave null to hide the button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.CancelButton">
            <summary>
            Define the cancel button as a render fragment (overrides CancelText).
            Must be a MudButton
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.NoText">
            <summary>
            Text of the no button. Leave null to hide the button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.NoButton">
            <summary>
            Define the no button as a render fragment (overrides CancelText).
            Must be a MudButton
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.YesText">
            <summary>
            Text of the yes/OK button. Leave null to hide the button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.YesButton">
            <summary>
            Define the cancel button as a render fragment (overrides CancelText).
            Must be a MudButton
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.OnYes">
            <summary>
            Fired when the yes button is clicked
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.OnNo">
            <summary>
            Fired when the no button is clicked
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.OnCancel">
            <summary>
            Fired when the cancel button is clicked or the msg box was closed via the X
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.IsVisible">
            <summary>
            Bind this two-way to show and close an inlined message box. Has no effect on opened msg boxes
            </summary>
        </member>
        <member name="P:MudBlazor.MudMessageBox.IsVisibleChanged">
            <summary>
            Raised when the inline dialog's display status changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavGroup.Icon">
            <summary>
            Icon to use if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavGroup.IconColor">
            <summary>
            The color of the icon. It supports the theme colors, default value uses the themes drawer icon color.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavGroup.Disabled">
            <summary>
            If true, the button will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavGroup.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavGroup.Expanded">
            <summary>
            If true, expands the nav group, otherwise collapse it. 
            Two-way bindable
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavGroup.HideExpandIcon">
            <summary>
            If true, hides expand-icon at the end of the NavGroup.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavGroup.MaxHeight">
            <summary>
            Explicitly sets the height for the Collapse element to override the css default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavGroup.ExpandIcon">
            <summary>
            If set, overrides the default expand icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavLink.Icon">
            <summary>
            Icon to use if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavLink.IconColor">
            <summary>
            The color of the icon. It supports the theme colors, default value uses the themes drawer icon color.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavMenu.Color">
            <summary>
            The color of the active NavLink.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavMenu.Bordered">
            <summary>
            If true, adds a border of the active NavLink, does nothing if variant outlined is used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavMenu.Rounded">
            <summary>
            If true, default theme border-radius will be used on all navlinks.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavMenu.Margin">
            <summary>
             Adjust the vertical spacing between navlinks.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNavMenu.Dense">
            <summary>
            If true, compact vertical padding will be applied to all navmenu items.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNumericField`1.Clearable">
            <summary>
            Show clear button.
            </summary>
        </member>
        <member name="M:MudBlazor.MudNumericField`1.Change(System.Double)">
            <summary>
            Decrements or increments depending on factor
            </summary>
            <param name="factor">Multiplication factor (1 or -1) will be applied to the step</param>
        </member>
        <member name="M:MudBlazor.MudNumericField`1.Increment">
            <summary>
            Adds a Step to the Value
            </summary>
        </member>
        <member name="M:MudBlazor.MudNumericField`1.Decrement">
            <summary>
            Substracts a Step from the Value
            </summary>
        </member>
        <member name="M:MudBlazor.MudNumericField`1.ConstrainBoundaries(`0)">
            <summary>
            Checks if the value respects the boundaries set for this instance.
            </summary>
            <param name="v">Value to check.</param>
            <returns>Returns a valid value and if it has been changed.</returns>
        </member>
        <member name="P:MudBlazor.MudNumericField`1.InvertMouseWheel">
            <summary>
            Reverts mouse wheel up and down events, if true.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNumericField`1.Min">
            <summary>
            The minimum value for the input.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNumericField`1.Max">
            <summary>
            The maximum value for the input.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNumericField`1.Step">
            <summary>
            The increment added/subtracted by the spin buttons.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNumericField`1.HideSpinButtons">
            <summary>
            Hides the spin buttons, the user can still change value with keyboard arrows and manual update.
            </summary>
        </member>
        <member name="P:MudBlazor.MudNumericField`1.InputMode">
            <summary>
             Hints at the type of data that might be entered by the user while editing the input.
             Defaults to numeric
            </summary>
        </member>
        <member name="P:MudBlazor.MudNumericField`1.Pattern">
             <summary>
             The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
             Defaults to [0-9,.\-]
             To get a numerical keyboard on safari, use the pattern. The default pattern should achieve numerical keyboard.
            
             Note: this pattern is also used to prevent all input except numbers and allowed characters. So for instance to allow only numbers, no signs and no commas you might change it to to [0-9.]
             </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.VisibleChanged">
            <summary>
            Fires when Visible changes
            </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.Visible">
            <summary>
            If true overlay will be visible. Two-way bindable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.AutoClose">
            <summary>
            If true overlay will set Visible false on click.
            </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.LockScroll">
            <summary>
            If true (default), the Document.body element will not be able to scroll
            </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.LockScrollClass">
            <summary>
            The css class that will be added to body if lockscroll is used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.DarkBackground">
            <summary>
            If true applys the themes dark overlay color.
            </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.LightBackground">
            <summary>
            If true applys the themes light overlay color.
            </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.Absolute">
            <summary>
            Icon class names, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.ZIndex">
            <summary>
            Sets the z-index of the overlay.
            </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.CommandParameter">
            <summary>
            Command parameter.
            </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.Command">
            <summary>
            Command executed when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MudBlazor.MudOverlay.OnClick">
            <summary>
            Fired when the overlay is clicked
            </summary>
        </member>
        <member name="P:MudBlazor.MudPageContentNavigation.Sections">
            <summary>
            The displayed section within the MudPageContentNavigation
            </summary>
        </member>
        <member name="P:MudBlazor.MudPageContentNavigation.ActiveSection">
            <summary>
            The currently active session. null if there is no section selected
            </summary>
        </member>
        <member name="P:MudBlazor.MudPageContentNavigation.Headline">
            <summary>
            The text displayed about the section links. Defaults to "Conents"
            </summary>
        </member>
        <member name="P:MudBlazor.MudPageContentNavigation.SectionClassSelector">
            <summary>
            The css selector used to identifify the HTML elements that should be observed for viewport changes
            </summary>
        </member>
        <member name="P:MudBlazor.MudPageContentNavigation.HierarchyMapper">
            <summary>
            If there are mutliple levels, this can specified to make a mapping between a level class likw "second-level" and the level in the hierarchy
            </summary>
        </member>
        <member name="P:MudBlazor.MudPageContentNavigation.ExpandBehaviour">
            <summary>
            If there are multiple levels, this property controls they visibility of them.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPageContentNavigation.ActivateFirstSectionAsDefault">
            <summary>
            If this option is true the first added section will become active when there is no other indication of an active session. Default value is false  
            </summary>
        </member>
        <member name="M:MudBlazor.MudPageContentNavigation.ScrollToSection(System.Uri)">
            <summary>
            Scrolls to a section based on the fragment of the uri. If there is no fragment, no scroll will occured
            </summary>
            <param name="uri">The uri containing the fragment to scroll</param>
            <returns>A task that completes when the viewport has scrolled</returns>
        </member>
        <member name="M:MudBlazor.MudPageContentNavigation.AddSection(System.String,System.String,System.Boolean)">
            <summary>
            Add a section to the content navigation
            </summary>
            <param name="sectionName">name of the section will be displayed in the navigation</param>
            <param name="sectionId">id of the section. It will be appending to the current url, if the section becomes active</param>
            <param name="forceUpdate">If true, StateHasChanged is called, forcing a rerender of the component</param>
        </member>
        <member name="M:MudBlazor.MudPageContentNavigation.AddSection(MudBlazor.MudPageContentSection,System.Boolean)">
            <summary>
            Add a section to the content navigation
            </summary>
            <param name="section">The section that needs to be added</param>
            <param name="forceUpdate">If true, StateHasChanged is called, forcing a rerender of the component</param>
        </member>
        <member name="M:MudBlazor.MudPageContentNavigation.Update">
            <summary>
            Rerender the component
            </summary>
        </member>
        <member name="T:MudBlazor.MudPageContentSection">
            <summary>
            A section (nav link) inside the MudPageContentNavigation
            </summary>
        </member>
        <member name="M:MudBlazor.MudPageContentSection.#ctor(System.String,System.String)">
            <summary>
            create a new instance with a title and id and level set to zero
            </summary>
            <param name="title">name of the section will be displayed in the navigation</param>
            <param name="id">id of the section. It will be appending to the current url, if the section becomes active</param>
        </member>
        <member name="M:MudBlazor.MudPageContentSection.#ctor(System.String,System.String,System.Int32,MudBlazor.MudPageContentSection)">
            <summary>
            create a new instance with a title and id and level
            </summary>
            <param name="title">name of the section will be displayed in the navigation</param>
            <param name="id">id of the section. It will be appending to the current url, if the section becomes active</param>
            <param name="level">The level within the hierachy</param>
            <param name="parent">The parent of the section. null if there is no parent or no hierachy</param>
        </member>
        <member name="P:MudBlazor.MudPageContentSection.Title">
            <summary>
            The Title of the section. This will be displayed in the navigation
            </summary>
        </member>
        <member name="P:MudBlazor.MudPageContentSection.Id">
            <summary>
            Id of the section. It will be appending to the current url, if the section becomes active
            </summary>
        </member>
        <member name="P:MudBlazor.MudPageContentSection.IsActive">
            <summary>
            Indicating if the section is currently in the middle of the viewport
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.Count">
            <summary>
            The number of pages.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.BoundaryCount">
            <summary>
            The number of items at the start and end of the pagination.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.MiddleCount">
            <summary>
            The number of items in the middle of the pagination.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.Selected">
            <summary>
            The selected page number.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.Variant">
            <summary>
            The variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.Rectangular">
            <summary>
            If true, the pagination buttons are displayed rectangular.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.Size">
            <summary>
            The size of the component..
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.DisableElevation">
            <summary>
            If true, no drop-shadow will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.Disabled">
            <summary>
            If true, the pagination will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.ShowFirstButton">
            <summary>
            If true, the navigate-to-first-page button is shown.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.ShowLastButton">
            <summary>
            If true, the navigate-to-last-page button is shown.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.ShowPreviousButton">
            <summary>
            If true, the navigate-to-previous-page button is shown.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.ShowNextButton">
            <summary>
            If true, the navigate-to-next-page button is shown.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.ControlButtonClicked">
            <summary>
            Invokes the callback when a control button is clicked.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.SelectedChanged">
            <summary>
            Invokes the callback when selected page changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.FirstIcon">
            <summary>
            Custom first icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.BeforeIcon">
            <summary>
            Custom before icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.NextIcon">
            <summary>
            Custom next icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPagination.LastIcon">
            <summary>
            Custom last icon.
            </summary>
        </member>
        <member name="M:MudBlazor.MudPagination.NavigateTo(MudBlazor.Page)">
            <summary>
            Navigates to the specified page.
            </summary>
            <param name="page">The target page. page=Page.Next navigates to the next page.</param>
        </member>
        <member name="M:MudBlazor.MudPagination.NavigateTo(System.Int32)">
            <summary>
            Navigates to the specified page.
            </summary>
            <param name="pageIndex"></param>The target page. pageIndex=2 navigates to the 3. page.
        </member>
        <member name="P:MudBlazor.MudPaper.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPaper.Square">
            <summary>
            If true, border-radius is set to 0.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPaper.Outlined">
            <summary>
            If true, card will be outlined.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPaper.Height">
            <summary>
            Height of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPaper.Width">
            <summary>
            Width of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPaper.MaxHeight">
            <summary>
            Max-Height of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPaper.MaxWidth">
            <summary>
            Max-Width of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPaper.MinHeight">
            <summary>
            Min-Height of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPaper.MinWidth">
            <summary>
            Min-Width of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPaper.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.InputIcon">
            <summary>
            Sets the icon of the input text field
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.AdornmentColor">
            <summary>
            The color of the adornment if used. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.AdornmentIcon">
            <summary>
            Sets the icon of the input text field
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.AdornmentAriaLabel">
            <summary>
            Sets the aria-label of the input text field icon
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Placeholder">
            <summary>
            The short hint displayed in the input before the user enters a value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.PickerOpened">
            <summary>
            Fired when the dropdown / dialog opens
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.PickerClosed">
            <summary>
            Fired when the dropdown / dialog closes
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Square">
            <summary>
            If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.ReadOnly">
            <summary>
            If true, no date or time can be defined.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Rounded">
            <summary>
            If true, border-radius is set to theme default when in Static Mode.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.HelperText">
            <summary>
            If string has value, HelperText will be applied.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.HelperTextOnFocus">
            <summary>
            If true, the helper text will only be visible on focus.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Label">
            <summary>
            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Disabled">
            <summary>
            If true, the picker will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Editable">
            <summary>
            If true, the picker will be editable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.DisableToolbar">
            <summary>
            Hide toolbar and show only date/time views.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.ToolBarClass">
            <summary>
            User class names for picker's ToolBar, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.PickerVariant">
            <summary>
            Picker container option
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.InputVariant">
            <summary>
             Variant of the text input
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Variant">
            <summary>
            Variant of the text input
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Adornment">
            <summary>
            Sets if the icon will be att start or end, set to false to disable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Orientation">
            <summary>
            What orientation to render in when in PickerVariant Static Mode.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.IconSize">
            <summary>
            Sets the Icon Size.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Color">
            <summary>
            The color of the toolbar, selected and active. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.AllowKeyboardInput">
            <summary>
            Changes the cursor appearance.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.TextChanged">
            <summary>
            Fired when the text changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Text">
            <summary>
            The currently selected string value (two-way bindable)
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.ClassActions">
            <summary>
            CSS class that will be applied to the action buttons container
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.PickerActions">
            <summary>
            Define the action buttons here
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Margin">
            <summary>
             Will adjust vertical spacing.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPicker`1.Mask">
            <summary>
            A mask for structured input of the date (requires Editable to be true).
            </summary>
        </member>
        <member name="M:MudBlazor.MudPicker`1.StringValueChanged(System.String)">
            <summary>
            Value change hook for descendants.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.MaxHeight">
            <summary>
            Sets the maxheight the popover can have when open.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.Paper">
            <summary>
            If true, will apply default MudPaper classes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.Square">
            <summary>
            If true, border-radius is set to 0.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.Open">
            <summary>
            If true, the popover is visible.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.Fixed">
            <summary>
            If true the popover will be fixed position instead of absolute.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.Duration">
            <summary>
            Sets the length of time that the opening transition takes to complete.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.Delay">
            <summary>
            Sets the amount of time to wait from opening the popover before beginning to perform the transition. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.Direction">
            <summary>
            Sets the direction the popover will start from relative to its parent.
            </summary>
            
        </member>
        <member name="P:MudBlazor.MudPopover.AnchorOrigin">
            <summary>
            Set the anchor point on the element of the popover.
            The anchor point will determinate where the popover will be placed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.TransformOrigin">
            <summary>
            Sets the intersection point if the anchor element. At this point the popover will lay above the popover. 
            This property in conjunction with AnchorPlacement determinate where the popover will be placed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.OverflowBehavior">
            <summary>
            Set the overflow behavior of a popover and controls how the element should react if there is not enough space for the element to be visible
            Defaults to none, which doens't apply any overflow logic
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.OffsetX">
            <summary>
            If true, the select menu will open either above or bellow the input depending on the direction.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.OffsetY">
            <summary>
            If true, the select menu will open either before or after the input depending on the direction.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.RelativeWidth">
            <summary>
            If true, the popover will have the same width at its parent element, default to false
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopover.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudPopoverProvider.IsEnabled">
            <summary>
            In some scenarios we need more than one ThemeProvider but we must not have more than one
            PopoverProvider. Set a cascading value with UsePopoverProvider=false to prevent it.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressCircular.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressCircular.Size">
            <summary>
            The size of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressCircular.Indeterminate">
            <summary>
            Constantly animates, does not follow any value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressLinear.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressLinear.Size">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressLinear.Indeterminate">
            <summary>
            Constantly animates, does not follow any value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressLinear.Buffer">
            <summary>
            If true, the buffer value will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressLinear.Rounded">
            <summary>
            If true, border-radius is set to the themes default value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressLinear.Striped">
            <summary>
            Adds stripes to the filled part of the linear progress.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressLinear.Vertical">
            <summary>
            If true, the progress bar  will be displayed vertically.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressLinear.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressLinear.Min">
            <summary>
            The minimum allowed value of the linear prgoress. Should not be equal to max.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressLinear.Max">
            <summary>
            The maximum allowed value of the linear prgoress. Should not be equal to min.
            </summary>
        </member>
        <member name="P:MudBlazor.MudProgressLinear.Value">
            <summary>
            The maximum allowed value of the linear prgoress. Should not be equal to min.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRadio`1.IMudRadioGroup">
            <summary>
            The parent Radio Group
            </summary>
        </member>
        <member name="P:MudBlazor.MudRadio`1.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRadio`1.Placement">
            <summary>
            The position of the child content.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRadio`1.Option">
            <summary>
            The value to associate to the button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRadio`1.Dense">
            <summary>
            If true, compact padding will be applied.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRadio`1.Size">
            <summary>
            The Size of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRadio`1.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRadio`1.Disabled">
            <summary>
            If true, the button will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRadio`1.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.ClassName">
            <summary>
            Space separated class names
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.RatingItemsClass">
            <summary>
            User class names for RatingItems, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.RatingItemsStyle">
            <summary>
            User styles for RatingItems.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.Name">
            <summary>
            Input name. If not initialized, name will be random guid.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.MaxValue">
            <summary>
            Max value and how many elements to click will be generated. Default: 5
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.FullIcon">
            <summary>
            Selected or hovered icon. Default @Icons.Material.Star
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.EmptyIcon">
            <summary>
            Non selected item icon. Default @Icons.Material.StarBorder
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.Size">
            <summary>
            The Size of the icons.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.Disabled">
            <summary>
            If true, the controls will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.ReadOnly">
            <summary>
            If true, the ratings will show without interactions.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.SelectedValueChanged">
            <summary>
            Fires when SelectedValue changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.SelectedValue">
            <summary>
            Selected value. This property is two-way bindable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRating.HoveredValueChanged">
            <summary>
            Fires when hovered value change. Value will be null if no rating item is hovered.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRatingItem.ClassName">
            <summary>
            Space separated class names
            </summary>
        </member>
        <member name="P:MudBlazor.MudRatingItem.ItemValue">
            <summary>
            This rating item value;
            </summary>
        </member>
        <member name="P:MudBlazor.MudRatingItem.Size">
            <summary>
            The Size of the icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRatingItem.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRatingItem.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRatingItem.Disabled">
            <summary>
            If true, the controls will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRatingItem.ReadOnly">
            <summary>
            If true, the item will be readonly.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRatingItem.ItemClicked">
            <summary>
            Fires when element clicked.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRatingItem.ItemHovered">
            <summary>
            Fires when element hovered.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRTLProvider.RightToLeft">
            <summary>
            If true, changes the layout to RightToLeft.
            </summary>
        </member>
        <member name="P:MudBlazor.MudRTLProvider.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudScrollToTop.Selector">
            <summary>
            The CSS selector to which the scroll event will be attached
            </summary>
        </member>
        <member name="P:MudBlazor.MudScrollToTop.Visible">
            <summary>
            If set to true, it starts Visible. If sets to false, it will become visible when the TopOffset amount of scrolled pixels is reached
            </summary>
        </member>
        <member name="P:MudBlazor.MudScrollToTop.VisibleCssClass">
            <summary>
            CSS class for the Visible state. Here, apply some transitions and animations that will happen when the component becomes visible
            </summary>
        </member>
        <member name="P:MudBlazor.MudScrollToTop.HiddenCssClass">
            <summary>
            CSS class for the Hidden state. Here, apply some transitions and animations that will happen when the component becomes invisible
            </summary>
        </member>
        <member name="P:MudBlazor.MudScrollToTop.TopOffset">
            <summary>
            The distance in pixels scrolled from the top of the selected element from which 
            the component becomes visible
            </summary>
        </member>
        <member name="P:MudBlazor.MudScrollToTop.ScrollBehavior">
            <summary>
            Smooth or Auto
            </summary>
        </member>
        <member name="P:MudBlazor.MudScrollToTop.OnScroll">
            <summary>
            Called when scroll event is fired
            </summary>
        </member>
        <member name="M:MudBlazor.MudScrollToTop.ScrollListener_OnScroll(System.Object,MudBlazor.ScrollEventArgs)">
            <summary>
            event received when scroll in the selected element happens
            </summary>
            <param name="sender">ScrollListener instance</param>
            <param name="e">Information about the position of the scrolled element</param>
        </member>
        <member name="M:MudBlazor.MudScrollToTop.OnClick">
            <summary>
            Scrolls to top when clicked
            </summary>
        </member>
        <member name="M:MudBlazor.MudScrollToTop.Dispose">
            <summary>
            Remove the event
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.OnOpen">
            <summary>
            Fired when dropdown opens.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.OnClose">
            <summary>
            Fired when dropdown closes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.ChildContent">
            <summary>
            Add the MudSelectItems here
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.PopoverClass">
            <summary>
            User class names for the popover, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.Dense">
            <summary>
            If true, compact vertical padding will be applied to all Select items.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.OpenIcon">
            <summary>
            The Open Select Icon
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.CloseIcon">
            <summary>
            The Close Select Icon
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.SelectAll">
            <summary>
            If set to true and the MultiSelection option is set to true, a "select all" checkbox is added at the top of the list of items.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.SelectAllText">
            <summary>
            Define the text of the Select All option.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.SelectedValuesChanged">
            <summary>
            Fires when SelectedValues changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.MultiSelectionTextFunc">
            <summary>
            Function to define a customized multiselection text.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.Delimiter">
            <summary>
            Parameter to define the delimited string separator.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.SelectedValues">
            <summary>
            Set of selected values. If MultiSelection is false it will only ever contain a single value. This property is two-way bindable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.Comparer">
            <summary>
            The Comparer to use for comparing selected values internally.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.ToStringFunc">
            <summary>
            Defines how values are displayed in the drop-down list
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.CanRenderValue">
            <summary>
            Returns whether or not the Value can be found in items. If not, the Select will display it as a string.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.MultiSelection">
            <summary>
            If true, multiple values can be selected via checkboxes which are automatically shown in the dropdown
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.Items">
            <summary>
            The collection of items within this select
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.MaxHeight">
            <summary>
            Sets the maxheight the Select can have when open.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.AnchorOrigin">
            <summary>
            Set the anchor origin point to determen where the popover will open from.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.TransformOrigin">
            <summary>
            Sets the transform origin point for the popover.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.Direction">
            <summary>
            Sets the direction the Select menu should open.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.OffsetX">
            <summary>
            If true, the Select menu will open either before or after the input (left/right).
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.OffsetY">
            <summary>
            If true, the Select menu will open either before or after the input (top/bottom).
            </summary>
            [ExcludeFromCodeCoverage]
        </member>
        <member name="P:MudBlazor.MudSelect`1.Strict">
            <summary>
            If true, the Select's input will not show any values that are not defined in the dropdown.
            This can be useful if Value is bound to a variable which is initialized to a value which is not in the list
            and you want the Select to show the label / placeholder instead.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.Clearable">
            <summary>
            Show clear button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.LockScroll">
            <summary>
            If true, prevent scrolling while dropdown is open.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.OnClearButtonClick">
            <summary>
            Button click event for clear button. Called after text and value has been cleared.
            </summary>
        </member>
        <member name="M:MudBlazor.MudSelect`1.SelectClearButtonClickHandlerAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Extra handler for clearing selection.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.CheckedIcon">
            <summary>
            Custom checked icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.UncheckedIcon">
            <summary>
            Custom unchecked icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.IndeterminateIcon">
            <summary>
            Custom indeterminate icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelect`1.SelectAllCheckBoxIcon">
            <summary>
            The checkbox icon reflects the select all option's state
            </summary>
        </member>
        <member name="M:MudBlazor.MudSelect`1.Clear">
            <summary>
            Clear the selection
            </summary>
        </member>
        <member name="T:MudBlazor.MudSelectItem`1">
            <summary>
            Represents an option of a select or multi-select. To be used inside MudSelect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelectItem`1.IMudSelect">
            <summary>
            The parent select component
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelectItem`1.HideContent">
            <summary>
            Select items with HideContent==true are only there to register their RenderFragment with the select but
            wont render and have no other purpose!
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelectItem`1.Value">
            <summary>
            A user-defined option that can be selected
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelectItem`1.MultiSelection">
            <summary>
            Mirrors the MultiSelection status of the parent select
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelectItem`1.IsSelected">
            <summary>
            Selected state of the option. Only works if the parent is a mulit-select
            </summary>
        </member>
        <member name="P:MudBlazor.MudSelectItem`1.CheckBoxIcon">
            <summary>
            The checkbox icon reflects the multi-select option's state
            </summary>
        </member>
        <member name="P:MudBlazor.MudSkeleton.Width">
            <summary>
            With defined in string, needs px or % or equal prefix.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSkeleton.Height">
            <summary>
            Height defined in string, needs px or % or equal prefix.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSkeleton.SkeletonType">
            <summary>
            Shape of the skeleton that will be rendered.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSkeleton.Animation">
            <summary>
            Animation style, if false it will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSlider`1.Min">
            <summary>
            The minimum allowed value of the slider. Should not be equal to max.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSlider`1.Max">
            <summary>
            The maximum allowed value of the slider. Should not be equal to min.
            </summary>
            
        </member>
        <member name="P:MudBlazor.MudSlider`1.Step">
            <summary>
            How many steps the slider should take on each move.
            </summary>
            
        </member>
        <member name="P:MudBlazor.MudSlider`1.Disabled">
            <summary>
            If true, the slider will be disabled.
            </summary>
            
        </member>
        <member name="P:MudBlazor.MudSlider`1.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSlider`1.Color">
            <summary>
            The color of the component. It supports the Primary, Secondary and Tertiary theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSlider`1.Immediate">
            <summary>
            If true, the dragging the slider will update the Value immediately.
            If false, the Value is updated only on releasing the handle.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSlider`1.Vertical">
            <summary>
            If true, displays the slider vertical.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSlider`1.TickMarks">
            <summary>
            If true, displays tick marks on the track.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSlider`1.TickMarkLabels">
            <summary>
            Labels for tick marks, will attempt to map the labels to each step in index order.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSlider`1.Size">
            <summary>
            Labels for tick marks, will attempt to map the labels to each step in index order.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSlider`1.Variant">
            <summary>
            The variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSlider`1.ValueLabel">
            <summary>
            Displays the value over the slider thumb.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSnackbarElement.CloseIcon">
            <summary>
            Custom close icon.
            </summary>
        </member>
        <member name="P:MudBlazor.SnackbarOptions.NormalIcon">
            <summary>
            Custom normal icon.
            </summary>
        </member>
        <member name="P:MudBlazor.SnackbarOptions.InfoIcon">
            <summary>
            Custom info icon.
            </summary>
        </member>
        <member name="P:MudBlazor.SnackbarOptions.SuccessIcon">
            <summary>
            Custom success icon.
            </summary>
        </member>
        <member name="P:MudBlazor.SnackbarOptions.WarningIcon">
            <summary>
            Custom warning icon.
            </summary>
        </member>
        <member name="P:MudBlazor.SnackbarOptions.ErrorIcon">
            <summary>
            Custom error icon.
            </summary>
        </member>
        <member name="T:MudBlazor.SnackbarService">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.MudSwitch`1.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSwitch`1.Label">
            <summary>
            The text/label will be displayed next to the switch if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSwitch`1.ThumbIcon">
            <summary>
            Shows an icon on Switch's thumb.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSwitch`1.ThumbIconColor">
            <summary>
            The color of the thumb icon. Supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSwitch`1.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSimpleTable.Elevation">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSimpleTable.Hover">
            <summary>
            If true, the table row will shade on hover.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSimpleTable.Square">
            <summary>
            If true, border-radius is set to 0.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSimpleTable.Dense">
            <summary>
            If true, compact padding will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSimpleTable.Outlined">
            <summary>
            If true, table will be outlined.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSimpleTable.Bordered">
            <summary>
            If true, table's cells will have left/right borders.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSimpleTable.Striped">
            <summary>
            If true, striped table rows will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSimpleTable.FixedHeader">
            <summary>
            When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSimpleTable.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="T:MudBlazor.MudColumn`1">
            <summary>
            Binds an object's property to a column by its property name 
            </summary>
        </member>
        <member name="P:MudBlazor.MudColumn`1.Value">
            <summary>
            Specifies the name of the object's property bound to the column
            </summary>
        </member>
        <member name="P:MudBlazor.MudColumn`1.FooterText">
            <summary>
            Used if no FooterValue is available
            </summary>
        </member>
        <member name="P:MudBlazor.MudColumn`1.DataFormatString">
            <summary>
            Specifies which string format should be used.
            </summary>
        </member>
        <member name="T:MudBlazor.MudSortableColumn`2">
            <summary>
            Binds an object's property to a column by its property name 
            </summary>
        </member>
        <member name="P:MudBlazor.MudSortableColumn`2.Value">
            <summary>
            Specifies the name of the object's property bound to the column
            </summary>
        </member>
        <member name="P:MudBlazor.MudSortableColumn`2.FooterValue">
            <summary>
            Specifies the name of the object's property bound to the footer
            </summary>
        </member>
        <member name="P:MudBlazor.MudSortableColumn`2.FooterText">
            <summary>
            Used if no FooterValue is available
            </summary>
        </member>
        <member name="P:MudBlazor.MudSortableColumn`2.DataFormatString">
            <summary>
            Specifies which string format should be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudSortableColumn`2.ReadOnly">
            <summary>
            Specifies if the column should be readonly even if the DataTable is in editmode.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.RowTemplate">
            <summary>
            Defines how a table row looks like. Use MudTd to define the table cells and their content.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.ChildRowContent">
            <summary>
            Row Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.RowEditingTemplate">
            <summary>
            Defines how a table row looks like in edit mode (for selected row). Use MudTd to define the table cells and their content.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.Columns">
            <summary>
            Defines how a table column looks like. Columns components should inherit from MudBaseColumn
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.QuickColumns">
            <summary>
            Comma separated list of columns to show if there is no templates defined
            </summary>
        </member>
        <member name="M:MudBlazor.MudTable`1.OnInitialized">
            <summary>
            Creates a default Column renderfragment if there is no templates defined
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.NoRecordsContent">
            <summary>
            Defines the table body content when there are no matching records found
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.LoadingContent">
            <summary>
            Defines the table body content  the table has no rows and is loading
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.HorizontalScrollbar">
            <summary>
            Defines if the table has a horizontal scrollbar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.Items">
            <summary>
            The data to display in the table. MudTable will render one row per item
            </summary>
            
        </member>
        <member name="P:MudBlazor.MudTable`1.Filter">
            <summary>
            A function that returns whether or not an item should be displayed in the table. You can use this to implement your own search function.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.OnRowClick">
            <summary>
            Button click event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.RowClassFunc">
            <summary>
            Returns the class that will get joined with RowClass. Takes the current item and row index.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.RowStyleFunc">
            <summary>
            Returns the style that will get joined with RowStyle. Takes the current item and row index.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.SelectedItem">
            <summary>
            Returns the item which was last clicked on in single selection mode (that is, if MultiSelection is false)
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.SelectedItemChanged">
            <summary>
            Callback is called when a row has been clicked and returns the selected item.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.SelectedItems">
            <summary>
            If MultiSelection is true, this returns the currently selected items. You can bind this property and the initial content of the HashSet you bind it to will cause these rows to be selected initially.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.SelectedItemsChanged">
            <summary>
            Callback is called whenever items are selected or deselected in multi selection mode.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.GroupBy">
            <summary>
            Defines data grouping parameters. It can has N hierarchical levels
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.GroupHeaderTemplate">
            <summary>
            Defines how a table grouping row header looks like. It works only when GroupBy is not null. Use MudTd to define the table cells and their content.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.GroupHeaderClass">
            <summary>
            Defines custom CSS classes for using on Group Header's MudTr.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.GroupHeaderStyle">
            <summary>
            Defines custom styles for using on Group Header's MudTr.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.GroupFooterClass">
            <summary>
            Defines custom CSS classes for using on Group Footer's MudTr.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.GroupFooterStyle">
            <summary>
            Defines custom styles for using on Group Footer's MudTr.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.GroupFooterTemplate">
            <summary>
            Defines how a table grouping row footer looks like. It works only when GroupBy is not null. Use MudTd to define the table cells and their content.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.ServerData">
            <summary>
            Supply an async function which (re)loads filtered, paginated and sorted data from server.
            Table will await this func and update based on the returned TableData.
            Used only with ServerData
            </summary>
        </member>
        <member name="M:MudBlazor.MudTable`1.ReloadServerData">
            <summary>
            Call this to reload the server-filtered, -sorted and -paginated items
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.IsEditRowSwitchingBlocked">
            <summary>
            When editing a row and this is true, the editing row must be saved/cancelled before a new row will be selected.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow. 0 for no shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Square">
            <summary>
            Set true to disable rounded corners
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Outlined">
            <summary>
            If true, table will be outlined.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Bordered">
            <summary>
            If true, table's cells will have left/right borders.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Dense">
            <summary>
            Set true for rows with a narrow height
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Hover">
            <summary>
            Set true to see rows hover on mouse-over.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Striped">
            <summary>
            If true, striped table rows will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Breakpoint">
            <summary>
            At what breakpoint the table should switch to mobile layout. Takes None, Xs, Sm, Md, Lg and Xl the default behavior is breaking on Xs.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.FixedHeader">
            <summary>
            When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.FixedFooter">
            <summary>
            When true, the footer will be visible is not scrolled to the bottom. Note: set Height to make the table scrollable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Height">
            <summary>
            Setting a height will allow to scroll the table. If not set, it will try to grow in height. You can set this to any CSS value that the
            attribute 'height' accepts, i.e. 500px. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.SortLabel">
            <summary>
            If table is in smalldevice mode and uses any kind of sorting the text applied here will be the sort selects label.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.AllowUnsorted">
            <summary>
            If true allows table to be in an unsorted state through column clicks (i.e. first click sorts "Ascending", second "Descending", third "None").
            If false only "Ascending" and "Descending" states are allowed (i.e. there always should be a column to sort).
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.RowsPerPage">
            <summary>
            If the table has more items than this number, it will break the rows into pages of said size.
            Note: requires a MudTablePager in PagerContent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.RowsPerPageChanged">
            <summary>
            Rows Per Page two-way bindable parameter
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.CurrentPage">
            <summary>
            The page index of the currently displayed page (Zero based). Usually called by MudTablePager.
            Note: requires a MudTablePager in PagerContent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.MultiSelection">
            <summary>
            Set to true to enable selection of multiple rows with check boxes. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.ToolBarContent">
            <summary>
            Optional. Add any kind of toolbar to this render fragment.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Loading">
            <summary>
            Show a loading animation, if true.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.LoadingProgressColor">
            <summary>
            The color of the loading progress if used. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.HeaderContent">
            <summary>
            Add MudTh cells here to define the table header. If <see cref="P:MudBlazor.MudTableBase.CustomHeader"/> is set, add one or more MudTHeadRow instead.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.CustomHeader">
            <summary>
            Specify if the header has multiple rows. In that case, you need to provide the MudTHeadRow tags.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.HeaderClass">
            <summary>
            Add a class to the thead tag
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.FooterContent">
            <summary>
            Add MudTd cells here to define the table footer. If<see cref="P:MudBlazor.MudTableBase.CustomFooter"/> is set, add one or more MudTFootRow instead.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.CustomFooter">
            <summary>
            Specify if the footer has multiple rows. In that case, you need to provide the MudTFootRow tags.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.FooterClass">
            <summary>
            Add a class to the tfoot tag
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.ColGroup">
            <summary>
            Specifies a group of one or more columns in a table for formatting.
            Ex:
            table
                colgroup
                   col span="2" style="background-color:red"
                   col style="background-color:yellow"
                 colgroup
                 header
                 body
            table
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.PagerContent">
            <summary>
            Add MudTablePager here to enable breaking the rows in to multiple pages.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.ReadOnly">
            <summary>
            Locks Inline Edit mode, if true.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.OnCommitEditClick">
            <summary>
            Button commit edit click event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.OnCancelEditClick">
            <summary>
            Button cancel edit click event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.OnPreviewEditClick">
            <summary>
            Event is called before the item is modified in inline editing.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.CommitEditCommand">
            <summary>
            Command executed when the user clicks on the CommitEdit Button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.CommitEditCommandParameter">
            <summary>
            Command parameter for the CommitEdit Button. By default, will be the row level item model, if you won't set anything else.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.CommitEditTooltip">
            <summary>
            Tooltip for the CommitEdit Button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.CancelEditTooltip">
            <summary>
            Tooltip for the CancelEdit Button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.CommitEditIcon">
            <summary>
            Sets the Icon of the CommitEdit Button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.CancelEditIcon">
            <summary>
            Sets the Icon of the CancelEdit Button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.CanCancelEdit">
            <summary>
            Define if Cancel button is present or not for inline editing.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.RowEditPreview">
            <summary>
            The method is called before the item is modified in inline editing.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.RowEditCommit">
            <summary>
            The method is called when the edition of the item has been committed in inline editing.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.RowEditCancel">
            <summary>
            The method is called when the edition of the item has been canceled in inline editing.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.TotalItems">
            <summary>
            Number of items. Used only with ServerData="true"
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.RowClass">
            <summary>
            CSS class for the table rows. Note, many CSS settings are overridden by MudTd though
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.RowStyle">
            <summary>
            CSS styles for the table rows. Note, many CSS settings are overridden by MudTd though
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Virtualize">
            <summary>
            If true, the results are displayed in a Virtualize component, allowing a boost in rendering speed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.RightAlignSmall">
            <summary>
            Alignment of the table cell text when breakpoint is smaller than <see cref="P:MudBlazor.MudTableBase.Breakpoint" />
            </summary>
        </member>
        <member name="M:MudBlazor.MudTableBase.NavigateTo(System.Int32)">
            <summary>
            Navigate to page with specified index.
            </summary>
            <param name="pageIndex"> The index of the page number.</param>
        </member>
        <member name="P:MudBlazor.MudTableGroupRow`1.GroupDefinition">
            <summary>
            The group definition for this grouping level. It's recursive.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableGroupRow`1.Items">
            <summary>
            Inner Items List for the Group
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableGroupRow`1.HeaderTemplate">
            <summary>
            Defines Group Header Data Template
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableGroupRow`1.FooterTemplate">
            <summary>
            Defines Group Header Data Template
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableGroupRow`1.IsCheckable">
            <summary>
            Add a multi-select checkbox that will select/unselect every item in the table
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableGroupRow`1.ExpandIcon">
            <summary>
            Custom expand icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableGroupRow`1.CollapseIcon">
            <summary>
            Custom collapse icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableGroupRow`1.OnRowClick">
            <summary>
            On click event
            </summary>
        </member>
        <member name="P:MudBlazor.MudTablePager.HideRowsPerPage">
            <summary>
            Set true to hide the part of the pager which allows to change the page size.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTablePager.DisableRowsPerPage">
            <summary>
            Set true to hide the part of the pager which allows to change the page size.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTablePager.HidePageNumber">
            <summary>
            Set true to hide the number of pages.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTablePager.HidePagination">
            <summary>
            Set true to hide the pagination.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTablePager.HorizontalAlignment">
            <summary>
            Set the horizontal alignment position.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTablePager.PageSizeOptions">
            <summary>
            Define a list of available page size options for the user to choose from
            </summary>
        </member>
        <member name="P:MudBlazor.MudTablePager.InfoFormat">
            <summary>
            Format string for the display of the current page, which you can localize to your language. Available variables are:
            {first_item}, {last_item} and {all_items} which will replaced with the indices of the page's first and last item, as well as the total number of items.
            Default: "{first_item}-{last_item} of {all_items}" which is transformed into "0-25 of 77". 
            </summary>
        </member>
        <member name="P:MudBlazor.MudTablePager.RowsPerPageString">
            <summary>
            The localizable "Rows per page:" text.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTablePager.FirstIcon">
            <summary>
            Custom first icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTablePager.BeforeIcon">
            <summary>
            Custom before icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTablePager.NextIcon">
            <summary>
            Custom next icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTablePager.LastIcon">
            <summary>
            Custom last icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableSortLabel`1.Enabled">
            <summary>
            Enable the sorting. Set to true by default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableSortLabel`1.SortIcon">
            <summary>
            The Icon used to display sortdirection.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableSortLabel`1.AppendIcon">
            <summary>
            If true the icon will be placed before the label text.
            </summary>
        </member>
        <member name="M:MudBlazor.MudTableSortLabel`1.SetSortDirection(MudBlazor.SortDirection)">
            <summary>
            Set sort direction but don't update Table sort order. This should only be called by Table
            </summary>
        </member>
        <member name="P:MudBlazor.MudTd.HideSmall">
            <summary>
            Hide cell when breakpoint is smaller than the defined value in table.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTFootRow.IsCheckable">
            <summary>
            Add a multi-select checkbox that will select/unselect every item in the table
            </summary>
        </member>
        <member name="P:MudBlazor.MudTFootRow.IgnoreCheckbox">
            <summary>
            Specify behavior in case the table is multi-select mode. If set to <code>true</code>, it won't render an additional empty column.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTFootRow.IgnoreEditable">
            <summary>
            Specify behavior in case the table is editable. If set to <code>true</code>, it won't render an additional empty column.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTFootRow.OnRowClick">
            <summary>
            On click event
            </summary>
        </member>
        <member name="P:MudBlazor.MudTHeadRow.IsCheckable">
            <summary>
            Add a multi-select checkbox that will select/unselect every item in the table
            </summary>
        </member>
        <member name="P:MudBlazor.MudTHeadRow.IgnoreCheckbox">
            <summary>
            Specify behavior in case the table is multi-select mode. If set to <code>true</code>, it won't render an additional empty column.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTHeadRow.IgnoreEditable">
            <summary>
            Specify behavior in case the table is editable. If set to <code>true</code>, it won't render an additional empty column.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTHeadRow.OnRowClick">
            <summary>
            On click event
            </summary>
        </member>
        <member name="P:MudBlazor.TableGroupDefinition`1.GroupName">
            <summary>
            Gets or Sets the Group Name. It's useful for use on Header, for example.
            </summary>
        </member>
        <member name="P:MudBlazor.TableGroupDefinition`1.Selector">
            <summary>
            The selector func to be used on .GroupBy() with LINQ.
            </summary>
        </member>
        <member name="P:MudBlazor.TableGroupDefinition`1.Indentation">
            <summary>
            Gets or Sets if First Column cell must have Indentation.
            It must be set on First grouping level and works recursively.
            </summary>
        </member>
        <member name="P:MudBlazor.TableGroupDefinition`1.Expandable">
            <summary>
            Gets or Sets is group header can Expand and Collapse its children.
            </summary>
        </member>
        <member name="P:MudBlazor.TableGroupDefinition`1.IsInitiallyExpanded">
            <summary>
            Gets or Sets if expandable group header is collapsed or expanded on initialization.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicTabs.AddTabIcon">
            <summary>
            The icon used for the add button
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicTabs.CloseTabIcon">
            <summary>
            the icon used of the close button
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicTabs.AddTab">
            <summary>
            The callback, when the add button has been clicked
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicTabs.CloseTab">
            <summary>
            The callback, when the a close button has been clicked
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicTabs.AddIconClass">
            <summary>
            Classes that are applied to the icon button of the add button
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicTabs.AddIconStyle">
            <summary>
            Styles that are applied to the icon button of the add button
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicTabs.CloseIconClass">
            <summary>
            Classes that are applied to the icon button of the close button
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicTabs.CloseIconStyle">
            <summary>
            Styles that are applied to the icon button of the close button
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicTabs.AddIconToolTip">
            <summary>
            Tooltip that shown when a user hovers of the add button. Empty or null, if no tooltip should be visible
            </summary>
        </member>
        <member name="P:MudBlazor.MudDynamicTabs.CloseIconToolTip">
            <summary>
            Tooltip that shown when a user hovers of the close button. Empty or null, if no tooltip should be visible
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.KeepPanelsAlive">
            <summary>
            If true, render all tabs and hide (display:none) every non-active.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.Rounded">
            <summary>
            If true, sets the border-radius to theme default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.Border">
            <summary>
            If true, sets a border between the content and the toolbar depending on the position.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.Outlined">
            <summary>
            If true, toolbar will be outlined.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.Centered">
            <summary>
            If true, centers the tabitems.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.HideSlider">
            <summary>
            Hides the active tab slider.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.PrevIcon">
            <summary>
            Icon to use for left pagination.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.NextIcon">
            <summary>
            Icon to use for right pagination.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.AlwaysShowScrollButtons">
            <summary>
            If true, always display the scroll buttons even if the tabs are smaller than the required with, buttons will be disabled if there is nothing to scroll.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.MaxHeight">
            <summary>
            Sets the maxheight the component can have.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.Position">
            <summary>
            Sets the position of the tabs itself.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.SliderColor">
            <summary>
            The color of the tab slider. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.IconColor">
            <summary>
            The color of the icon. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.ScrollIconColor">
            <summary>
            The color of the next/prev icons. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow, applies around the whole component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.ApplyEffectsToContainer">
            <summary>
            If true, will apply elevation, rounded, outlined effects to the whole tab component instead of just toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.DisableSliderAnimation">
            <summary>
            If true, disables slider animation
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.PrePanelContent">
            <summary>
            This fragment is placed between toolbar and panels. 
            It can be used to display additional content like an address line in a browser.
            The active tab will be the content of this RenderFragement
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.TabPanelClass">
            <summary>
            Custom class/classes for TabPanel
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.PanelClass">
            <summary>
            Custom class/classes for Selected Content Panel
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.ActivePanelIndex">
            <summary>
            The current active panel index. Also with Bidirectional Binding
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.ActivePanelIndexChanged">
            <summary>
            Fired when ActivePanelIndex changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.Panels">
            <summary>
            A readonly list of the current panels. Panels should be added or removed through the RenderTree use this collection to get informations about the current panels
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.Header">
            <summary>
            A render fragment that is added before or after (based on the value of HeaderPosition) the tabs inside the header panel of the tab control
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.HeaderPosition">
            <summary>
            Additional content specified by Header is placed either before the tabs, after or not at all
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.TabPanelHeader">
            <summary>
            A render fragment that is added before or after (based on the value of HeaderPosition) inside each tab panel
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.TabPanelHeaderPosition">
            <summary>
            Additional content specified by Header is placed either before the tabs, after or not at all
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabs.InternalClassName">
            <summary>
            Can be used in derived class to add a class to the main container. If not overwritten return an empty string
            </summary>
        </member>
        <member name="M:MudBlazor.MudTabs.GetVisiblePanels">
            <summary>
            Calculates the amount of panels that are completely visible inside the toolbar content area. Panels that are just partially visible are not considered here!
            </summary>
            <returns>The amount of panels visible inside the toolbar area. CAUTION: Might return 0!</returns>
        </member>
        <member name="F:MudBlazor.TabHeaderPosition.After">
            <summary>
            Additional content is placed after the the first tab
            </summary>
        </member>
        <member name="F:MudBlazor.TabHeaderPosition.Before">
            <summary>
            Additional content is placed before the first tab
            </summary>
        </member>
        <member name="F:MudBlazor.TabHeaderPosition.None">
            <summary>
            No additional content is rendered
            </summary>
        </member>
        <member name="P:MudBlazor.MudTextField`1.InputType">
            <summary>
            Type of the input element. It should be a valid HTML5 input type.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTextField`1.Clearable">
            <summary>
            Show clear button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTextField`1.OnClearButtonClick">
            <summary>
            Button click event for clear button. Called after text and value has been cleared.
            </summary>
        </member>
        <member name="M:MudBlazor.MudTextField`1.Clear">
            <summary>
            Clear the text field, set Value to default(T) and Text to null
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.MudTextField`1.SetText(System.String)">
            <summary>
            Sets the input text from outside programmatically
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:MudBlazor.MudTextField`1.Mask">
            <summary>
            Provide a masking object. Built-in masks are PatternMask, MultiMask, RegexMask and BlockMask
            Note: when Mask is set, TextField will ignore some properties such as Lines, Pattern or HideSpinButtons, OnKeyDown and OnKeyUp, etc.
            </summary>
        </member>
        <member name="P:MudBlazor.BaseMudThemeProvider.Theme">
            <summary>
            The theme used by the application.
            </summary>
        </member>
        <member name="P:MudBlazor.BaseMudThemeProvider.DefaultScrollbar">
            <summary>
             If true, will not apply MudBlazor styled scrollbar and use browser default. 
            </summary>
        </member>
        <member name="M:MudBlazor.BaseMudThemeProvider.GetSystemPreference">
            <summary>
            Returns the dark mode preference of the user. True if dark mode is preferred.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MudBlazor.BaseMudThemeProvider.IsDarkMode">
            <summary>
            The active palette of the theme.
            </summary>
        </member>
        <member name="P:MudBlazor.BaseMudThemeProvider.IsDarkModeChanged">
            <summary>
            Invoked when the dark mode changes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimeline.TimelineOrientation">
            <summary>
            Sets the orientation of the timeline and its timeline items.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimeline.TimelinePosition">
            <summary>
            The position the timeline itself and how the timeline items should be displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimeline.TimelineAlign">
            <summary>
            Aligns the dot and any item modifiers is changed, in default mode they are centered to the item.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimeline.Reverse">
            <summary>
            Reverse the order of TimelineItems when TimelinePosition is set to Alternate.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimeline.DisableModifiers">
            <summary>
            If true, disables all TimelineItem modifiers, like adding a caret to a MudCard.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimelineItem.Icon">
            <summary>
            Dot Icon
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimelineItem.Variant">
            <summary>
            Variant of the dot.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimelineItem.Color">
            <summary>
            Color of the dot.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimelineItem.Size">
            <summary>
            Size of the dot.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimelineItem.Elevation">
            <summary>
            Elevation of the dot. The higher the number, the heavier the drop-shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimelineItem.TimelineAlign">
            <summary>
            Overrides Timeline Parents default sorting method in Default and Reverse mode.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimelineItem.HideDot">
            <summary>
            If true, dot will not be displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimelineItem.ItemOpposite">
            <summary>
            If used renders child content of the ItemOpposite.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimelineItem.ItemContent">
            <summary>
            If used renders child content of the ItemContent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimelineItem.ItemDot">
            <summary>
            If used renders child content of the ItemDot.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimelineItem.ChildContent">
            <summary>
            Optional child content if no other RenderFragments is used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimePicker.OpenTo">
            <summary>
            First view to show in the MudDatePicker.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimePicker.TimeEditMode">
            <summary>
            Choose the edition mode. By default, you can edit hours and minutes.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimePicker.ClosingDelay">
            <summary>
            Milliseconds to wait before closing the picker. This helps the user see that the time was selected before the popover disappears.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimePicker.AutoClose">
            <summary>
            If AutoClose is set to true and PickerActions are defined, the hour and the minutes can be defined without any action.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimePicker.AmPm">
            <summary>
            If true, sets 12 hour selection clock.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimePicker.TimeFormat">
            <summary>
            String Format for selected time view
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimePicker.Time">
            <summary>
            The currently selected time (two-way bindable). If null, then nothing was selected.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTimePicker.TimeChanged">
            <summary>
            Fired when the date changes.
            </summary>
        </member>
        <member name="M:MudBlazor.MudTimePicker.OnMouseDown(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Sets Mouse Down bool to true if mouse is inside the clock mask.
            </summary>
        </member>
        <member name="M:MudBlazor.MudTimePicker.OnMouseUp(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Sets Mouse Down bool to false if mouse is inside the clock mask.
            </summary>
        </member>
        <member name="M:MudBlazor.MudTimePicker.OnMouseOverHour(System.Int32)">
            <summary>
            If MouseDown is true enables "dragging" effect on the clock pin/stick.
            </summary>
        </member>
        <member name="M:MudBlazor.MudTimePicker.OnMouseClickHour(System.Int32)">
            <summary>
            On click for the hour "sticks", sets the hour.
            </summary>
        </member>
        <member name="M:MudBlazor.MudTimePicker.OnMouseOverMinute(System.Int32)">
            <summary>
            On mouse over for the minutes "sticks", sets the minute.
            </summary>
        </member>
        <member name="M:MudBlazor.MudTimePicker.OnMouseClickMinute(System.Int32)">
            <summary>
            On click for the minute "sticks", sets the minute.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.Text">
            <summary>
            Sets the text to be displayed inside the tooltip.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.Arrow">
            <summary>
            If true, a arrow will be displayed pointing towards the content from the tooltip.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.Duration">
            <summary>
            Sets the length of time that the opening transition takes to complete.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.Delay">
            <summary>
            Sets the amount of time to wait from opening the popover before beginning to perform the transition. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.Delayed">
            <summary>
            Changes the default transition delay in seconds.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.Placement">
            <summary>
            Tooltip placement.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.TooltipContent">
            <summary>
            Tooltip content. May contain any valid html
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.Inline">
            <summary>
            Determines if this component should be inline with it's surrounding (default) or if it should behave like a block element.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.RootStyle">
            <summary>
            Styles applied directly to root component of the tooltip
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.RootClass">
            Classes applied directly to root component of the tooltip
        </member>
        <member name="P:MudBlazor.MudTooltip.IsVisible">
            <summary>
            The visible state of the Tooltip.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTooltip.IsVisibleChanged">
            <summary>
            An event triggered when the state of IsVisible has changed
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.Color">
            <summary>
            The color of the selected treeviewitem.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.CheckBoxColor">
            <summary>
            Check box color if multiselection is used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.MultiSelection">
            <summary>
            if true, multiple values can be selected via checkboxes which are automatically shown in the tree view.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.CanSelect">
            <summary>
            if true, multiple values can be selected via checkboxes which are automatically shown in the tree view.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.ExpandOnClick">
            <summary>
            If true, clicking anywhere on the item will expand it, if it has childs.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.Hover">
            <summary>
            Hover effect for item's on mouse-over.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.CanHover">
            <summary>
            Hover effect for item's on mouse-over.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.Dense">
            <summary>
            If true, compact vertical padding will be applied to all treeview items.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.Height">
            <summary>
            Setting a height will allow to scroll the treeview. If not set, it will try to grow in height. 
            You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.MaxHeight">
            <summary>
            Setting a maximum height will allow to scroll the treeview. If not set, it will try to grow in height. 
            You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.Width">
            <summary>
            Setting a width the treeview. You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.Disabled">
            <summary>
            If true, treeview will be disabled and all its childitems.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.SelectedValueChanged">
            <summary>
            Called whenever the selected value changed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.SelectedValuesChanged">
            <summary>
            Called whenever the selectedvalues changed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeView`1.ItemTemplate">
            <summary>
            ItemTemplate for rendering children.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.CheckedIcon">
            <summary>
            Custom checked icon, leave null for default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.UncheckedIcon">
            <summary>
            Custom unchecked icon, leave null for default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.Value">
            <summary>
            Value of the treeviewitem. Acts as the displayed text if no text is set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.Text">
            <summary>
            The text to display
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.TextTypo">
            <summary>
            Tyopography for the text.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.TextClass">
            <summary>
            User class names for the text, separated by space.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.EndText">
            <summary>
            The text at the end of the item.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.EndTextTypo">
            <summary>
            Tyopography for the endtext.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.EndTextClass">
            <summary>
            User class names for the endtext, separated by space.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.Disabled">
            <summary>
            If true, treeviewitem will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.ChildContent">
            <summary>
            Child content of component used to create sub levels.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.Content">
            <summary>
            Content of the item, if used completly replaced the default rendering.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.Command">
            <summary>
            Command executed when the user clicks on the CommitEdit Button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.Expanded">
            <summary>
            Expand or collapse treeview item when it has children. Two-way bindable. Note: if you directly set this to
            true or false (instead of using two-way binding) it will force the item's expansion state.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.ExpandedChanged">
            <summary>
            Called whenever expanded changed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.Icon">
            <summary>
            Icon placed before the text if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.IconColor">
            <summary>
            The color of the icon. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.EndIcon">
            <summary>
            Icon placed after the text if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.EndIconColor">
            <summary>
            The color of the icon. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.ExpandedIcon">
            <summary>
            The expand/collapse icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.ExpandedIconColor">
            <summary>
            The color of the expand/collapse button. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.LoadingIcon">
            <summary>
            The loading icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.LoadingIconColor">
            <summary>
            The color of the loading. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.ActivatedChanged">
            <summary>
            Called whenever the activated value changed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.SelectedChanged">
            <summary>
            Called whenever the selected value changed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItem`1.OnClick">
            <summary>
            Tree item click event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudText.Typo">
            <summary>
            Applies the theme typography styles.
            </summary>
        </member>
        <member name="P:MudBlazor.MudText.Align">
            <summary>
            Set the text-align on the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudText.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudText.GutterBottom">
            <summary>
            If true, the text will have a bottom margin.
            </summary>
        </member>
        <member name="P:MudBlazor.MudText.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudText.Inline">
            <summary>
            If true, Sets display inline
            </summary>
        </member>
        <member name="P:MudBlazor.MudVirtualize`1.IsEnabled">
            <summary>
            Set false to turn off virtualization
            </summary>
        </member>
        <member name="P:MudBlazor.MudVirtualize`1.ChildContent">
            <summary>
            Gets or sets the item template for the list.
            </summary>
        </member>
        <member name="P:MudBlazor.MudVirtualize`1.Items">
            <summary>
            Gets or sets the fixed item source.
            </summary>
        </member>
        <member name="T:MudBlazor.InputMode">
            <summary>
            The inputmode global attribute is an enumerated attribute that hints at the type of data that might be entered by the user while editing the element or its contents.
            Not supported by safari. Use Pattern to achieve special mobile keyboards in safari.
            https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
            </summary>
        </member>
        <member name="M:MudBlazor.ElementReferenceExtensions.MudGetClientRectFromParentAsync(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Gets the client rect of the element 
            </summary>
        </member>
        <member name="M:MudBlazor.ElementReferenceExtensions.MudGetClientRectFromFirstChildAsync(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Gets the client rect of the first child of the element.
            Useful when you want to know the dimensions of a render fragment and for that you wrap it into a div
            </summary>
        </member>
        <member name="M:MudBlazor.ElementReferenceExtensions.MudHasFixedAncestorsAsync(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Returns true if the element has an ancestor with style position == "fixed"
            </summary>
            <param name="elementReference"></param>
        </member>
        <member name="M:MudBlazor.TaskExtensions.AndForget(System.Threading.Tasks.Task)">
            <summary>
            Task will be awaited and exceptions will be managed by the Blazor framework.
            </summary>
        </member>
        <member name="M:MudBlazor.TaskExtensions.AndForget(System.Threading.Tasks.Task,MudBlazor.TaskOption)">
            <summary>
            Task will be awaited and exceptions will be logged to console (TaskOption.Safe) or managed by the Blazor framework (TaskOption.None).
            </summary>
        </member>
        <member name="M:MudBlazor.TaskExtensions.AndForget(System.Threading.Tasks.ValueTask)">
            <summary>
            ValueTask will be awaited and exceptions will be managed by the Blazor framework.
            </summary>
        </member>
        <member name="M:MudBlazor.TaskExtensions.AndForget(System.Threading.Tasks.ValueTask,MudBlazor.TaskOption)">
            <summary>
            ValueTask will be awaited and exceptions will be logged to console (TaskOption.Safe) or managed by the Blazor framework (TaskOption.None).
            </summary>
        </member>
        <member name="T:MudBlazor.Utilities.ColorTransformation">
            <summary>
            Static methods for transforming argb spaces and argb values.
            </summary>
        </member>
        <member name="M:MudBlazor.Utilities.ColorTransformation.RgBtoHsl(System.Drawing.Color)">
            <summary>
            Converts RGB to HSL. Alpha is ignored.
            Output is: { H: [0, 360], S: [0, 1], L: [0, 1] }.
            </summary>
            <param name="color">The color to convert.</param>
        </member>
        <member name="M:MudBlazor.Utilities.ColorTransformation.HsLtoRgb(MudBlazor.Utilities.ColorTransformation.HSLColor,System.Int32)">
            <summary>
            Converts HSL to RGB, with a specified output Alpha.
            Arguments are limited to the defined range:
            does not raise exceptions.
            </summary>
            <param name="hsl">HSL comprising of - </param>
            hsl.H (Hue), must be in [0, 360] - 
            hsl.S (Saturation), must be in [0, 1] - 
            hsl.L (Luminance), must be in [0, 1].
            <param name="a">Output Alpha, must be in [0, 255].</param>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.Default(System.String)">
            <summary>
            Creates a CssBuilder used to define conditional CSS classes used in a component.
            Call Build() to return the completed CSS Classes as a string. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.Empty">
            <summary>
            Creates an Empty CssBuilder used to define conditional CSS classes used in a component.
            Call Build() to return the completed CSS Classes as a string. 
            </summary>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.#ctor(System.String)">
            <summary>
            Creates a CssBuilder used to define conditional CSS classes used in a component.
            Call Build() to return the completed CSS Classes as a string. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddValue(System.String)">
            <summary>
            Adds a raw string to the builder that will be concatenated with the next class or value added to the builder.
            </summary>
            <param name="value"></param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(System.String)">
            <summary>
            Adds a CSS Class to the builder with space separator.
            </summary>
            <param name="value">CSS Class to add</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(System.String,System.Boolean)">
            <summary>
            Adds a conditional CSS Class to the builder with space separator.
            </summary>
            <param name="value">CSS Class to conditionally add.</param>
            <param name="when">Condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a conditional CSS Class to the builder with space separator.
            </summary>
            <param name="value">CSS Class to conditionally add.</param>
            <param name="when">Nullable condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(System.String,System.Func{System.Boolean})">
            <summary>
            Adds a conditional CSS Class to the builder with space separator.
            </summary>
            <param name="value">CSS Class to conditionally add.</param>
            <param name="when">Condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(System.Func{System.String},System.Boolean)">
            <summary>
            Adds a conditional CSS Class to the builder with space separator.
            </summary>
            <param name="value">Function that returns a CSS Class to conditionally add.</param>
            <param name="when">Condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(System.Func{System.String},System.Func{System.Boolean})">
            <summary>
            Adds a conditional CSS Class to the builder with space separator.
            </summary>
            <param name="value">Function that returns a CSS Class to conditionally add.</param>
            <param name="when">Condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(MudBlazor.Utilities.CssBuilder,System.Boolean)">
            <summary>
            Adds a conditional nested CssBuilder to the builder with space separator.
            </summary>
            <param name="builder">CSS Class to conditionally add.</param>
            <param name="when">Condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(MudBlazor.Utilities.CssBuilder,System.Func{System.Boolean})">
            <summary>
            Adds a conditional CSS Class to the builder with space separator.
            </summary>
            <param name="builder">CSS Class to conditionally add.</param>
            <param name="when">Condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClassFromAttributes(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Adds a conditional CSS Class when it exists in a dictionary to the builder with space separator.
            Null safe operation.
            </summary>
            <param name="additionalAttributes">Additional Attribute splat parameters</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.Build">
            <summary>
            Finalize the completed CSS Classes as a string.
            </summary>
            <returns>string</returns>
        </member>
        <member name="F:MudBlazor.Utilities.MudColorOutputFormats.Hex">
            <summary>
            Output will be starting with a # and include r,g and b but no alpha values. Example #ab2a3d
            </summary>
        </member>
        <member name="F:MudBlazor.Utilities.MudColorOutputFormats.HexA">
            <summary>
            Output will be starting with a # and include r,g and b and alpha values. Example #ab2a3dff
            </summary>
        </member>
        <member name="F:MudBlazor.Utilities.MudColorOutputFormats.RGB">
            <summary>
            Will output css like output for value. Example rgb(12,15,40)
            </summary>
        </member>
        <member name="F:MudBlazor.Utilities.MudColorOutputFormats.RGBA">
            <summary>
            Will output css like output for value with alpha. Example rgba(12,15,40,0.42)
            </summary>
        </member>
        <member name="F:MudBlazor.Utilities.MudColorOutputFormats.ColorElements">
            <summary>
            Will output the color elements without any decorator and without alpha. Example 12,15,26
            </summary>
        </member>
        <member name="M:MudBlazor.Utilities.MudColor.#ctor(System.Byte,System.Byte,System.Byte,MudBlazor.Utilities.MudColor)">
            <summary>
            initilize a new MudColor with new RGB values but keeps the hue value from the color
            </summary>
            <param name="r">R</param>
            <param name="g">G</param>
            <param name="b">B</param>
            <param name="color">Existing color to copy hue value from </param>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.Default(System.String,System.String)">
            <summary>
            Creates a StyleBuilder used to define conditional in-line style used in a component. Call Build() to return the completed style as a string.
            </summary>
            <param name="prop"></param>
            <param name="value"></param>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.Default(System.String)">
            <summary>
            Creates a StyleBuilder used to define conditional in-line style used in a component. Call Build() to return the completed style as a string.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.Empty">
            <summary>
            Creates a StyleBuilder used to define conditional in-line style used in a component. Call Build() to return the completed style as a string.
            </summary>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.#ctor(System.String,System.String)">
            <summary>
            Creates a StyleBuilder used to define conditional in-line style used in a component. Call Build() to return the completed style as a string.
            </summary>
            <param name="prop"></param>
            <param name="value"></param>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String)">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddRaw(System.String)">
            <summary>
            Adds a raw string to the builder that will be concatenated with the next style or value added to the builder.
            </summary>
            <param name="style"></param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String,System.String)">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name="prop"></param>
            <param name="value">Style to add</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String,System.String,System.Boolean)">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name="prop"></param>
            <param name="value">Style to conditionally add.</param>
            <param name="when">Condition in which the style is added.</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String,System.Func{System.String},System.Boolean)">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name="prop"></param>
            <param name="value">Style to conditionally add.</param>
            <param name="when">Condition in which the style is added.</param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String,System.String,System.Func{System.Boolean})">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name="prop"></param>
            <param name="value">Style to conditionally add.</param>
            <param name="when">Condition in which the style is added.</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String,System.Func{System.String},System.Func{System.Boolean})">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name="prop"></param>
            <param name="value">Style to conditionally add.</param>
            <param name="when">Condition in which the style is added.</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(MudBlazor.Utilities.StyleBuilder)">
            <summary>
            Adds a conditional nested StyleBuilder to the builder with separator and closing semicolon.
            </summary>
            <param name="builder">Style Builder to conditionally add.</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(MudBlazor.Utilities.StyleBuilder,System.Boolean)">
            <summary>
            Adds a conditional nested StyleBuilder to the builder with separator and closing semicolon.
            </summary>
            <param name="builder">Style Builder to conditionally add.</param>
            <param name="when">Condition in which the style is added.</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(MudBlazor.Utilities.StyleBuilder,System.Func{System.Boolean})">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name="builder">Style Builder to conditionally add.</param>
            <param name="when">Condition in which the styles are added.</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String,System.Action{MudBlazor.Utilities.ValueBuilder},System.Boolean)">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            A ValueBuilder action defines a complex set of values for the property.
            </summary>
            <param name="prop"></param>
            <param name="builder"></param>
            <param name="when"></param>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyleFromAttributes(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Adds a conditional in-line style when it exists in a dictionary to the builder with separator.
            Null safe operation.
            </summary>
            <param name="additionalAttributes">Additional Attribute splat parameters</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.Build">
            <summary>
            Finalize the completed Style as a string.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:MudBlazor.Utilities.ValueBuilder.AddValue(System.String,System.Boolean)">
            <summary>
            Adds a space separated conditional value to a property.
            </summary>
            <param name="value"></param>
            <param name="when"></param>
            <returns></returns>
        </member>
        <member name="P:MudBlazor.Interop.BoundingClientRect.WindowHeight">
            <summary>
            height of the viewport
            </summary>
        </member>
        <member name="P:MudBlazor.Interop.BoundingClientRect.WindowWidth">
            <summary>
            width of the viewport
            </summary>
        </member>
        <member name="P:MudBlazor.Interop.BoundingClientRect.ScrollX">
            <summary>
            the horizontal offset since the left of the page
            </summary>
        </member>
        <member name="P:MudBlazor.Interop.BoundingClientRect.ScrollY">
            <summary>
            the vertical offset since the top of the page
            </summary>
        </member>
        <member name="T:MudBlazor.EventHandlers">
            <summary>
            see https://github.com/dotnet/aspnetcore/issues/13104
            </summary>
            
        </member>
        <member name="T:MudBlazor.BrowserWindowSizeProvider">
            <summary>
            This provider calls the JS method resizeListener.getBrowserWindowSize to get the browser window size
            </summary>
        </member>
        <member name="M:MudBlazor.BrowserWindowSizeProvider.#ctor(Microsoft.JSInterop.IJSRuntime)">
            <summary>
            
            </summary>
            <param name="jsRuntime"></param>
        </member>
        <member name="M:MudBlazor.BrowserWindowSizeProvider.GetBrowserWindowSize">
            <summary>
            Get the current BrowserWindowSize, this includes the Height and Width of the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.IEventListener.Subscribe``1(System.String,System.String,System.String,System.Int32,System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
            Listing to a javascript event
            </summary>
            <typeparam name="T">The type of the event args for instance MouseEventArgs for mousemove</typeparam>
            <param name="eventName">Name of the DOM event without "on"</param>
            <param name="elementId">The value of the id field of the DOM element</param>
            <param name="projectionName">The name of a JS function (relative to window) that used to project the event before it is send back to .NET. Can be null, if no projection is needed </param>
            <param name="throotleInterval">The delay between the last time the event occurred and the callback is fired. Set to zero, if no delay is requested</param>
            <param name="callback">The method that is invoked, if the DOM element is fired. Object will be of type T</param>
            <returns>A unique identifier for the event subscription. Should be used to cancel the subscription</returns>
        </member>
        <member name="M:MudBlazor.IEventListener.Unsubscribe(System.Guid)">
            <summary>
            Cancel (unsubscribe) the listening to a DOM event, previous connected by Subscribe
            </summary>
            <param name="key">The unique event identifier</param>
            <returns>true for if the event listener was detached, false if not</returns>
        </member>
        <member name="T:MudBlazor.Services.JsEvent">
            <summary>
            Subscribe JS events of any element by html id
            </summary>
        </member>
        <member name="M:MudBlazor.Services.JsEvent.Connect(System.String,MudBlazor.Services.JsEventOptions)">
            <summary>
            Connect to the ancestor element of the element(s) that should be observed
            </summary>
            <param name="elementId">Ancestor html element id</param>
            <param name="options">Define here the descendant(s) by setting TargetClass and the keystrokes to be monitored</param>
        </member>
        <member name="M:MudBlazor.Services.JsEvent.Disconnect">
            <summary>
            Disconnect from the previously connected ancestor and its descendants
            </summary>
        </member>
        <member name="E:MudBlazor.Services.JsEvent.CaretPositionChanged">
            <summary>
            Subscribe this event to get notified about caret changes in an input on click and on keyup
            </summary>
        </member>
        <member name="M:MudBlazor.Services.JsEvent.OnCaretPositionChanged(System.Int32)">
            <summary>
            To be invoked only by JS
            </summary>
        </member>
        <member name="E:MudBlazor.Services.JsEvent.Paste">
            <summary>
            Subscribe this event to get notified about paste actions
            </summary>
        </member>
        <member name="M:MudBlazor.Services.JsEvent.OnPaste(System.String)">
            <summary>
            To be invoked only by JS
            </summary>
        </member>
        <member name="E:MudBlazor.Services.JsEvent.Select">
            <summary>
            Subscribe this event to get notified about paste actions
            </summary>
        </member>
        <member name="M:MudBlazor.Services.JsEvent.OnSelect(System.Int32,System.Int32)">
            <summary>
            To be invoked only by JS
            </summary>
        </member>
        <member name="P:MudBlazor.Services.JsEventOptions.TargetClass">
             <summary>
             Class of the target node which should be observed for keyboard events
            
             Note: this must be a single class
             </summary>
        </member>
        <member name="P:MudBlazor.Services.JsEventOptions.TagName">
            <summary>
            The tag name of the element to register events with. Must be all uppercase, like "INPUT"
            </summary>
        </member>
        <member name="P:MudBlazor.Services.JsEventOptions.EnableLogging">
            <summary>
            Report resize events in the browser's console.
            </summary>
        </member>
        <member name="T:MudBlazor.Services.KeyInterceptor">
            <summary>
            This transient service binds itself to a parent element to observe the keys of one of its children.
            It can call preventDefault or stopPropagation directly on the JavaScript side for single key strokes / key combinations as per configuration.
            Furthermore, you can precisely subscribe single keystrokes or combinations and only the subscribed ones will be forwarded into .NET
            </summary>
        </member>
        <member name="M:MudBlazor.Services.KeyInterceptor.Connect(System.String,MudBlazor.Services.KeyInterceptorOptions)">
            <summary>
            Connect to the ancestor element of the element(s) that should be observed
            </summary>
            <param name="elementId">Ancestor html element id</param>
            <param name="options">Define here the descendant(s) by setting TargetClass and the keystrokes to be monitored / suppressed</param>
        </member>
        <member name="M:MudBlazor.Services.KeyInterceptor.UpdateKey(MudBlazor.Services.KeyOptions)">
            <summary>
            Update behavior of a registered keyoption
            The keystrike to update has to be monitored previously
            </summary>
            <param name="option">Define KeyOption to update</param>
        </member>
        <member name="M:MudBlazor.Services.KeyInterceptor.Disconnect">
            <summary>
            Disconnect from the previously connected ancestor and its descendants
            </summary>
        </member>
        <member name="P:MudBlazor.Services.KeyInterceptorOptions.TargetClass">
             <summary>
             Class of the target node which should be observed for keyboard events
            
             Note: this must be a single class
             </summary>
        </member>
        <member name="P:MudBlazor.Services.KeyInterceptorOptions.EnableLogging">
            <summary>
            Report resize events in the browser's console.
            </summary>
        </member>
        <member name="P:MudBlazor.Services.KeyInterceptorOptions.Keys">
            <summary>
            Intercept configuration for keys of interest
            </summary>
        </member>
        <member name="T:MudBlazor.Services.KeyOptions">
             <summary>
             Configuration for preventDefault() and stopPropagation() control
            
             For PreventDown, PreventUp, StopDown and StopUp the configuration which key combinations should match
             is a Javascript boolean expression.
            
             Examples:
             For the examples, let's assume the Tab key was pressed.
             Note: for combinations of more than one modifier the following order of modifiers must be followed strictly: shift+ctrl+alt+meta
             
              * Don't prevent key down:
                      PreventDown=null or PreventDown="none"
              * Prevent key down of unmodified keystrokes such as "Tab":
                      PreventDown="key+none"
              * Prevent key down of Tab and Ctrl+Tab
                      PreventDown="key+none|key+ctrl"
              * Prevent key down of just Ctrl+Tab
                      PreventDown="key+ctrl"
              * Prevent key down of Ctrl+Tab and Shift+Tab but not Shift+Ctrl+Tab:
                      PreventDown="key+shift|key+ctrl"
              * Prevent key down of Shift+Ctrl+Tab and Ctrl+Tab but not Shift+Tab:
                      PreventDown="key+shift+ctrl|key+ctrl"
              * Prevent any combination of key and modifiers, but not the unmodified key:
                      PreventDown="key+any"
              * Prevent any combination of key and modifiers, even the unmodified key:
                      PreventDown="any"
             </summary>
        </member>
        <member name="P:MudBlazor.Services.KeyOptions.Key">
             <summary>
             Javascript keyboard event.key
            
             Examples: " " for space, "Tab" for tab, "a" for lowercase A-key.
             Also allowed: JS regex such as "/[a-z]/" or "/a|b/" but NOT "/[a-z]/g" or "/[a-z]/i"
                  regex must be enclosed in two forward slashes!
             </summary>
        </member>
        <member name="P:MudBlazor.Services.KeyOptions.SubscribeDown">
            <summary>
            Subscribe down key and invoke event KeyDown on c# side
            </summary>
        </member>
        <member name="P:MudBlazor.Services.KeyOptions.SubscribeUp">
            <summary>
            Subscribe up key and invoke event KeyUp on c# side
            </summary>
        </member>
        <member name="P:MudBlazor.Services.ResizeObserverOptions.ReportRate">
            <summary>
            Timepsan in milliseconds after the browser detect the last chance and notify the interop service.
            Setting this value too low can cause poor application performance.
            </summary>
        </member>
        <member name="P:MudBlazor.Services.ResizeObserverOptions.EnableLogging">
            <summary>
            Report resize events in the browser's console.
            </summary>
        </member>
        <member name="M:MudBlazor.Services.BreakpointService.#ctor(Microsoft.JSInterop.IJSRuntime,MudBlazor.IBrowserWindowSizeProvider,Microsoft.Extensions.Options.IOptions{MudBlazor.Services.ResizeOptions})">
            <summary>
            
            </summary>
            <param name="jsRuntime"></param>
            <param name="browserWindowSizeProvider"></param>
            <param name="options"></param>
        </member>
        <member name="M:MudBlazor.Services.BreakpointService.RaiseOnResized(MudBlazor.Services.BrowserWindowSize,MudBlazor.Breakpoint,System.Guid)">
            <summary>
            Invoked by jsInterop, use the OnResized event handler to subscribe.
            </summary>
            <param name="browserWindowSize"></param>
            <param name="breakpoint"></param>
            <param name="optionId"></param>
        </member>
        <member name="M:MudBlazor.Services.BreakpointService.MatchMedia(System.String)">
            <summary>
            Determine if the Document matches the provided media query.
            </summary>
            <param name="mediaQuery"></param>
            <returns>Returns true if matched.</returns>
        </member>
        <member name="T:MudBlazor.Services.BreakpointServiceSubscribeResult">
            <summary>
            The result of a subscription to the BreakpointListener
            </summary>
            <param name="SubscriptionId">The subscription id, can be used for cancel the subscription later</param>
            <param name="Breakpoint">The current breakpoint of the window</param>
        </member>
        <member name="M:MudBlazor.Services.BreakpointServiceSubscribeResult.#ctor(System.Guid,MudBlazor.Breakpoint)">
            <summary>
            The result of a subscription to the BreakpointListener
            </summary>
            <param name="SubscriptionId">The subscription id, can be used for cancel the subscription later</param>
            <param name="Breakpoint">The current breakpoint of the window</param>
        </member>
        <member name="M:MudBlazor.Services.IBreakpointService.IsMediaSize(MudBlazor.Breakpoint)">
            <summary>
            Check if the current breakpoint fits within the current window size
            </summary>
            <param name="breakpoint"></param>
            <returns>True if the media size is meet, false otherwise. For instance if the current window size is sm and the breakpoint is SmAndSmaller, this method returns true</returns>
        </member>
        <member name="M:MudBlazor.Services.IBreakpointService.IsMediaSize(MudBlazor.Breakpoint,MudBlazor.Breakpoint)">
            <summary>
            Check if the current breakpoint fits within the reference size
            </summary>
            <param name="breakpoint">The breakpoint to check</param>
            <param name="reference">The reference breakpoint (xs,sm,md,lg,xl)</param>
            <returns>True if the media size is meet, false otherwise. For instance if the reference size is sm and the breakpoint is SmAndSmaller, this method returns true</returns>
        </member>
        <member name="M:MudBlazor.Services.IBreakpointService.GetBreakpoint">
            <summary>
            Get the current breakpoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Services.IBreakpointService.Subscribe(System.Action{MudBlazor.Breakpoint})">
            <summary>
            Subscribe to size changes of the browser window with default options
            </summary>
            <param name="callback">The method (callbacK) that is invoke as soon as the size of the window has changed</param>
            <returns>Returning an object containing the current breakpoint and a subscription id, that should be used for unsubscribe</returns>
        </member>
        <member name="M:MudBlazor.Services.IBreakpointService.Subscribe(System.Action{MudBlazor.Breakpoint},MudBlazor.Services.ResizeOptions)">
            <summary>
            Subscribe to size changes of the browser window using the provided options
            </summary>
            <param name="callback">The method (callbacK) that is invoke as soon as the size of the window has changed</param>
            <param name="options">The options used to subscribe to changes</param>
            <returns>Returning an object containing the current breakpoint and a subscription id, that should be used for unsubscribe</returns>
        </member>
        <member name="M:MudBlazor.Services.IBreakpointService.Unsubscribe(System.Guid)">
            <summary>
            Used for cancel the subscription to the resize event.
            </summary>
            <param name="subscriptionId">The subscription id (return of subscribe) to cancel</param>
            <returns>True if the subscription could be cancel, false otherwise</returns>
        </member>
        <member name="T:MudBlazor.Services.ResizeListenerService">
            <summary>
            This service listens to browser resize events and allows you to react to a changing window size in Blazor
            </summary>
        </member>
        <member name="M:MudBlazor.Services.ResizeListenerService.#ctor(Microsoft.JSInterop.IJSRuntime,MudBlazor.IBrowserWindowSizeProvider,Microsoft.Extensions.Options.IOptions{MudBlazor.Services.ResizeOptions})">
            <summary>
            
            </summary>
            <param name="jsRuntime"></param>
            <param name="browserWindowSizeProvider"></param>
            <param name="options"></param>
        </member>
        <member name="E:MudBlazor.Services.ResizeListenerService.OnResized">
            <summary>
            Subscribe to the browsers resize() event.
            </summary>
        </member>
        <member name="E:MudBlazor.Services.ResizeListenerService.OnBreakpointChanged">
            <summary>
            Subscribe to the browsers resize() event.
            </summary>
        </member>
        <member name="M:MudBlazor.Services.ResizeListenerService.MatchMedia(System.String)">
            <summary>
            Determine if the Document matches the provided media query.
            </summary>
            <param name="mediaQuery"></param>
            <returns>Returns true if matched.</returns>
        </member>
        <member name="M:MudBlazor.Services.ResizeListenerService.GetBrowserWindowSize">
            <summary>
            Get the current BrowserWindowSize, this includes the Height and Width of the document.
            </summary>
        </member>
        <member name="M:MudBlazor.Services.ResizeListenerService.RaiseOnResized(MudBlazor.Services.BrowserWindowSize,MudBlazor.Breakpoint)">
            <summary>
            Invoked by jsInterop, use the OnResized event handler to subscribe.
            </summary>
            <param name="browserWindowSize"></param>
            <param name="breakpoint"></param>
        </member>
        <member name="P:MudBlazor.Services.ResizeOptions.ReportRate">
            <summary>
            Rate in milliseconds that the browsers `resize()` event should report a change.
            Setting this value too low can cause poor application performance.
            </summary>
        </member>
        <member name="P:MudBlazor.Services.ResizeOptions.EnableLogging">
            <summary>
            Report resize events and media queries in the browser's console.
            </summary>
        </member>
        <member name="P:MudBlazor.Services.ResizeOptions.SuppressInitEvent">
            <summary>
            Suppress the first OnResized that is invoked when a new event handler is added.
            </summary>
        </member>
        <member name="P:MudBlazor.Services.ResizeOptions.NotifyOnBreakpointOnly">
            <summary>
            If true, RaiseOnResized is called only when breakpoint has changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Services.ResizeOptions.BreakpointDefinitions">
            <summary>
            Breakpoint definitions.
            </summary>
        </member>
        <member name="T:MudBlazor.Services.ResizeService">
            <summary>
            This service listens to browser resize events and allows you to react to a changing window size in Blazor
            </summary>
        </member>
        <member name="M:MudBlazor.Services.ResizeService.#ctor(Microsoft.JSInterop.IJSRuntime,MudBlazor.IBrowserWindowSizeProvider,Microsoft.Extensions.Options.IOptions{MudBlazor.Services.ResizeOptions})">
            <summary>
            
            </summary>
            <param name="jsRuntime"></param>
            <param name="browserWindowSizeProvider"></param>
            <param name="options"></param>
        </member>
        <member name="M:MudBlazor.Services.ResizeService.GetBrowserWindowSize">
            <summary>
            Get the current BrowserWindowSize, this includes the Height and Width of the document.
            </summary>
        </member>
        <member name="M:MudBlazor.Services.ResizeService.RaiseOnResized(MudBlazor.Services.BrowserWindowSize,MudBlazor.Breakpoint,System.Guid)">
            <summary>
            Invoked by jsInterop, use the OnResized event handler to subscribe.
            </summary>
            <param name="browserWindowSize"></param>
            <param name="_"></param>
            <param name="optionId"></param>
        </member>
        <member name="M:MudBlazor.Services.ResizeService.Subscribe(System.Action{MudBlazor.Services.BrowserWindowSize})">
            <summary>
            Subscribe to size changes of the browser window. Default ResizeOptions will be used
            </summary>
            <param name="callback">The method (callbacK) that is invoke as soon as the size of the window has changed</param>
            <returns>The subscription id. This id is needed for unscribe </returns>
        </member>
        <member name="M:MudBlazor.Services.ResizeService.Subscribe(System.Action{MudBlazor.Services.BrowserWindowSize},MudBlazor.Services.ResizeOptions)">
            <summary>
            Subscribe to size changes of the browser window using the provided options
            </summary>
            <param name="callback">The method (callbacK) that is invoke as soon as the size of the window has changed</param>
            <param name="options"></param>
            <returns>The subscription id. This id is needed for unscribe</returns>
        </member>
        <member name="M:MudBlazor.Services.IResizeService.GetBrowserWindowSize">
            <summary>
            Get the current size of the window
            </summary>
            <returns>A task representing the current browser size</returns>
        </member>
        <member name="M:MudBlazor.Services.IResizeService.Subscribe(System.Action{MudBlazor.Services.BrowserWindowSize})">
            <summary>
            Subscribe to size changes of the browser window. Default ResizeOptions will be used
            </summary>
            <param name="callback">The method (callbacK) that is invoke as soon as the size of the window has changed</param>
            <returns>The subscription id. This id is needed for unscribe </returns>
        </member>
        <member name="M:MudBlazor.Services.IResizeService.Subscribe(System.Action{MudBlazor.Services.BrowserWindowSize},MudBlazor.Services.ResizeOptions)">
            <summary>
            Subscribe to size changes of the browser window using the provided options
            </summary>
            <param name="callback">The method (callbacK) that is invoke as soon as the size of the window has changed</param>
            <param name="options">The options used to subscribe to changes</param>
            <returns>The subscription id. This id is needed for unscribe</returns>
        </member>
        <member name="M:MudBlazor.Services.IResizeService.Unsubscribe(System.Guid)">
            <summary>
            Used for cancel the subscription to the resize event.
            </summary>
            <param name="subscriptionId">The subscription id (return of subscribe) to cancel</param>
            <returns>True if the subscription could be cancel, false otherwise</returns>
        </member>
        <member name="P:MudBlazor.Services.Scroll.ScrollOptions.Element">
             <summary>
            the element to be tracked;
             </summary>        
        </member>
        <member name="P:MudBlazor.Services.Scroll.ScrollOptions.ReportRate">
             <summary>
            the amount of milliseconds that the event is throttled 
             </summary>        
        </member>
        <member name="P:MudBlazor.Services.Scroll.ScrollOptions.SuppressInitEvent">
            <summary>
            Suppress the first OnScroll that is invoked when a new event handler is added.
            </summary>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorDialog(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a Dialog Service as a Scoped instance.
            </summary>
            <param name="services">IServiceCollection</param>
            <returns>Continues the IServiceCollection chain.</returns>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorSnackbar(Microsoft.Extensions.DependencyInjection.IServiceCollection,MudBlazor.SnackbarConfiguration)">
            <summary>
            Adds a Snackbar Service as a Scoped instance.
            </summary>
            <param name="services">IServiceCollection</param>
            <param name="configuration">Defines SnackbarConfiguration for this instance.</param>
            <returns>Continues the IServiceCollection chain.</returns>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorSnackbar(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MudBlazor.SnackbarConfiguration})">
            <summary>
            Adds a Snackbar Service as a Scoped instance.
            </summary>
            <param name="services">IServiceCollection</param>
            <param name="configuration">Defines SnackbarConfiguration for this instance.</param>
            <returns>Continues the IServiceCollection chain.</returns>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorResizeListener(Microsoft.Extensions.DependencyInjection.IServiceCollection,MudBlazor.Services.ResizeOptions)">
            <summary>
            Adds a ResizeListener as a Scoped instance.
            </summary>
            <param name="services">IServiceCollection</param>
            <param name="options">Defines ResizeOptions for this instance</param>
            <returns>Continues the IServiceCollection chain.</returns>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorResizeListener(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MudBlazor.Services.ResizeOptions})">
            <summary>
            Adds a ResizeListener as a Scoped instance.
            </summary>
            <param name="services">IServiceCollection</param>
            <param name="options">Defines ResizeOptions for this instance</param>
            <returns>Continues the IServiceCollection chain.</returns>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorResizeObserver(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MudBlazor.Services.ResizeObserverOptions})">
            <summary>
            Adds a IResizeObserver as a Transient instance.
            </summary>
            <param name="services">IServiceCollection</param>
            <param name="options">Defines ResizeObserverOptions for this instance</param>
            <returns>Continues the IServiceCollection chain.</returns>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorResizeObserver(Microsoft.Extensions.DependencyInjection.IServiceCollection,MudBlazor.Services.ResizeObserverOptions)">
            <summary>
            Adds a IResizeObserver as a Transient instance.
            </summary>
            <param name="services">IServiceCollection</param>
            <param name="options">Defines ResizeObserverOptions for this instance</param>
            <returns>Continues the IServiceCollection chain.</returns>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorResizeObserverFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a IResizeObserverFactory as a Singelton instance.
            </summary>
            <param name="services">IServiceCollection</param>
            <returns>Continues the IServiceCollection chain.</returns>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorKeyInterceptor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds IKeyInterceptor as a Transient instance.
            </summary>
            <param name="services">IServiceCollection</param>
            <returns>Continues the IServiceCollection chain.</returns>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorJsEvent(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds JsEvent as a Transient instance.
            </summary>
            <param name="services">IServiceCollection</param>
            <returns>Continues the IServiceCollection chain.</returns>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorScrollManager(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds ScrollManager as a transient instance.
            </summary>
            <param name="services">IServiceCollection</param>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudPopoverService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MudBlazor.PopoverOptions})">
            <summary>
            Adds ScrollManager as a transient instance.
            </summary>
            <param name="services">IServiceCollection</param>
            <param name="options">Defines PopoverOptions for the application/user</param>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudPopoverService(Microsoft.Extensions.DependencyInjection.IServiceCollection,MudBlazor.PopoverOptions)">
            <summary>
            Adds ScrollManager as a transient instance.
            </summary>
            <param name="services">IServiceCollection</param>
            <param name="options">Defines PopoverOptions for the application/user</param>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorScrollListener(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds ScrollListener as a transient instance.
            </summary>
            <param name="services">IServiceCollection</param>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorScrollSpy(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds ScrollSpy as a transient instance.
            </summary>
            <param name="services">IServiceCollection</param>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudBlazorJsApi(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds JsApi as a transient instance.
            </summary>
            <param name="services">IServiceCollection</param>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudEventManager(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds IEventListener as a transient instance.
            </summary>
            <param name="services">IServiceCollection</param>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,MudBlazor.Services.MudServicesConfiguration)">
            <summary>
            Adds common services required by MudBlazor components
            </summary>
            <param name="services">IServiceCollection</param>
            <param name="configuration">Defines options for all MudBlazor services.</param>
            <returns>Continues the IServiceCollection chain.</returns>
        </member>
        <member name="M:MudBlazor.Services.ServiceCollectionExtensions.AddMudServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MudBlazor.Services.MudServicesConfiguration})">
            <summary>
            Adds common services required by MudBlazor components
            </summary>
            <param name="services">IServiceCollection</param>
            <param name="configuration">Defines options for all MudBlazor services.</param>
            <returns>Continues the IServiceCollection chain.</returns>
        </member>
        <member name="T:MudBlazor.Services.MudServicesConfiguration">
            <summary>
            Common services configuration required by MudBlazor components
            </summary>
        </member>
        <member name="T:MudBlazor.Breakpoint">
            <summary>
            Breakpoints describe certain user interfaces sizes or ranges. Use them in conjunction with MudHidden or ResizeListenerService
            </summary>
        </member>
        <member name="P:MudBlazor.ScrollEventArgs.FirstChildBoundingClientRect">
            <summary>
            The BoundingClientRect for the first child of the scrolled element
            </summary>
        </member>
        <member name="P:MudBlazor.ScrollEventArgs.ScrollTop">
            <summary>
            The ScrollTop property gets or sets the number of pixels that an element's content is scrolled vertically
            </summary>
        </member>
        <member name="P:MudBlazor.ScrollEventArgs.ScrollLeft">
            <summary>
            The ScrollLeft property gets or sets the number of pixels that an element's content is scrolled from its left edge.
            </summary>
        </member>
        <member name="P:MudBlazor.ScrollEventArgs.ScrollHeight">
            <summary>
            The ScrollHeight  property is a measurement of the height of an element's content, including content not visible on the screen due to overflow
            </summary>
        </member>
        <member name="P:MudBlazor.ScrollEventArgs.ScrollWidth">
            <summary>
            The ScrollWidth property is a measurement of the width of an element's content, including content not visible on the screen due to overflow
            </summary>
        </member>
        <member name="P:MudBlazor.ScrollEventArgs.NodeName">
            <summary>
            Node name of the scrolled element
            </summary>
        </member>
        <member name="P:MudBlazor.IScrollListener.Selector">
            <summary>
            The CSS selector to which the scroll event will be attached
            </summary>
        </member>
        <member name="P:MudBlazor.ScrollListener.Selector">
            <summary>
            The CSS selector to which the scroll event will be attached
            </summary>
        </member>
        <member name="E:MudBlazor.ScrollListener.OnScroll">
            <summary>
            OnScroll event. Fired when a element is scrolled
            </summary>
        </member>
        <member name="M:MudBlazor.ScrollListener.RaiseOnScroll(MudBlazor.ScrollEventArgs)">
            <summary>
            invoked in JS, in scroll-listener.js
            </summary>
            <param name="e">The scroll event args</param>
        </member>
        <member name="M:MudBlazor.ScrollListener.Start">
            <summary>
            Subscribe to scroll event in JS
            </summary>        
        </member>
        <member name="M:MudBlazor.ScrollListener.Cancel">
            <summary>
            Unsubscribe to scroll event in 
            </summary>
        </member>
        <member name="T:MudBlazor.IScrollManager">
            <summary>
            Inject with the AddMudBlazorScrollServices extension
            </summary>
        </member>
        <member name="M:MudBlazor.ScrollManager.ScrollToFragmentAsync(System.String,MudBlazor.ScrollBehavior)">
            <summary>
            Scroll to an url fragment
            </summary>
            <param name="id">The id of the selector that is going to be scrolled to</param>
            <param name="behavior">smooth or auto</param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.ScrollManager.ScrollToAsync(System.String,System.Int32,System.Int32,MudBlazor.ScrollBehavior)">
            <summary>
            Scrolls to the coordinates of the element
            </summary>
            <param name="id">id of element</param>
            <param name="left">x coordinate</param>
            <param name="top">y coordinate</param>
            <param name="behavior">smooth or auto</param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.ScrollManager.ScrollToTopAsync(System.String,MudBlazor.ScrollBehavior)">
            <summary>
            Scrolls to the top of the element
            </summary>
            <param name="id">id of element</param>
            <param name="scrollBehavior">smooth or auto</param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.ScrollManager.ScrollToBottomAsync(System.String,MudBlazor.ScrollBehavior)">
            <summary>
            Scroll to the bottom of the element (or if not found to the bottom of the page)
            </summary>
            <param name="id">id of element of null to scroll to page bottom</param>
            <param name="behavior">smooth or auto</param>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.ScrollBehavior">
            <summary>
            Smooth: scrolls in a smooth fashion;
            Auto: is immediate
            </summary>
        </member>
        <member name="M:MudBlazor.IScrollSpy.StartSpying(System.String)">
            <summary>
            Start spying for scroll events for elements with the specified classes
            </summary>
            <param name="elementsSelector">the class name (without .) to identify the containers to spy on</param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.IScrollSpy.ScrollToSection(System.String)">
            <summary>
            Center the viewport to DOM element with the given Id 
            </summary>
            <param name="id">The Id of the DOM element, that should be centered</param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.IScrollSpy.ScrollToSection(System.Uri)">
            <summary>
            Center the viewport to the DOM element represented by the fragment inside the uri
            </summary>
            <param name="uri">The uri which contains the fragment. If no fragment it scrolls to the top of the page</param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.IScrollSpy.SetSectionAsActive(System.String)">
            <summary>
            Does the same as ScrollToSection but without the scrolling. This can be used to initially set an value
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:MudBlazor.IScrollSpy.CenteredSection">
            <summary>
            Get the current position of the centered section
            </summary>
        </member>
        <member name="T:MudBlazor.BoolConverter`1">
            <summary>
            A universal T to bool? binding converter
            </summary>
        </member>
        <member name="P:MudBlazor.Converter`2.Culture">
            <summary>
            The culture info being used for decimal points, date and time format, etc.
            </summary>
        </member>
        <member name="T:MudBlazor.Converter`1">
             <summary>
             Converter from T to string
            
             Set converts to string
             Get converts from string
             </summary>
        </member>
        <member name="P:MudBlazor.Converter`1.Format">
            <summary>
            Custom Format to be applied on bidirectional way.
            </summary>
        </member>
        <member name="T:MudBlazor.NullableDateConverter">
            <summary>
            A ready made DateTime? to string binding converter with configurable date format and culture
            </summary>
        </member>
        <member name="T:MudBlazor.DateConverter">
            <summary>
            A ready made DateTime to string binding converter with configurable date format and culture
            </summary>
        </member>
        <member name="T:MudBlazor.DefaultConverter`1">
            <summary>
            A universal T to string binding converter
            </summary>
        </member>
        <member name="T:MudBlazor.NumericConverter`1">
             <summary>
             A universal T to double binding converter
            
             Note: currently not in use. Should we ever use it, remove
             the  [ExcludeFromCodeCoverage] attribute
             </summary>
        </member>
        <member name="M:MudBlazor.BaseMask.Init">
            <summary>
            Initialize all internal data structures. Can be called multiple times,
            will initialize only once. To re-initialize set _initialized to false.
            </summary>
        </member>
        <member name="P:MudBlazor.BaseMask.Mask">
            <summary>
            The mask defining the structure of the accepted input. 
            The mask format depends on the implementation.
            </summary>
        </member>
        <member name="P:MudBlazor.BaseMask.Text">
            <summary>
            The current text as it is displayed in the component
            </summary>
        </member>
        <member name="M:MudBlazor.BaseMask.GetCleanText">
            <summary>
            Get the Text without delimiters or placeholders. Depends on the implementation entirely.
            Clean text will usually be used for the Value property of a mask field. 
            </summary>
        </member>
        <member name="P:MudBlazor.BaseMask.CaretPos">
            <summary>
            The current caret position
            </summary>
        </member>
        <member name="P:MudBlazor.BaseMask.Selection">
            <summary>
            The currently selected sub-section of the Text
            </summary>
        </member>
        <member name="P:MudBlazor.BaseMask.AllowOnlyDelimiters">
            <summary>
            Allow showing a text consisting only of delimiters
            </summary>
        </member>
        <member name="P:MudBlazor.BaseMask.MaskChars">
            <summary>
            The mask chars define the meaning of single mask characters such as 'a', '0'
            </summary>
        </member>
        <member name="M:MudBlazor.BaseMask.Insert(System.String)">
            <summary>
            Implements user input at the current caret position (single key strokes or pasting longer text)
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:MudBlazor.BaseMask.Delete">
            <summary>
            Implements the effect of the Del key at the current cursor position
            </summary>
        </member>
        <member name="M:MudBlazor.BaseMask.Backspace">
            <summary>
            Implements the effect of the Backspace key at the current cursor position
            </summary>
        </member>
        <member name="M:MudBlazor.BaseMask.Clear">
            <summary>
            Reset the mask as if the whole textfield was cleared
            </summary>
        </member>
        <member name="M:MudBlazor.BaseMask.SetText(System.String)">
            <summary>
            Overwrite the mask text from the outside without losing caret position
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:MudBlazor.BaseMask.UpdateText(System.String)">
            <summary>
            Update Text from the inside
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:MudBlazor.BaseMask.Refresh">
            <summary>
            Re-applies parameters (i.e. after they changed) without loosing internal state
            such as Text, CaretPos and Selection
            </summary>
        </member>
        <member name="M:MudBlazor.BaseMask.ConsolidateCaret(System.String,System.Int32)">
            <summary>
            Performs simple border checks and corrections to the caret position
            </summary>
        </member>
        <member name="M:MudBlazor.BaseMask.ConsolidateSelection">
            <summary>
            Performs simple border checks and corrections to the selection
            and removes zero-width selections
            </summary>
        </member>
        <member name="M:MudBlazor.BaseMask.ToString">
            <summary>
            Prints a representation of the input including markers for caret and selection
            Used heavily by the tests
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.BlockMask.BuildRegex(MudBlazor.Block[])">
            <summary>
            Build the progressive working regex from the block and delimiter definitions
            Note: a progressive regex must match partial input!!!!
            </summary>
            <param name="blocks"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.DateMask.ModifyFinalText(System.String)">
            <summary>
            Note: this is required for special cases where the date becomes invalid after the last character has been input
            For instance: MM/dd/yyyy from 02/29/000| to 02/29/0001|
            The year 0001 is not a leap year so the day needs to be corrected to 28
            Or this 0[3]/31/2000 input "4" => 04/31/2000
            But we do this only for a complete date!
            </summary>
        </member>
        <member name="P:MudBlazor.IMask.Mask">
            <summary>
            The mask defining the structure of the accepted input. 
            Its format depends on the implementation.
            </summary>
        </member>
        <member name="P:MudBlazor.IMask.Text">
            <summary>
            The current text as it is displayed in the component
            </summary>
        </member>
        <member name="M:MudBlazor.IMask.GetCleanText">
            <summary>
            Get the Text without delimiters or placeholders. Depends on the implementation entirely.
            Clean text will usually be used for the Value property of a mask field. 
            </summary>
        </member>
        <member name="P:MudBlazor.IMask.CaretPos">
            <summary>
            The current caret position
            </summary>
        </member>
        <member name="P:MudBlazor.IMask.Selection">
            <summary>
            The currently selected sub-section of the Text
            </summary>
        </member>
        <member name="M:MudBlazor.IMask.Insert(System.String)">
            <summary>
            Implements user input at the current caret position (single key strokes or pasting longer text)
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:MudBlazor.IMask.Delete">
            <summary>
            Implements the effect of the Del key at the current cursor position
            </summary>
        </member>
        <member name="M:MudBlazor.IMask.Backspace">
            <summary>
            Implements the effect of the Backspace key at the current cursor position
            </summary>
        </member>
        <member name="M:MudBlazor.IMask.Clear">
            <summary>
            Reset the mask as if the whole textfield was cleared
            </summary>
        </member>
        <member name="M:MudBlazor.IMask.SetText(System.String)">
            <summary>
            Overwrite the mask text without losing caret position
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:MudBlazor.IMask.UpdateFrom(MudBlazor.IMask)">
            <summary>
            Copy config from other mask but preserve own state.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:MudBlazor.MultiMask.DoCheckAndRedo(System.Action)">
            <summary>
            This is a nifty trick to avoid writing three times the same code for Insert, Delete and Backspace.
            This backs up the state. Executes the action, checks if option changed. If so, apply saved state and
            re-apply the action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:MudBlazor.PatternMask.Placeholder">
            <summary>
            If set, the mask will print placeholders for all non-delimiters that haven't yet been typed.
            For instance a mask "000-000" with input "1" will show "1__-___" as Text.
            </summary>
        </member>
        <member name="P:MudBlazor.PatternMask.Transformation">
            <summary>
            A function for changing input characters after they were typed, i.e. lower-case to upper-case, etc.
            </summary>
        </member>
        <member name="M:MudBlazor.PatternMask.Insert(System.String)">
            <summary>
            Inserts given text at caret position
            </summary>
            <param name="input">One or multiple characters of input</param>
        </member>
        <member name="M:MudBlazor.PatternMask.Delete">
            <summary>
            Implements the effect of the Del key at the current cursor position
            </summary>
        </member>
        <member name="M:MudBlazor.PatternMask.Backspace">
            <summary>
            Implements the effect of the Backspace key at the current cursor position
            </summary>
        </member>
        <member name="M:MudBlazor.PatternMask.FillWithPlaceholder(System.String)">
            <summary>
            Fill the rest of the text with Placeholder but only if it is set
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.PatternMask.AlignAgainstMask(System.String,System.Int32)">
            <summary>
            Applies the mask to the given text starting at the given offset and returns the masked text. 
            </summary>
            <param name="text"></param>
            <param name="maskOffset"></param>
        </member>
        <member name="P:MudBlazor.PatternMask.CleanDelimiters">
            <summary>
            If true, all characters which are not defined in the mask (delimiters) are stripped
            from text. 
            </summary>
        </member>
        <member name="M:MudBlazor.PatternMask.GetCleanText">
            <summary>
            Return the Text without Placeholders. If CleanDelimiters is enabled, then also strip all
            undefined characters. For instance, for a mask "0000 0000 0000 0000" the space would be
            an undefined character (a delimiter) unless it were defined as a mask character in MaskChars.
            </summary>
        </member>
        <member name="F:MudBlazor.RegexMask.WhiteSpaceFilter">
            <summary>
                Add this filter to the end of a mask to block any space, tab or newline character.
            </summary>
        </member>
        <member name="M:MudBlazor.RegexMask.#ctor(System.String,System.String)">
            <summary>
            Create a mask that uses a regex to restrict input.   
            </summary>
            <param name="regex">
            The general or progressive regex to be used for input checking.
            
            Note: a general regex must match every possible input, i.e. ^[0-9]+$.
            Note: a progressive regex must match even partial input successfully! The
            progressive regex must start with ^ and end with $ to work correctly!
            
            Example: to match input "abc" a progressive regex must match "a" or "ab" or "abc". The
            progressive regex would look like this: ^a(b(c)?)?$ or like this ^(a|ab|abc)$
            It is best to generate the progressive regex automatically like BlockMask does.
            </param>
            <param name="mask">
            The mask defining the structure of the accepted input.
            
            Note: if not included the regex will be the mask.   
            </param>
        </member>
        <member name="P:MudBlazor.RegexMask.Delimiters">
            <summary>
            Optional delimiter chars which will be jumped over if the caret is
            in front of one and the user inputs the next non-delimiter 
            </summary>
        </member>
        <member name="M:MudBlazor.RegexMask.Insert(System.String)">
            <summary>
            Inserts given text at caret position
            </summary>
            <param name="input">One or multiple characters of input</param>
        </member>
        <member name="M:MudBlazor.RegexMask.Delete">
            <summary>
            Implements the effect of the Del key at the current cursor position
            </summary>
        </member>
        <member name="M:MudBlazor.RegexMask.Backspace">
            <summary>
            Implements the effect of the Backspace key at the current cursor position
            </summary>
        </member>
        <member name="M:MudBlazor.RegexMask.AlignAgainstMask(System.String)">
            <summary>
            Applies the mask to the given text starting at the given offset and returns the masked text. 
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:MudBlazor.RegexMask.IPv4(System.Boolean,System.Char)">
            <summary>
            Creates a predefined RegexMask for an IPv4 Address with or without port masking.
            </summary>
            <param name="includePort">
            Set to true to include port to the mask.
            </param>
            <param name="maskChar">
            Set the IPv4 maskChar. Default is '0'
            </param>
        </member>
        <member name="M:MudBlazor.RegexMask.IPv6(System.Boolean,System.Char,System.Char)">
            <summary>
            Creates a predefined RegexMask for an IPv6 Address with or without port masking.
            </summary>
            <param name="includePort">
            Set to true to include port to the mask.
            </param>
            <param name="maskChar">
            Set the IPv6 maskChar. Default is 'X'
            </param>
            <param name="portMaskChar">
            Set the IPv6 portMask. Default is '0'
            </param>
        </member>
        <member name="M:MudBlazor.RegexMask.Email(System.String)">
            <summary>
            Creates a predefined RegexMask for Email Address.
            </summary>
            <param name="mask">
            Set the email mask. Default is "Ex. user@domain.com"
            </param>
        </member>
        <member name="P:MudBlazor.MudContainer.Fixed">
            <summary>
            Set the max-width to match the min-width of the current breakpoint. This is useful if you'd prefer to design for a fixed set of sizes instead of trying to accommodate a fully fluid viewport. It's fluid by default.
            </summary>
        </member>
        <member name="P:MudBlazor.MudContainer.MaxWidth">
            <summary>
            Determine the max-width of the container. The container width grows with the size of the screen. Set to false to disable maxWidth.
            </summary>
        </member>
        <member name="P:MudBlazor.MudContainer.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDivider.Absolute">
            <summary>
            Sets absolute position to the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDivider.FlexItem">
            <summary>
            If true, a vertical divider will have the correct height when used in flex container.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDivider.Light">
            <summary>
            If true, the divider will have a lighter color.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDivider.Vertical">
            <summary>
            If true, the divider is displayed vertically.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDivider.DividerType">
            <summary>
            The Divider type to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawerHeader.Dense">
            <summary>
            If true, compact padding will be used, same as the Appbar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawerHeader.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudDrawerHeader.LinkToIndex">
            <summary>
            If true, the component will link to index page with an a element instead of div.
            </summary>
        </member>
        <member name="P:MudBlazor.MudHighlighter.Text">
            <summary>
            The whole text in which a fragment will be highlighted
            </summary>
        </member>
        <member name="P:MudBlazor.MudHighlighter.HighlightedText">
            <summary>
            The fragment of text to be highlighted
            </summary>
        </member>
        <member name="P:MudBlazor.MudHighlighter.CaseSensitive">
            <summary>
            Whether or not the highlighted text is case sensitive
            </summary>
        </member>
        <member name="P:MudBlazor.MudHighlighter.UntilNextBoundary">
            <summary>
            If true, highlights the text until the next regex boundary
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabPanel.Text">
            <summary>
            Text will be displayed in the TabPanel as TabTitle.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabPanel.Icon">
            <summary>
            Icon placed before the text if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabPanel.Disabled">
            <summary>
            If true, the tabpanel will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabPanel.BadgeData">
            <summary>
            Optional information to be showed into a badge
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabPanel.BadgeDot">
            <summary>
            Optional information to show the badge as a dot.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabPanel.BadgeColor">
            <summary>
            The color of the badge.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabPanel.ID">
            <summary>
            Unique TabPanel ID. Useful for activation when Panels are dynamically generated.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabPanel.OnClick">
            <summary>
            Raised when tab is clicked
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabPanel.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTabPanel.ToolTip">
            <summary>
            TabPanel Tooltip
            </summary>
        </member>
        <member name="P:MudBlazor.MudToolBar.Dense">
            <summary>
            If true, compact padding will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToolBar.DisableGutters">
            <summary>
            If true, disables gutter padding.
            </summary>
        </member>
        <member name="P:MudBlazor.MudToolBar.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItemToggleButton.Visible">
            <summary>
            If true, displays the button.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItemToggleButton.Expanded">
            <summary>
            Determens when to flip the expanded icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItemToggleButton.Loading">
            <summary>
            If true, displays the loading icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItemToggleButton.ExpandedChanged">
            <summary>
            Called whenever expanded changed.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItemToggleButton.LoadingIcon">
            <summary>
            The loading icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItemToggleButton.LoadingIconColor">
            <summary>
            The color of the loading. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItemToggleButton.ExpandedIcon">
            <summary>
            The expand/collapse icon.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTreeViewItemToggleButton.ExpandedIconColor">
            <summary>
            The color of the expand/collapse. It supports the theme colors.
            </summary>
        </member>
    </members>
</doc>
