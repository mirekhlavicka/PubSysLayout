@inject CurrentDB currentDB
@inject NavigationManager uriHelper;
@inject HttpClient Http
@inject LocalStorage localStorage
@using Microsoft.AspNetCore.WebUtilities;

<style>
    .dbselect input, .dbselect label, .dbselect .mud-icon-default {
        color: white !important;
    }

    .dbselect {
        width:300px;
    }
</style>

@if (dblist != null)
{
    <div class="dbselect">
        <MudSelect T="string" Label="Database" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Value="@currentDB.Current" ValueChanged="@SetCurrent" Margin="Margin.Dense">
            @foreach (var constr in dblist)
            {
                <MudSelectItem Value="@constr" />
            }
        </MudSelect>
    </div>
}

@code {
    private string[] dblist = null;

    protected override async Task OnInitializedAsync()
    {
        dblist = await Http.GetFromJsonAsync<string[]>("api/dblist");

        if (String.IsNullOrEmpty(currentDB.Current))
        {
            string val = null;
            bool returnFromDetail = true;

            var uri = uriHelper.ToAbsoluteUri(uriHelper.Uri);
            var queryStrings = QueryHelpers.ParseQuery(uri.Query);
            if (queryStrings.TryGetValue("db", out var db))
            {
                val = db;
                returnFromDetail = false;
                await localStorage.SetAsync("currentDB", val);
            }

            if (String.IsNullOrEmpty(val))
            {
                val = await localStorage.GetAsync<string>("currentDB");
            }

            if (String.IsNullOrEmpty(val) || !dblist.Any(s => String.Equals(s, val, StringComparison.OrdinalIgnoreCase)))
            {
                val = dblist[0];
                await localStorage.SetAsync("currentDB", val);
            }

            currentDB.Current = val;
            Reload(returnFromDetail);
        }
    }

    private void Reload(bool returnFromDetail)
    {
        string uri = uriHelper.Uri;

        if (returnFromDetail)
        {
            uri = uriHelper.ToAbsoluteUri(uriHelper.ToBaseRelativePath(uri).Split('/').FirstOrDefault()).ToString();
        }

        uriHelper.NavigateTo("/dummy", forceLoad: false);
        uriHelper.NavigateTo(uri, forceLoad: false);

    }

    private async Task SetCurrent(string s)
    {
        currentDB.Current = s;
        await localStorage.SetAsync("currentDB", currentDB.Current);
        Reload(true);
    }
}