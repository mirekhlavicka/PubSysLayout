@inject CurrentDB currentDB
@inject DBList dbListService
@inject NavigationManager uriHelper;
@inject HttpClient Http
@inject LocalStorage localStorage
@inject MudBlazor.ISnackbar snackBar
@implements IDisposable
@using Microsoft.AspNetCore.WebUtilities;

<style>
    .dbswitch {
        display: flex;
    }

    .dbchips {
        margin-right:50px;
        padding-top:5px;
    }

    .dbselect {
        width: 300px;
    }

    .dbselect input, .dbselect label, .dbselect .mud-icon-default {
        color: white !important;
    }

</style>

@if (dblist != null)
{
    <div class="dbswitch">
        <div class="dbchips">
        @if (currentDB.Current != null && recent != null && recent.Length > 1)
        {
            <MudChipSet Filter="true" Mandatory="true" MultiSelection="false" SelectedChipChanged="@(async (e) =>{ if(e?.Value != null) await SetCurrent(e.Value.ToString()); })" SelectedValues="@(new string[]{ currentDB.Current})">
                @foreach (var db in recent)
                {
                    <MudChip Text="@db" Color="Color.Info" Value="@db" @key="@db">@db</MudChip>
                }
            </MudChipSet>
        }
        </div>
        <div class="dbselect">
            <MudSelect T="string" Label="Database" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Value="@currentDB.Current" ValueChanged="@SetCurrent" Margin="Margin.Dense">
                @foreach (var constr in dblist)
                {
                    <MudSelectItem Value="@constr" />
                }
            </MudSelect>
        </div>
    </div>
}

@code {
    private string[] dblist = null;
    private string[] recent = null;
    private bool disposed = false;

    protected override async Task OnInitializedAsync()
    {
        dblist = await dbListService.GetList();

        string val = null;
        bool returnFromDetail = true;

        var uri = uriHelper.ToAbsoluteUri(uriHelper.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if (queryStrings.TryGetValue("db", out var db))
        {
            val = dblist.FirstOrDefault(s => String.Equals(s, db, StringComparison.OrdinalIgnoreCase));
            if (val != null)
            {
                returnFromDetail = false;
            }
        }

        if (String.IsNullOrEmpty(val))
        {
            val = await localStorage.GetAsync<string>("currentDB");
        }

        if (String.IsNullOrEmpty(val) || !dblist.Any(s => String.Equals(s, val, StringComparison.OrdinalIgnoreCase)))
        {
            val = dblist[0];
        }            

        recent = (new string[] {val}).Union((await localStorage.GetAsync<string[]>("recentList")) ?? new string[0]).Where(db => dblist.Any(s => String.Equals(s, db, StringComparison.OrdinalIgnoreCase))).Take(4).ToArray();

        if (currentDB.Current != val)
        {
            currentDB.Current = val;

            await SaveCurrent();

            Reload(returnFromDetail);
        }

        if (!disposed)
        {
            currentDB.CurrentChanged += CurrentDBChanged;
        }
    }

    private void Reload(bool returnFromDetail)
    {
        string uri = uriHelper.Uri;

        if (returnFromDetail)
        {
            uri = uriHelper.ToAbsoluteUri(uriHelper.ToBaseRelativePath(uri).Split('/').FirstOrDefault()).ToString();
        }

        uriHelper.NavigateTo("/dummy", forceLoad: false);
        uriHelper.NavigateTo(uri, forceLoad: false);

    }

    private bool changeFromMe = false;
    private async Task SetCurrent(string s)
    {
        changeFromMe = true;
        currentDB.Current = s;
        changeFromMe = false;
        await SaveCurrent();
        Reload(true);
        snackBar.Add($"Layout database {s} selected", Severity.Info);
    }

    private async void CurrentDBChanged()
    {
        if (!disposed && !changeFromMe)
        {
            StateHasChanged();
            await SaveCurrent();
            Reload(false);
        }
    }

    private async Task SaveCurrent()
    {
        await localStorage.SetAsync("currentDB", currentDB.Current);
        if (recent != null )
        {
            if (!recent.Contains(currentDB.Current))
            {
                recent = recent.Take(3).Prepend(currentDB.Current).ToArray();
            }
            else
            {
                recent = recent.Where(db => db != currentDB.Current).Prepend(currentDB.Current).ToArray();
            }
            StateHasChanged();
            await localStorage.SetAsync("recentList", recent);
        }
    }

    public void Dispose()
    {
        currentDB.CurrentChanged -= CurrentDBChanged;
        disposed = true;
    }
}