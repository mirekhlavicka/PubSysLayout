@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager uriHelper
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject CurrentDB currentDB
@inject LocalStorage localStorage

@using PubSysLayout.Shared.Model

<MudDialog DisableSidePadding="true" DefaultFocus="DefaultFocus.Element">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Cable" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="height: 170px; overflow-y: scroll">
        @if (FTPList == null)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
            <MudText Typo="Typo.subtitle1">Scanning FTP sites ...</MudText>
        }
        else
        {
            <MudIconButton OnClick="Refresh" Icon="@Icons.Material.Filled.Refresh" Title="Refresh FTP sites"/>
            <MudList Clickable="true" SelectedItem="null">
                @foreach (var s in FTPList)
                {
                    <MudListItem Text='@($"{s}")' Icon="@Icons.Material.Filled.ArrowRightAlt" OnClick='() => MudDialog.Close(DialogResult.Ok(s))' />
                }
            </MudList>
        }
        </MudContainer>
    </DialogContent>
    <DialogActions>        
        <MudButton OnClick="Close" Color="Color.Default" Variant="Variant.Filled">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private string[] FTPList;

    protected async override Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task LoadData(bool refresh = false)
    {
        if (!refresh)
        {
            FTPList = await localStorage.GetAsync<string[]>($"FTPList_{currentDB.Current}");
        }
        else
        {
            FTPList = null;
        }

        if (FTPList == null)
        {
            FTPList = await Http.GetFromJsonAsync<string[]>($"api/code/ftp?db={currentDB.Current}");
            await localStorage.SetAsync($"FTPList_{currentDB.Current}", FTPList);
        }
    }

    protected async Task Refresh()
    {
        await LoadData(true);
    }

    void Close() => MudDialog.Close(DialogResult.Cancel());
}
