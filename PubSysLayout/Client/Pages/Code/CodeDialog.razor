@inject CurrentDB currentDB
@inject IDialogService DialogService
@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@using System.Net;

<MudDialog >
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
        <MudIconButton aria-label="close" Icon="@Icons.Material.Filled.Close" @onclick="Close"/>
    </TitleContent>
    <DialogContent>
        <form @onkeydown="KeyDown">
            <textarea @ref="textarea" id="dlgCode" name="dlgCode" style="display:none"/>
        </form>
    </DialogContent>
    <DialogActions>
        <MudTooltip Arrow="true" Placement="Placement.Top" Color="Color.Default" Class="ml-6">
            <ChildContent>
                <MudIcon Icon="@Icons.Material.Filled.Help" Size="Size.Medium" Class="ml-10" />
            </ChildContent>
            <TooltipContent>
                <MudText Typo="Typo.body2" Align="Align.Left"><b>Ctrl+S</b><br />&nbsp;Save</MudText>
                <MudText Typo="Typo.body2" Align="Align.Left"><b>Esc</b><br />&nbsp;Close</MudText>
                <MudText Typo="Typo.body2" Align="Align.Left"><b>Ctrl-F</b><br />&nbsp;Start searching</MudText>
                <MudText Typo="Typo.body2" Align="Align.Left"><b>Ctrl-G</b><br />&nbsp;Find next</MudText>
                <MudText Typo="Typo.body2" Align="Align.Left"><b>Shift-Ctrl-G</b><br />&nbsp;Find previous</MudText>
                <MudText Typo="Typo.body2" Align="Align.Left"><b>Shift-Ctrl-F</b><br />&nbsp;Replace</MudText>
                <MudText Typo="Typo.body2" Align="Align.Left"><b>Shift-Ctrl-R</b><br />&nbsp;Replace all</MudText>
                <MudText Typo="Typo.body2" Align="Align.Left"><b>Alt-F</b><br />&nbsp;Persistent search<MudText Typo="Typo.caption"><br />&nbsp&nbspdialog doesn't autoclose,<br />&nbsp&nbspenter to find next,<br />&nbsp&nbspShift-Enter to find previous</MudText></MudText>
                <MudText Typo="Typo.body2" Align="Align.Left"><b>Alt-G</b><br />&nbsp;Jump to line</MudText>
            </TooltipContent>
        </MudTooltip>        
        <MudButton Variant="Variant.Filled" IconColor="Color.Secondary" Color="Color.Default" OnClick="Save" Class="ml-auto" StartIcon="@Icons.Material.Filled.Save" accesskey="s">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string Code { get; set; } = "";
    [Parameter] public string Path { get; set; } = "";

    private ElementReference textarea;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("codemirror.create", textarea, Code, "100%", "calc(100vh - 200px)", Path.EndsWith("css") ? "text/css" : "application/x-aspx");
        }
    }

    private async Task Save()
    {        
        Code = await js.InvokeAsync<string>("codemirror.getValue", "dlgCode");

        await Http.PutAsJsonAsync($"api/code?ftp={WebUtility.UrlEncode(currentDB.FTP)}", new
        {
            Path = Path,
            Code = Code
        });

        snackBar.Add($"{Path} saved", Severity.Success);
        await js.InvokeAsync<bool>("codemirror.setChanges", "dlgCode", false);
    }

    private async void KeyDown(KeyboardEventArgs  e)
    {
        if (e.Key == "Escape")
        {
            Close();
        }
        if (e.CtrlKey && e.Key == "s")
        {
            await Save();
        }
    }

    private bool messageBoxShown = false;
    private async void Close()
    {
        if (messageBoxShown)
        {
            return;
        }

        bool changes = await js.InvokeAsync<bool>("codemirror.getChanges", "dlgCode");

        if (changes)
        {
            messageBoxShown = true;
            var res = await DialogService.ShowMessageBox(
                "Unsaved changes",
                $"Do you want to save changes to {MudDialog.Title} ?",
                yesText: "Save", noText: "Don't Save", cancelText: "Cancel", options: new DialogOptions { MaxWidth = MaxWidth.Medium});
            messageBoxShown = false;

            if (res == null)
            {
                return;
            }

            if (res.Value)
            {
                await Save();
            }

            MudDialog.Cancel();
        }
        else
        {
            MudDialog.Cancel();
        }
    }
}
