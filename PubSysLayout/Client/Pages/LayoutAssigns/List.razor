@inject HttpClient Http
@inject IJSRuntime js
@inject IDialogService DialogService
@inject MudBlazor.ISnackbar snackBar
@using PubSysLayout.Shared.Model


@if (servers == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
<MudTooltip Text="Add new assign">
    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-1"  OnClick="AddLA" Disabled="@(newLA !=null || beforeEditLA != null)"/> 
</MudTooltip>
<MudTable @ref="assignTable" Items="layoutAssigns" Hover="true" SortLabel="Sort By" Elevation="@(IdQslayout ==0 ? 5 : 0)" Class="mt-4" RowsPerPage="0" FixedHeader="true" FixedFooter="true"  Dense="true"
    CommitEditTooltip="Commit Edit" CancelEditTooltip="Cancel Edit" T="LayoutAssign" Height="max(calc(100vh - 698px),150px)"
    RowEditPreview="Backup" RowEditCancel="ResetEdit" RowEditCommit="Committed" CanCancelEdit="true" IsEditRowSwitchingBlocked="true" OnRowClick="RowClicked">
    <ToolBarContent>
    @if(IdQslayout == 0)
    {
        <MudText Typo="Typo.h6">@Title</MudText>
    }
    </ToolBarContent>
    <ColGroup>
        @if (servers.Count > 1)
        {
            <col style="width:25%;" />
        }        
        <col />
        <col style="width:30%;"/>
        <col style="width:120px;"/>
        <col style="width:0px;"/>
    </ColGroup>
    <HeaderContent>
        @if (servers.Count > 1)
        {
            <MudTh>Server</MudTh>
        }
        <MudTh>Section</MudTh>
        <MudTh>@(IdLayoutdefinition == 0 ? "Layout definition" : "Action")</MudTh>
        <MudTh />
    </HeaderContent>
    <RowTemplate>
        @if (servers.Count > 1)
        {
            <MudTd DataLabel="Name">@servers[context.IdServer].Name</MudTd>
        }
        <MudTd DataLabel="Name">@(sections.ContainsKey(context.IdSection) ? sections[context.IdSection].Name : "(!invalid ID)")</MudTd>
        @if (@IdQslayout == 0)
        {
            <MudTd DataLabel="Value">@(qslayouts.ContainsKey(context.IdQslayout) ? qslayouts[context.IdQslayout].Name : "(not selected)")</MudTd>
        }
        @if (@IdLayoutdefinition == 0)
        {
            <MudTd DataLabel="Value">
                @(layoutDefinitions.ContainsKey(context.IdLayoutdefinition) ? layoutDefinitions[context.IdLayoutdefinition].Name : "(not selected)")                
                <MudTooltip Text="Edit layout definition">
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowRightAlt" Link='@($"layoutdefinitions/edit/{context.IdLayoutdefinition}")' Color="Color.Primary" Size="Size.Small" Variant="Variant.Text" ></MudIconButton>
                </MudTooltip>
            </MudTd>
        }
        <MudTd DataLabel="">                            
            <MudTooltip Text="Delete assign">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="@(()=>DeleteAssign(context))" Color="Color.Secondary" Size="Size.Small" Variant="Variant.Text" ></MudIconButton>
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        @if (servers.Count > 1)
        {
            <MudTd DataLabel="Server">
                <MudSelect Dense="true" @bind-Value="@context.IdServer" Validation='(int x) => x == 0 ? "Select server" : null' Required="true" ToStringFunc='(id) => servers.ContainsKey(id) ? servers[id].Name : "(not selected)"' T="int">
                    @foreach (var s in servers.Values.OrderBy(s => s.Name))
                    {
                        <MudSelectItem Value="@s.IdServer">@s.Name </MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
        }
        <MudTd DataLabel="Section">
            <a id="editRow"/>
            <MudAutocomplete Dense="true" T="Section" SearchFunc="@SearchSection" DebounceInterval="500"
                ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="false" 
                ToStringFunc='s => $"{s.Name} ({s.IdSection})"'  MaxItems="100"
                Placeholder="Type section name or ID" Required="false" @bind-Value="@selectedSection"
                AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Default" Clearable="true" spellcheck="false"/>               
        </MudTd>
        @if (@IdQslayout == 0)
        {
            <MudTd DataLabel="Action">
                <MudSelect Dense="true" @bind-Value="@context.IdQslayout" Validation='(int x) => x == 0 ? "Select action" : null' Required="true" ToStringFunc='(id) => qslayouts.ContainsKey(id) ? qslayouts[id].Name : "(not selected)"' T="int">
                    <MudSelectItem Value="0">(not selected)</MudSelectItem>
                    @foreach (var qs in qslayouts.Values.OrderBy(qs => qs.Name))
                    {
                        <MudSelectItem Value="@qs.IdQslayout">@(qs.Name + " (" + qs.ParamString + ")")</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
        }
        @if (@IdLayoutdefinition == 0)
        {
            <MudTd DataLabel="Layout definition">
                <MudSelect Dense="true" @bind-Value="@context.IdLayoutdefinition" Validation='(int x) => x == 0 ? "Select Layout definition" : null' Required="true" ToStringFunc='(id) => layoutDefinitions.ContainsKey(id) ? layoutDefinitions[id].Name : "(not selected)"' T="int">
                    <MudSelectItem Value="0">(not selected)</MudSelectItem>
                    @foreach (var ld in layoutDefinitions.Values.OrderBy(ld => ld.Name))
                    {
                        <MudSelectItem Value="@ld.IdLayoutdefinition">@(ld.Name + " (" + ld.IdLayoutdefinition + ")")</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
        }
    </RowEditingTemplate>
</MudTable>
}

@code {
    [Parameter] public int IdLayoutdefinition { get; set; }
    [Parameter] public int IdQslayout { get; set; }
    [Parameter] public string Title { get; set; }

    private List<LayoutAssign> layoutAssigns;
    Dictionary<int, Qslayout> qslayouts;
    Dictionary<int, LayoutDefinition> layoutDefinitions;
    Dictionary<int, Section> sections;
    Dictionary<int, Server> servers;

    private LayoutAssign beforeEditLA = null;
    private LayoutAssign newLA = null;
    private Section selectedSection = null;

    MudTable<LayoutAssign> assignTable;

    protected async override Task OnParametersSetAsync()
    {
        await LoadData();
    }

    protected async Task LoadData()
    {
        layoutAssigns = await Http.GetFromJsonAsync<List<LayoutAssign>>($"api/layoutassigns?id_layoutdefinition={IdLayoutdefinition}&id_qslayout={IdQslayout}");

        sections = new Dictionary<int, Section>();

        foreach (var id_section in layoutAssigns.Where(la => la.IdSection  != 0).Select(la => la.IdSection))
        {
            if (sections.ContainsKey(id_section))
            {
                continue;
            }
            sections.Add(id_section, await GetSection(id_section));
        }

        sections.Add(0, new Section { IdSection = 0, Name = "(all sections)"});

        qslayouts = (await Http.GetFromJsonAsync<Qslayout[]>("api/qslayouts")).ToDictionary(qs => qs.IdQslayout);
        layoutDefinitions = (await Http.GetFromJsonAsync<LayoutDefinition[]>("api/layoutdefinitions")).ToDictionary(ld => ld.IdLayoutdefinition);
        servers = (await Http.GetFromJsonAsync<Server[]>("api/dblist/servers")).ToDictionary(s => s.IdServer);
    }

    private void Backup(object element)
    {
        LayoutAssign la = element as LayoutAssign;

        beforeEditLA = new()
            {
                IdServer = la.IdServer,
                IdSection = la.IdSection,
                IdQslayout = la.IdQslayout,
                IdLayoutdefinition = la.IdLayoutdefinition,
                RefererRequired = la.RefererRequired
            };

        selectedSection = sections.ContainsKey(la.IdSection) ? sections[la.IdSection] : null;

        StateHasChanged();
    }

    private void ResetEdit(object element)
    {
        if (beforeEditLA != null)
        {
            LayoutAssign la = element as LayoutAssign;
            la.IdServer = beforeEditLA.IdServer;
            la.IdSection = beforeEditLA.IdSection;
            la.IdQslayout= beforeEditLA.IdQslayout;
            la.IdLayoutdefinition = beforeEditLA.IdLayoutdefinition;
            la.RefererRequired = beforeEditLA.RefererRequired;

            beforeEditLA = null;
            StateHasChanged();
        }

        if (newLA != null)
        {
            layoutAssigns.Remove(newLA);
            newLA = null;
            StateHasChanged();
        }
    }

    private async void Committed(object element)
    {

        LayoutAssign la = element as LayoutAssign;

        la.IdSection = (selectedSection == null ? 0 : selectedSection.IdSection);

        if (!sections.ContainsKey(la.IdSection))
        {
            sections.Add(la.IdSection, /*await GetSection(la.IdSection)*/selectedSection);
        }

        if (beforeEditLA != null && newLA == null)
        {          
            using var response = await Http.PutAsJsonAsync($"api/layoutassigns/{beforeEditLA.IdServer}/{beforeEditLA.IdSection}/{beforeEditLA.IdQslayout}?force=False", la);

            if (!response.IsSuccessStatusCode)
            {
                var msg = await response.Content.ReadAsStringAsync();

                if ((await DialogService.ShowMessageBox(
                    "Warning",
                    $"Action already assigned to layout definition {msg}. Do you want to replace ?",
                    yesText: "Replace!", cancelText: "Cancel") != null))
                {
                    await Http.PutAsJsonAsync($"api/layoutassigns/{beforeEditLA.IdServer}/{beforeEditLA.IdSection}/{beforeEditLA.IdQslayout}?force=True", la);
                    beforeEditLA = null;
                    snackBar.Add($"layout assign replaced", Severity.Success);
                }
                else
                {
                    ResetEdit(element);
                }
            }
            else
            {
                beforeEditLA = null;
                snackBar.Add($"layout assign saved", Severity.Success);
            }
        }
        else
        {
            using var response = await Http.PostAsJsonAsync($"api/layoutassigns?force=False", la);

            if (!response.IsSuccessStatusCode)
            {
                var msg = await response.Content.ReadAsStringAsync();

                if ((await DialogService.ShowMessageBox(
                    "Warning",
                    $"Action already assigned to layout definition {msg}. Do you want to replace ?",
                    yesText: "Replace!", cancelText: "Cancel") != null))
                {
                    await Http.PostAsJsonAsync($"api/layoutassigns?force=True", la);
                    newLA = null;
                    snackBar.Add($"layout assign replaced", Severity.Success);
                }
                else
                {
                    ResetEdit(element);
                }
            }
            else
            {
                newLA = null;
                snackBar.Add($"layout assign created", Severity.Success);
            }
        }

        StateHasChanged();
    }

    private async Task DeleteAssign(LayoutAssign la)
    {
        if ((await DialogService.ShowMessageBox(
            "Warning",
            $"Do you want to delete layout assign ?",
            yesText: "Delete!", cancelText: "Cancel") != null))
        {
            await Http.DeleteAsync($"api/layoutassigns/{la.IdServer}/{la.IdSection}/{la.IdQslayout}");
            snackBar.Add($"Layout assign deleted.", Severity.Success);
            await LoadData();
        }
    }

    private async void AddLA()
    {
        newLA = new LayoutAssign
        {
            IdServer = servers.Keys.First(),
            IdSection = 0,
            IdQslayout = this.IdQslayout,
            IdLayoutdefinition = this.IdLayoutdefinition,
            RefererRequired = false
        };

        layoutAssigns.Add(newLA);
        selectedSection = null;
        await Task.Delay(300);
        await InvokeAsync(() =>
        {
            assignTable.SetEditingItem(newLA);
            StateHasChanged();
        });

        await js.InvokeVoidAsync("scrollToElementId", "editRow");
    }

    private async Task<Section> GetSection(int id)
    {
        try
        {
            return await Http.GetFromJsonAsync<Section>($"api/dblist/section/{id}");
        }
        catch
        {
            return new Section
            {
                IdSection = id,
                Name = "!Invalid ID"
            };
        }
    }

    private async Task<IEnumerable<Section>> SearchSection(string value)
    {         
        if (string.IsNullOrEmpty(value))
            return sections.Values.Where(s => !s.Del).OrderBy(s => s.Name);
        
        return await Http.GetFromJsonAsync<Section[]>($"api/dblist/sections?search={value}");
    }

    private async void RowClicked(TableRowClickEventArgs<LayoutAssign> p)
    {
        await Task.Delay(300);
        await js.InvokeVoidAsync("focusAt", p.MouseEventArgs.ClientX, p.MouseEventArgs.ClientY + 5);
    }
}