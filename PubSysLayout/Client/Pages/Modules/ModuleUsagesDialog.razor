@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager uriHelper
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@using PubSysLayout.Shared.Model

<MudDialog DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.DashboardCustomize" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 300px; overflow-y: scroll">
        @if (moduleUsages == null)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else
        {
            <MudList Clickable="true" SelectedItem="null">
                @foreach (var mu in moduleUsages)
                {
                    <MudListItem Text='@($"({mu.IdModuleusage}) {mu.IdLayoutdefinitionNavigation.Name}/{mu.IdSpotNavigation.Name}")' Icon="@Icons.Material.Filled.ArrowRightAlt" OnClick='() => uriHelper.NavigateTo($"layoutdefinitions/edit/{mu.IdLayoutdefinition}?id_moduleusage={mu.IdModuleusage}")' />
                }
            </MudList>
        }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close" Color="Color.Primary">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int IdModule { get; set; }

    private ModuleUsage[] moduleUsages;

    protected async override Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task LoadData()
    {
        moduleUsages = await Http.GetFromJsonAsync<ModuleUsage[]>($"api/moduleusages?id_module={IdModule}");
    }

    void Close() => MudDialog.Close(DialogResult.Ok(true));
}
