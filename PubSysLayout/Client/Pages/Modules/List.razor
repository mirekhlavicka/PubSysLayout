@page "/modules"
@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@inject NavigationManager uriHelper
@inject IDialogService DialogService
@inject CurrentDB currentDB
@inject Clipboard clipboard

@using PubSysLayout.Shared.Model

<PageTitle>@currentDB.Current – Modules</PageTitle>

@if (modules == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <MudTooltip Text="Add new module">
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5" OnClick="@(()=> AddModule())" Disabled="@(newModule !=null || beforeEditModule != null)"/>
        </MudTooltip>
        <MudTooltip Text="Paste module">
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ContentPaste" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5 ml-3" OnClick="@(()=> {AddModule(clipboard.Content as Module); clipboard.Content = null; })" Disabled="@(!(clipboard.Content is Module) || newModule !=null || beforeEditModule != null)"/>
        </MudTooltip>
        <MudTooltip Text="Delete selected modules">
            <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5 ml-3" OnClick="DeleteSelected" Disabled="@(selectedItems?.Count == 0 || newModule !=null || beforeEditModule != null)"/>
        </MudTooltip>

        <MudTableFix @ref="modulesTable" Items="modules" Hover="true" SortLabel="Sort By" AllowUnsorted="false" Elevation="5" RowsPerPage="25" FixedHeader="true" FixedFooter="true" Height="calc(100vh - 300px)" Dense="true" Filter="FilterFunc" T="Module" Virtualize="false"
            MultiSelection="true" @bind-SelectedItems="selectedItems"
            CommitEditTooltip="Commit Edit" CancelEditTooltip="Cancel Edit" RowEditPreview="Backup" RowEditCancel="ResetEdit" RowEditCommit="Committed" CanCancelEdit="true" IsEditRowSwitchingBlocked="true" OnRowClick="RowClicked" RowClassFunc="RowClassFunc">
            <ToolBarContent>
                <MudBadge Content='@($"{selectedItems.Count} / {modulesTable?.GetFilteredItemsCount()}")' Color="Color.Info" Overlap="false" Class="mt-3">
                    <MudText Typo="Typo.h6">Modules</MudText>
                </MudBadge>
                <MudSpacer />
                    @*<MudSwitch Label="Hide unused" Color="Color.Info" Checked="@hideUnused" CheckedChanged="@(async (bool b) => {hideUnused = b; await LoadData();})" Disabled="@(newModule !=null || beforeEditModule != null)" />*@                
                    <MudSwitch Label="Hide unused" Color="Color.Info" @bind-Checked="hideUnused" Disabled="@(newModule !=null || beforeEditModule != null)"/>
                    <MudSwitch Label="Hide used" Color="Color.Info" @bind-Checked="hideUsed" Disabled="@(newModule !=null || beforeEditModule != null)"/>
                <MudSpacer />
                <MudTextField DebounceInterval="300" @bind-Value="searchString" Placeholder="Search by name, path or ID" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true" ></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <col style="width:80px;" />
                <col style="width:100px;" />
                <col style="width:15%;" />
                <col />
                <col style="width:100px;" />
                <col style="width:20%;" />
                <col style="width:100px;" />
                <col style="width:180px;"/>
                <col style="width:0px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="(Module m) => m.IdModule == 0 ? 999999 :  m.IdModule" >ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy='(Module m) => m.IdModule == 0 ? "ZZZZZ" :  m.Name' >Name</MudTableSortLabel></MudTh>
                <MudTh>Path</MudTh>
                <MudTh>Active</MudTh>
                <MudTh>Cache key</MudTh>
                <MudTh>Used</MudTh>
                <MudTh/>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.IdModule</MudTd>
                <MudTd DataLabel="Name"><MudHighlighter Text="@context.Name" HighlightedText="@searchString" /></MudTd>
                <MudTd DataLabel="Path"><MudHighlighter Text="@context.DesktopSrc" HighlightedText="@searchString" /></MudTd>
                <MudTd DataLabel="Active"><MudIcon Icon="@(@context.Active ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)" Size="Size.Small" Class="mr-3 mb-n1"/></MudTd>
                <MudTd DataLabel="Cache key">@context.Qskey</MudTd>
                <MudTd DataLabel="Used"><MudIcon Icon="@(usedModules.Contains(context.IdModule ) ? Icons.Material.Outlined.CheckCircle : Icons.Material.Outlined.Circle)" Size="Size.Small" Class="mr-3 mb-n1" /></MudTd>
                <MudTd DataLabel="">
                    <div style="width:180px;">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" @onclick="@(()=>OpenModuleSettingsDialog(@context))" Color="Color.Default" Size="Size.Small" Variant="Variant.Text" Title="Module default settings"/>
                        <MudIconButton Icon="@Icons.Material.Filled.DashboardCustomize" @onclick="@(()=>OpenModuleUsagesDialog(@context))" Color="Color.Default" Size="Size.Small" Variant="Variant.Text" Title="Module usage"/>
                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" @onclick="@(()=> clipboard.Content = context)" Color="Color.Default" Size="Size.Small" Variant="Variant.Text" Title="Copy"/>
                        <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" @onclick="@(()=>DeleteModule(@context))"Size="Size.Small" Variant="Variant.Text" Title="Delete module"/>
                    </div>
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="ID">@context.IdModule<a id="editRow" style="position:relative; top: -80px" /></MudTd>
                <MudTd DataLabel="Name">                
                    <MudTextField Margin="Margin.Dense" @bind-Value="@context.Name" Required Immediate="false" DebounceInterval="200" spellcheck="false" />
                </MudTd>
                <MudTd DataLabel="Path">                
                    <MudTextField Margin="Margin.Dense" @bind-Value="@context.DesktopSrc" Required Immediate="false" DebounceInterval="200" spellcheck="false" />
                </MudTd>
                <MudTd DataLabel="Active">
                    <MudCheckBox @bind-Checked="@context.Active"></MudCheckBox>
                </MudTd>
                <MudTd DataLabel="Cache key">                
                    <MudTextField Margin="Margin.Dense" @bind-Value="@context.Qskey"  spellcheck="false" />
                </MudTd>
                <MudTd DataLabel="Used"><MudIcon Icon="@(usedModules.Contains(context.IdModule ) ? Icons.Material.Outlined.CheckCircle : Icons.Material.Outlined.Circle)" Size="Size.Small" Class="mr-3 mb-n1" /></MudTd>
            </RowEditingTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{25, 100, 1000}" />
            </PagerContent>
        </MudTableFix>
    </MudContainer>}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "id_module")]
    public int IdModuleEdit { get; set; } = 0;

    private List<Module> modules;
    private HashSet<int> usedModules;
    private string searchString = "";

    private bool hideUnused = true;
    private bool hideUsed = false;


    private Module beforeEditModule = null;
    private Module newModule = null;
    private int justAddedID = 0;

    MudTable<Module> modulesTable;

    private HashSet<Module> selectedItems = new HashSet<Module>();

    protected override async Task OnInitializedAsync()
    {
        if (currentDB.Current is null)
        {
            return;
        }

        await LoadData();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (IdModuleEdit != 0 && modules != null && modulesTable != null)
        {
            await InvokeAsync(() =>
            {
                modulesTable.NavigateTo((int)System.Math.Floor((double)(/*modules.OrderBy(m => m.IdModule)*/modulesTable.FilteredItems.TakeWhile(m => m.IdModule != IdModuleEdit).Count()) / modulesTable.RowsPerPage));
                var m = modules.SingleOrDefault(m => m.IdModule == IdModuleEdit);
                if (m != null)
                {
                    modulesTable.SetEditingItem(m);
                    higlightEdit = true;
                    Backup(m);
                    higlightEdit = false;
                    StateHasChanged();
                }
                IdModuleEdit = 0;
            });

            await Task.Delay(300);
            await js.InvokeVoidAsync("scrollToElementId", "editRow");
        }
    }

    protected async Task LoadData()
    {
        usedModules = (await Http.GetFromJsonAsync<int[]>("api/moduleusages/modules")).ToHashSet();
        modules = await Http.GetFromJsonAsync<List<Module>>($"api/modules?hideUnused={false/*hideUnused*/}");
        selectedItems.Clear();
    }

    private bool FilterFunc(Module m)
    {
        if (m.IdModule == 0 || m.IdModule == justAddedID)
        {
            return true;       
        }

        if (hideUnused && !usedModules.Contains(m.IdModule))
        {
            return false;
        }

        if (hideUsed && usedModules.Contains(m.IdModule))
        {
            return false;
        }

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (m.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (m.DesktopSrc.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if(m.IdModule.ToString() == searchString)
            return true;

        return false;
    }

    private void OpenModuleSettingsDialog(Module m)
    {
        var options = new DialogOptions { 
            MaxWidth = MaxWidth.Medium, 
            CloseButton = true
        };

        var parameters = new DialogParameters();

        parameters.Add("IdModule", m.IdModule);
        parameters.Add("IdModuleUsage", 0);

        DialogService.Show<Modules.ModuleSettingsDialog>($"{m.Name} default settings", parameters, options);
    }

    private void OpenModuleUsagesDialog(Module m)
    {
        var options = new DialogOptions { 
            MaxWidth = MaxWidth.Small, 
            CloseButton = true
        };

        var parameters = new DialogParameters();

        parameters.Add("IdModule", m.IdModule);

        DialogService.Show<Modules.ModuleUsagesDialog>($"{m.Name} usage in layout definitions", parameters, options);
    }

    private bool higlightEdit = false; 
    private void Backup(object element)
    {
        Module m = element as Module;

        beforeEditModule  = new()
            {
                IdModule = higlightEdit ? m.IdModule : 0,
                Name = m.Name,
                DesktopSrc = m.DesktopSrc,
                Description = m.Description,
                Qskey = m.Qskey,
                Active = m.Active,
                Admin = m.Admin,
                MobileSrc = m.MobileSrc                
            };

        StateHasChanged();
    }

    private void ResetEdit(object element)
    {
        if (beforeEditModule != null)
        {
            Module m = element as Module;
            m.Name = beforeEditModule.Name;
            m.DesktopSrc = beforeEditModule.DesktopSrc;
            m.Description = beforeEditModule.Description;
            m.Qskey = beforeEditModule.Qskey;
            m.Active = beforeEditModule.Active;
            m.Admin = beforeEditModule.Admin;
            m.MobileSrc = beforeEditModule.MobileSrc;

            beforeEditModule = null;
            StateHasChanged();
        }

        if (newModule != null)
        {
            modules.Remove(newModule);
            newModule = null;
            StateHasChanged();
        }
    }

    private async void Committed(object element)
    {
        beforeEditModule = null;
        newModule = null;

        Module m = element as Module;

        if (m.IdModule != 0)
        {
            await Http.PutAsJsonAsync($"api/modules/{m.IdModule}", m);
            snackBar.Add($"Module {m.Name} saved", Severity.Success);
        }
        else
        {
            using var response = await Http.PostAsJsonAsync("api/modules", m);
            var xm = await response.Content.ReadFromJsonAsync<Module>();
            m.IdModule = xm.IdModule;
            justAddedID = m.IdModule;
            snackBar.Add($"Module  {m.Name} created", Severity.Success);
        }

        StateHasChanged();
    }

    async Task DeleteModule(Module m)
    {

        if ((await DialogService.ShowMessageBox(
            "Warning",
            $"Do you want to delete module \"{m.Name} (id = {m.IdModule})\" ?",
            yesText: "Delete!", cancelText: "Cancel") != null))
        {
            await Http.DeleteAsync($"api/modules/{m.IdModule}");
            snackBar.Add($"Module {m.IdModule} deleted", Severity.Success);
            await LoadData();
        }
    }

    async Task DeleteSelected()
    {

        if ((await DialogService.ShowMessageBox(
            "Warning",
            $"Do you want to delete selected {selectedItems.Count} moduless ?",
            yesText: "Delete!", cancelText: "Cancel") != null))
        {
            foreach (var m in selectedItems)
            {
                await Http.DeleteAsync($"api/modules/{m.IdModule}");
                snackBar.Add($"Module {m.IdModule} deleted", Severity.Success);
            }

            await LoadData();
        }
    }


    private async void AddModule(Module copy = null)
    {
        newModule = new Module
        {
            Name = copy?.Name ?? "",
            DesktopSrc = copy?.DesktopSrc ?? "",
            Description = copy?.Description ?? "",
            Qskey = copy?.Qskey ?? "",
            Active = copy?.Active ?? true,
            Admin = false,
            MobileSrc = "-"
        };

        modules.Add(newModule);

        await Task.Delay(300);

        await InvokeAsync(() =>
        {            
            if (modulesTable.Context.SortDirection == SortDirection.Ascending)
            {
                modulesTable.NavigateTo( Page.Last/*(int)System.Math.Ceiling((double)modulesTable.GetFilteredItemsCount() / modulesTable.RowsPerPage)*/);
            }
            else
            {
                modulesTable.NavigateTo(Page.First);
            }

            modulesTable.SetEditingItem(newModule);

            StateHasChanged();
        });

        await js.InvokeVoidAsync("scrollToElementId", "editRow");
    }

    private async void RowClicked(TableRowClickEventArgs<Module> p)
    {
        await Task.Delay(300);
        await js.InvokeVoidAsync("focusAt", p.MouseEventArgs.ClientX, p.MouseEventArgs.ClientY + 5);
    }

    private string RowClassFunc(Module m, int rowNumber)
    {
        if (m.IdModule == beforeEditModule?.IdModule)
        {
            return "editRow";
        }
        else
        {
            return string.Empty;
        }
    }
}
