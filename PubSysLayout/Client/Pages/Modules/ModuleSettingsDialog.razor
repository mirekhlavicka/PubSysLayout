@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager uriHelper
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject CurrentDB currentDB
@using PubSysLayout.Shared.Model

<style>
    /*.defaultSettings {
        background-color: #1E88E5 !important;
    }*/

        .defaultSettings > td {
            color: lightgray !important;
        }

            .defaultSettings > td .mud-input {
                color: gray !important;
            }
</style>

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (moduleSettings == null)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else
        {
            <MudTooltip Text="Add new setting">
                <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-1" OnClick="AddSetting" Disabled="@(newSetting !=null || beforeEditSetting != null)" />
            </MudTooltip>
            <MudTable @ref="settingsTable" Items="moduleSettings" Hover="true" SortLabel="Sort By" Elevation="0" Class="mt-4" RowsPerPage="0" FixedHeader="true" FixedFooter="true"  Dense="true" Height="500px" RowClassFunc="RowClassFunc"
                CommitEditTooltip="Commit Edit" CancelEditTooltip="Cancel Edit" RowEditPreview="Backup" RowEditCancel="ResetEdit" RowEditCommit="Committed" CanCancelEdit="true" IsEditRowSwitchingBlocked="true" OnRowClick="RowClicked" T="ModuleSetting">
                <ColGroup>
                    <col style="width:250px;" />
                    <col />
                    <col style="width:150px;" />
                    <col style="width:10px;"/>
                </ColGroup>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Value</MudTh>
                    <MudTh />
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.SettingName</MudTd>
                    <MudTd DataLabel="Value">@context.SettingValue</MudTd>
                    <MudTd DataLabel="">                            
                        <MudTooltip Text="Delete setting">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="@(()=>DeleteModuleSetting(context))" Color="Color.Secondary" Size="Size.Small" Variant="Variant.Text" Disabled="@(IdModuleUsage != context.IdModuleusage)"></MudIconButton>
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Name">
                        <a id="editRow"/>
                        <MudTextField Margin="Margin.Dense" @bind-Value="@context.SettingName" Required Validation="@((string s) => CheckName(s, context))" Immediate="true" spellcheck="false" />
                    </MudTd>
                    <MudTd DataLabel="Value">
                        <MudTextField Margin="Margin.Dense" @bind-Value="@context.SettingValue" spellcheck="false"/>
                    </MudTd>
                </RowEditingTemplate>
            </MudTable>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close" Color="Color.Primary">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int IdModule { get; set; }
    [Parameter] public int IdModuleUsage { get; set; }

    private List<ModuleSetting> moduleSettings;

    private ModuleSetting beforeEditSetting = null;
    private ModuleSetting newSetting = null;

    MudTable<ModuleSetting> settingsTable;

    protected async override Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task LoadData()
    {
        moduleSettings = await Http.GetFromJsonAsync<List<ModuleSetting>>($"api/modulesettings?id_module={IdModule}&id_moduleusage={IdModuleUsage}");
    }

    void Close() => MudDialog.Close(DialogResult.Ok(true));

    private string RowClassFunc(ModuleSetting ms, int rowNumber)
    {
        if (IdModuleUsage != 0 && ms.IdModuleusage == 0)
        {
            return "defaultSettings";
        }
        else
        {
            return string.Empty;
        }
    }

    private void Backup(object element)
    {
        ModuleSetting s = element as ModuleSetting;

        beforeEditSetting = new()
            {
                SettingName = s.SettingName,
                SettingValue = s.SettingValue
            };

        StateHasChanged();
    }

    private void ResetEdit(object element)
    {
        if (beforeEditSetting != null)
        {
            ModuleSetting s = element as ModuleSetting;
            s.SettingName = beforeEditSetting.SettingName;
            s.SettingValue = beforeEditSetting.SettingValue;
            beforeEditSetting = null;
            StateHasChanged();
        }

        if (newSetting != null)
        {
            moduleSettings.Remove(newSetting);
            newSetting = null;
            StateHasChanged();
        }
    }

    private async void Committed(object element)
    {
        beforeEditSetting = null;
        newSetting = null;

        ModuleSetting ms = element as ModuleSetting;

        if (ms.IdSetting != 0 && ms.IdModuleusage == IdModuleUsage)
        {
            await Http.PutAsJsonAsync($"api/modulesettings/{ms.IdSetting}", ms);
            snackBar.Add($"Module setting {ms.SettingName} saved", Severity.Success);
        }
        else if (ms.IdSetting != 0 && ms.IdModuleusage != IdModuleUsage)
        {
            ms.IdModuleusage = IdModuleUsage;
            ms.IdSetting = 0;
            using var response = await Http.PostAsJsonAsync("api/modulesettings", ms);
            var xms = await response.Content.ReadFromJsonAsync<ModuleSetting>();
            ms.IdSetting = xms.IdSetting;
            snackBar.Add($"Module setting {ms.SettingName} rewritten for this usage", Severity.Success);
        }
        else if (ms.IdSetting == 0)
        {
            using var response = await Http.PostAsJsonAsync("api/modulesettings", ms);
            var xms = await response.Content.ReadFromJsonAsync<ModuleSetting>();
            ms.IdSetting = xms.IdSetting;
            snackBar.Add($"Module setting {ms.SettingName} created", Severity.Success);
        }

        StateHasChanged();
    }

    private async Task DeleteModuleSetting(ModuleSetting ms)
    {
        if ((await DialogService.ShowMessageBox(
            "Warning",
            $"Do you want to delete setting {ms.SettingName} ?",
            yesText: "Delete!", cancelText: "Cancel") != null))
        {
            await Http.DeleteAsync($"api/modulesettings/{ms.IdSetting}");
            snackBar.Add($"Setting {ms.SettingName} deleted.", Severity.Success);
            await LoadData();
        }
    }

    private async void AddSetting()
    {
        newSetting = new ModuleSetting
        {
            IdModule = IdModule,
            IdModuleusage = IdModuleUsage,
            SettingValue = ""
        };

        moduleSettings.Add(newSetting);

        await Task.Delay(300);

        await InvokeAsync(() =>
        {
            settingsTable.SetEditingItem(newSetting);
            StateHasChanged();
        });

        await js.InvokeVoidAsync("scrollToElementId", "editRow");
    }

    private string CheckName(string name, ModuleSetting current)
    {
        if (moduleSettings.Where(ms => ms != current).Any(ms =>  string.Equals(ms.SettingName,name, StringComparison.InvariantCultureIgnoreCase)))
        {
            return "Setting name already exists";
        }

        return null;
    }

    private async void RowClicked(TableRowClickEventArgs<ModuleSetting> p)
    {
        await Task.Delay(300);
        await js.InvokeVoidAsync("focusAt", p.MouseEventArgs.ClientX, p.MouseEventArgs.ClientY + 5);
    }
}