@page "/sqlsp"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrator")]

@using PubSysLayout.Shared.SQLSP;

@inject HttpClient Http
@inject LocalStorage localStorage
@inject PubSysLayout.Client.Pages.Code.CodeEdit codeEdit
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService


<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td, .selected .mud-icon-default {
            color: white !important;
        }
</style>

<PageTitle>Stored procedures – @database</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-8">
    <MudTableFix @ref="mudTable" ServerData="@(new Func<TableState, Task<TableData<SPInfo>>>(ServerReload))"
                 Dense="true" Hover="true" SortLabel="Sort By" AllowUnsorted="false" Elevation="5" RowsPerPage="0" FixedHeader="true" FixedFooter="true" Height="calc(100vh - 190px)"
                 RowClassFunc="@SelectedRowClassFunc"
                 RowClass="cursor-pointer" OnRowClick="RowClicked" Virtualize="false" T="SPInfo">
        <ToolBarContent>
            <MudBadge Content='@($"{totalItems}")' Color="Color.Info" Overlap="false" Class="mt-3">
                <MudText Typo="Typo.h6">Stored procedures</MudText>
            </MudBadge>
            <MudSpacer />
            <MudAutocomplete T="string" Label="Database" AnchorOrigin="Origin.BottomCenter" FullWidth="false" Variant="Variant.Outlined" Class="mr-6" Value="database" ValueChanged="SetDB" SearchFunc="@SearchDB" Clearable="true" spellcheck="false" MaxItems="100" />
            <MudSpacer />
            <MudSwitch Label="Search in code" Color="Color.Info" T="bool" Checked="@searchInCode" CheckedChanged='@((b) => OnSearch(searchString, b))' Class="mt-2" />
            <MudTextField T="string" Value="searchString" ValueChanged="@(s => OnSearch(s, searchInCode))" DebounceInterval="500" Placeholder="Type to search" Variant="Variant.Outlined" Margin="Margin.Normal" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-3" Clearable="true" AutoFocus="true" spellcheck="false"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="Name" T="SPInfo" InitialDirection="SortDirection.Ascending">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Create date" T="SPInfo">Create date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Modify date" T="SPInfo">Modify date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Type" T="SPInfo">Type</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name"><MudHighlighter Text="@context.Name" HighlightedText="@searchString" /></MudTd>
            <MudTd DataLabel="Create date">@context.CreateDate</MudTd>
            <MudTd DataLabel="Modify date">@context.ModifyDate</MudTd>
            <MudTd DataLabel="Type">@context.Type</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>@(searchString == null || searchString.Length < 3 ? "Type at least 3 characters" : "No matching name found")</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
    </MudTableFix>
</MudContainer>

    @code {
    MudTable<SPInfo> mudTable;
    private string[] dbList = { };
    private string database = "";

    private List<SPInfo> items;
    private int totalItems;

    private string searchString = null;
    private bool searchInCode = false;
    private string lastEditName = null;

    protected override async Task OnInitializedAsync()
    {
        dbList = await Http.GetFromJsonAsync<string[]>("api/sqlquery/dblist");

        if (String.IsNullOrEmpty(database))
        {
            database = await localStorage.GetAsync<string>("SQLSP_currentDB");
            if (String.IsNullOrEmpty(database))
            {
                database = dbList.FirstOrDefault();
            }
        }

        searchString = await localStorage.GetAsync<string>("SQLSP_searchString");
        searchInCode = await localStorage.GetAsync<bool>("SQLSP_searchInCode");
        await mudTable.ReloadServerData();
    }

    private async void RowClicked(TableRowClickEventArgs<SPInfo> i)
    {
        await codeEdit.EditSQL(database, i.Item.Name, await Http.GetStringAsync($"api/sqlsp/objectdefinition?database={database}&object_id={i.Item.ObjectId}"), Save);
        lastEditName = i.Item.Name;
    }

    private async Task<bool> Save(string code, string title)
    {
        using var response = await Http.PutAsJsonAsync($"api/sqlsp", new SPInfo { Database = database, Code = code });

        if (!response.IsSuccessStatusCode)
        {
            var msg = await response.Content.ReadAsStringAsync();
            await DialogService.ShowMessageBox("Error", msg);
            return false;
        }
        else
        {
            snackBar.Add($"{title} updated", Severity.Success);
            return true;
        }
    }

    protected async Task SaveToLocalStorage()
    {
        await localStorage.SetAsync("SQLSP_currentDB", database);
        await localStorage.SetAsync("SQLSP_searchString", searchString);
        await localStorage.SetAsync("SQLSP_searchInCode", searchInCode);
    }


    private string SelectedRowClassFunc(SPInfo element, int rowNumber)
    {
        if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private async Task<TableData<SPInfo>> ServerReload(TableState state)
    {
        if (String.IsNullOrEmpty(searchString) || String.IsNullOrEmpty(database) || searchString.Length < 3)
        {
            return new TableData<SPInfo>() { TotalItems = 0, Items = new SPInfo[] { } };
        }

        IEnumerable<SPInfo> data = await Http.GetFromJsonAsync<List<SPInfo>>($"api/sqlsp?database={database}&search={searchString}&incode={searchInCode}");

        switch (state.SortLabel)
        {
            case "Name":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "Create date":
                data = data.OrderByDirection(state.SortDirection, o => o.CreateDate);
                break;
            case "Modify date":
                data = data.OrderByDirection(state.SortDirection, o => o.ModifyDate);
                break;
            case "Type":
                data = data.OrderByDirection(state.SortDirection, o => o.Type);
                break;
        }

        items = data.ToList();
        totalItems = items.Count();

        return new TableData<SPInfo>() { TotalItems = totalItems, Items = items };
    }

    private async Task OnSearch(string text, bool inCode)
    {
        searchString = text;
        searchInCode = inCode;
        await mudTable.ReloadServerData();
        await SaveToLocalStorage();
    }

    private async Task SetDB(string db)
    {
        database = db;
        await mudTable.ReloadServerData();
        if (!String.IsNullOrEmpty(lastEditName))
        {
                mudTable.SelectedItem = items.FirstOrDefault( sp => sp.Name == lastEditName);
        }
        await SaveToLocalStorage();
    }

    private async Task<IEnumerable<string>> SearchDB(string value)
    {
        if (string.IsNullOrEmpty(value))
            return dbList;
        return dbList.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}