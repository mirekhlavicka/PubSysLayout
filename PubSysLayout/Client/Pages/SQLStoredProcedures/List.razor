@page "/sqlsp"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrator")]

@using PubSysLayout.Shared.SQLSP;

@inject HttpClient Http
@inject LocalStorage localStorage
@inject PubSysLayout.Client.Pages.Code.CodeEdit codeEdit
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService


<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td, .selected .mud-icon-default {
            color: white !important;
        }
</style>

<PageTitle>Stored procedures – @database</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-8">
    <MudTableFix @ref="mudTable" ServerData="@(new Func<TableState, Task<TableData<SPInfo>>>(ServerReload))"
                 Dense="true" Hover="true" SortLabel="Sort By" AllowUnsorted="false" Elevation="5" RowsPerPage="0" FixedHeader="true" FixedFooter="true" Height="calc(100vh - 190px)"
                 RowClassFunc="@SelectedRowClassFunc"
                 RowClass="cursor-pointer" OnRowClick="RowClicked" Virtualize="false" T="SPInfo">
        <ToolBarContent>
            <MudBadge Content='@($"{totalItems}")' Color="Color.Info" Overlap="false" Class="mt-3">
                <MudText Typo="Typo.h6">Stored procedures</MudText>
            </MudBadge>
            <MudSpacer />
            <MudSelect T="string" Label="Database" AnchorOrigin="Origin.BottomCenter" FullWidth="false" Variant="Variant.Outlined" Class="mr-6" Value="database" ValueChanged="SetDB">
                @foreach (string db in dbList)
                {
                    <MudSelectItem Value="@db">@db</MudSelectItem>
                }
            </MudSelect>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" DebounceInterval="500" Placeholder="Type to search" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true" spellcheck="false"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="Name" T="SPInfo" InitialDirection="SortDirection.Ascending">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Create date" T="SPInfo">Create date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Modify date" T="SPInfo">Modify date</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name"><MudHighlighter Text="@context.Name" HighlightedText="@searchString" /></MudTd>
            <MudTd DataLabel="Create date">@context.CreateDate</MudTd>
            <MudTd DataLabel="Modify date">@context.ModifyDate</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        @*    <PagerContent>
        <MudTablePager />
        </PagerContent>*@
    </MudTableFix>
</MudContainer>

@code {
    MudTable<SPInfo> mudTable;
    private string[] dbList = { };
    private string database = "";

    private List<SPInfo> items;

    private int totalItems;
    private string searchString = null;
    private string lastEditName = null;


    protected override async Task OnInitializedAsync()
    {
        dbList = await Http.GetFromJsonAsync<string[]>("api/sqlquery/dblist");

        /*if (!String.IsNullOrEmpty(database))
            {
            database = dbList.FirstOrDefault(s => String.Equals(s, database, StringComparison.OrdinalIgnoreCase));
        }*/

        if (String.IsNullOrEmpty(database))
        {
            database = await localStorage.GetAsync<string>("SQLQuery_currentDB");
            if (String.IsNullOrEmpty(database))
            {
                database = await Http.GetStringAsync("api/sqlquery/defaultdb");
            }
        }
    }

    private async void RowClicked(TableRowClickEventArgs<SPInfo> i)
    {
        await codeEdit.EditSQL(database, i.Item.Name, await Http.GetStringAsync($"api/sqlsp/objectdefinition?database={database}&object_id={i.Item.ObjectId}"), Save);
        lastEditName = i.Item.Name;
    }

    private async Task<bool> Save(string code, string title)
    {
        using var response = await Http.PutAsJsonAsync($"api/sqlsp", new SPInfo { Database = database, Code = code });

        if (!response.IsSuccessStatusCode)
        {
            var msg = await response.Content.ReadAsStringAsync();
            await DialogService.ShowMessageBox("Error", msg);
            return false;
        }
        else
        {
            snackBar.Add($"{title} updated", Severity.Success);
            return true;
        }
    }

    private string SelectedRowClassFunc(SPInfo element, int rowNumber)
    {
        if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private async Task<TableData<SPInfo>> ServerReload(TableState state)
    {
        if (String.IsNullOrEmpty(searchString) || searchString.Length < 3)
        {
            return new TableData<SPInfo>() { TotalItems = 0, Items = new SPInfo[] { } };
        }

        IEnumerable<SPInfo> data = await Http.GetFromJsonAsync<List<SPInfo>>($"api/sqlsp?database={database}&search={searchString}");

        switch (state.SortLabel)
        {
            case "Name":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "Create date":
                data = data.OrderByDirection(state.SortDirection, o => o.CreateDate);
                break;
            case "Modify date":
                data = data.OrderByDirection(state.SortDirection, o => o.ModifyDate);
                break;
        }

        totalItems = data.Count();
        items = data/*.Skip(state.Page * state.PageSize).Take(state.PageSize)*/.ToList();
        return new TableData<SPInfo>() { TotalItems = totalItems, Items = items };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        mudTable.ReloadServerData();
    }

    private async Task SetDB(string db)
    {
        database = db;
        await mudTable.ReloadServerData();
        if (!String.IsNullOrEmpty(lastEditName))
        {
                mudTable.SelectedItem = items.FirstOrDefault( sp => sp.Name == lastEditName);
        }
        StateHasChanged();
    }
}