@page "/sqlquery"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@using System.Net.Http.Json
@using System.Text.Json.Serialization;
@using System.Text.Json;
@using PubSysLayout.Shared.SQLQuery;

@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@inject LocalStorage localStorage
@inject NavigationManager uriHelper
@inject IDialogService DialogService
@inject Clipboard clipboard

<style>
    .valTD
    {
        max-width: 400px;
        overflow-x: hidden;
        white-space: nowrap;
        position: relative
    }

    .valTD .btnMore {
        display: none;
        position: absolute;
        z-index:100;
        right:2px;
        top:7px;
        width:40px;
        height:20px;
        border-radius: 4px;
        background-color: #e0e0e0;
        padding-left:14px;
        cursor:pointer;
    }

    .valTD:hover .btnMore {
        display: block
    }

    .btnMore:hover {
        background-color: #b0b0b0;
    }

    .mud-table-dense * .mud-table-row .mud-table-cell {
        padding-inline-end: 5px;
    }

    .selected {
        background-color: #7dc2ff !important;
    }

        .selected > td, .selected .mud-icon-default {
            color: white !important;
        }
</style>

<PageTitle>SQL query – @Database</PageTitle>

<MudTabs Elevation="5" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="tabs" KeepPanelsAlive="true" @onclick="() => flagsFilterOpened = false " ActivePanelIndexChanged="(index) => {if(mudTable != null && !flagsFilterOpened){ mudTable.StopRender = (index == 0);}}">
    <MudTabPanel Text="Query" Icon="@Icons.Material.Filled.Build">
        <div class="d-flex mb-4">
            <div class="d-flex" style="max-width:600px;flex-grow:3">
                <MudAutocomplete T="string" Label="Database" AnchorOrigin="Origin.BottomCenter" @bind-Value="Database" FullWidth="false" Variant="Variant.Outlined" Class="mr-6" SearchFunc="@SearchDB" Clearable="true" spellcheck="false" MaxItems="100" />
                <MudFab OnClick="async () => await LoadData()" StartIcon="@Icons.Material.Filled.PlayArrow" Color="Color.Default" IconColor="Color.Secondary" IconSize="Size.Large" Size="Size.Large" Label="Run&nbsp;" DisableElevation="true" accesskey="r" Style="margin-top:10px"></MudFab>
                <MudSwitch @bind-Checked="@allowUpdate" Color="Color.Primary" Class="mt-3 ml-3" Title="Updatable results" />
            </div>
            <MudSpacer />
            <MudFab OnClick="async () => await ClearQuery()" StartIcon="@Icons.Material.Filled.Clear" Color="Color.Default" IconColor="Color.Secondary" IconSize="Size.Medium" Size="Size.Medium" DisableElevation="true" Style="margin-top:10px" Class="mr-2" Title="Clear query"></MudFab>
            <MudFab OnClick="async () => await BuildQuery()" StartIcon="@Icons.Material.Filled.AutoFixHigh" Color="Color.Default" IconColor="Color.Primary" IconSize="Size.Medium" Size="Size.Medium" DisableElevation="true" Style="margin-top:10px" Title="Query builder"></MudFab>
            <MudSpacer />
            <MudTextField @bind-Value="favorite_name" Label="Save query to favorites" Variant="Variant.Text" Immediate="true"></MudTextField>
            <MudFab Icon="@Icons.Material.Filled.Save" Size="Size.Small" OnClick="AddToFavorites" IconColor="Color.Primary" DisableElevation="true" Class="ml-2 mt-3" Title="Save to favorites" Disabled="@(String.IsNullOrWhiteSpace(favorite_name))"></MudFab>
            <MudFab Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="RemoveFromFavorites" IconColor="Color.Secondary" DisableElevation="true" Class="ml-2 mt-3 mr-10" Title="Remove from favorites" Disabled="@(String.IsNullOrWhiteSpace(favorite_name))"></MudFab>
            <MudMenu Label="Favorites" Dense="true" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.StarBorder" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Color="Color.Default" IconColor="Color.Primary" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Class="ml-auto">
                @foreach (var item in favorites.OrderBy(i => i.Key))
                {
                    <MudMenuItem OnClick="@(() => LoadFavoriteSQL(item.Value, item.Key))" OnTouch="@(() => LoadFavoriteSQL(item.Value, item.Key))">@item.Key</MudMenuItem>
                }
            </MudMenu>
        </div>
        <MudDivider />
        <textarea @ref="textarea" id="taSQL" name="taSQL" style="display:none" />
        <div class="d-flex justify-center">
            <MudSwitch Checked="lineWrapping" CheckedChanged="@(async (ch) => {lineWrapping = ch; await js.InvokeVoidAsync("codemirror.setOption", "taSQL", "lineWrapping", lineWrapping); })" Color="Color.Primary" T="bool" Label="Line wrapping" />
        </div>
    </MudTabPanel>
    <MudTabPanel Text="Results" Icon="@Icons.Material.Filled.Dataset">
        @if (queryResult != null && queryResult.Columns.Length > 0)
        {
            <MudTableFix @ref="mudTable" Items="@queryResult.Rows" RowsPerPage="50" SortLabel="Sort By" AllowUnsorted="true" Virtualize="false"
                  Hover="true" FixedHeader="true" FixedFooter="true" HorizontalScrollbar="true" Dense="true" Bordered="true" Striped="true"
                  Height="calc(100vh - 323px)" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" Elevation="2"
                  Filter="new Func<object[],bool>(FilterFunc)"
                  RowClassFunc="@SelectedRowClassFunc"  
                  T="object[]">
                <ToolBarContent>
                    <MudTooltip Text="Copy tabular data to clipboard">
                        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Medium" IconSize="Size.Medium" Class="mt-4 mb-4 ml-3" OnClick='async () => await CopyToClipboard(GetTableText(), "Tabular data was copied to clipboard")' Disabled="@(queryResult == null || queryResult.Columns.Length == 0)" />
                    </MudTooltip>
                    <MudTooltip Text="Save query and create a shareable link">
                        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Share" Size="Size.Medium" IconSize="Size.Medium" Class="mt-4 mb-4 ml-3" OnClick='async () => await SaveSQL(true)' Disabled="@(String.IsNullOrWhiteSpace(SQL))" />
                    </MudTooltip>
                    @if (!String.IsNullOrEmpty(queryResult.TableName))
                    {
                        <MudSpacer />
                        <MudTooltip Text="Add new row">
                            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" Class="mt-4 mb-4 ml-3" OnClick='@(()=>OpenEditRowDialog(null))' />
                        </MudTooltip>
                        <MudTooltip Text="Paste row">
                            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ContentPaste" Size="Size.Medium" IconSize="Size.Medium" Class="mt-4 mb-4 ml-3" OnClick="@(async ()=> {await OpenEditRowDialog(clipboard.Content as object[], true); })" Disabled="@(!(clipboard.Content is object[]) )" />
                        </MudTooltip>
                    }
                    <MudSpacer />
                    <div class="d-flex">
                    @if (flagsFilter.Count > 0)
                    {
                        <div class="d-flex" style="width:130px; padding-bottom: 2px" @onclick:stopPropagation="true">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => flagsFilterOpened = !flagsFilterOpened)" EndIcon="@(flagsFilterOpened ? Icons.Material.Filled.ArrowDropUp : Icons.Material.Filled.ArrowDropDown)">Filter</MudButton>
                            <MudPopover Open="flagsFilterOpened" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                                <MudPaper Outlined="true" Class="px-4 py-4" MinWidth="200px">
                                    @foreach (var fi in flagsFilter.Keys)
                                    {
                                        <MudCheckBox @bind-Checked="flagsFilter[fi]" Color="@Color.Secondary" TriState="true">@queryResult.Columns[fi].Name</MudCheckBox>
                                    }
                                    <MudButton OnClick="@(() => { foreach(var f in flagsFilter){ flagsFilter[f.Key] = null;} })">Reset</MudButton>
                                </MudPaper>
                            </MudPopover>
                        </div>
                    }
                    <MudTextField DebounceInterval="300" @bind-Value="searchString" Placeholder="Search by text or ID" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true" Style="width:350px"></MudTextField>
                    </div>
                </ToolBarContent>
                <HeaderContent>
                    @for (int i = 0; i < queryResult.Columns.Length; i++)
                    {
                        int p = i; //Intermediate counter
                        <MudTh>
                            <MudTableSortLabel InitialDirection="SortDirection.None" SortBy="new Func<object[], object>(row => row[p])">
                                @(queryResult.Columns[p].Name)
                            </MudTableSortLabel>
                        </MudTh>
                    }
                    <MudTh />
                </HeaderContent>
                <RowTemplate>
                    @foreach (var (val, index) in context.Select(((val, index) => (val, index))))
                    {
                        <MudTd Class="valTD">
                            @if (val is String && ((string)val).StartsWith("http"))
                            {
                                <a href="@val" title="@val" target="_blank"><MudIcon Icon="@Icons.Material.Filled.Forward" Color="Color.Primary" Size="Size.Small" Class="mr-3 mb-n1" /></a>
                            }
                            else if (val is String)
                            {
                                if (!String.IsNullOrEmpty(searchString))
                                {
                                    <MudHighlighter Text="@(val.ToString())" HighlightedText="@searchString" />
                                }
                                else
                                {
                                    @val
                                }
                                @if (((string)val).Length > 50)
                                {
                                    <div class="btnMore" title="@val" @onclick="async () => { mudTable.StopRender = true; showMoreText = val.ToString(); showMore = true; await Task.Delay(300); mudTable.StopRender =false; await focusShowMoreDialog.FocusAsync();}">...</div>
                                }
                            }
                            else if (val is Boolean)
                            {
                                <MudIcon Icon="@((bool)val ? Icons.Material.Outlined.CheckCircle : Icons.Material.Outlined.Circle)" Size="Size.Small" Class="mr-3 mb-n1" />
                            }
                            else
                            {
                                @Format(val, index)
                            }
                        </MudTd>
                    }
                    <MudTd DataLabel="" Class="valTD">
                        @if(!String.IsNullOrEmpty(queryResult.TableName))
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="@(()=>OpenEditRowDialog(@context))" Color="Color.Default" Size="Size.Small" Variant="Variant.Text" Title="Edit row" />
                            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" @onclick="@(()=> clipboard.Content = context)" Color="Color.Default" Size="Size.Small" Variant="Variant.Text" Title="Copy row" />
                        }
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{50, 100, 200, 500, 1000}" />
                </PagerContent>
            </MudTableFix>
            <MudDialog @bind-IsVisible="showMore" Options="showMoreDialogOptions">
                <DialogContent>
                    <MudPaper Elevation="0" Class="mt-4">
                        <MudTextField T="string" Variant="Variant.Filled"  @bind-Value="showMoreText" Lines="25" AutoFocus="false" ReadOnly="true" />
                    </MudPaper>
                    <div class="fixed pointer-events-none" tabindex="-1" @ref="focusShowMoreDialog"></div>
                </DialogContent>
                <DialogActions>
                    <MudButton Variant="Variant.Filled" IconColor="Color.Primary" Color="Color.Default" OnClick='async () => await CopyToClipboard(showMoreText, "Text was copied to clipboard")' Class="ml-auto mr-4" StartIcon="@Icons.Material.Filled.ContentCopy">Copy to clipboard</MudButton>
                </DialogActions>
            </MudDialog>
        }
        else if (errorMsg != "")
        {
            <MudAlert Severity="Severity.Error">@errorMsg</MudAlert>
        }
    </MudTabPanel>
</MudTabs>

<MudOverlay Visible="@inProgress" DarkBackground="true" AutoClose="false" />

@code {
    private MudTableFix<object[]> mudTable;
    private MudTabs tabs;
    private ElementReference textarea;

    private string[] dbList = { };
    private string SQL = "";

    private bool lineWrapping = false;

    private Query query = null;
    private QueryResult queryResult = null;
    private string errorMsg = "No result";
    private bool inProgress = false;
    private bool allowUpdate = false;

    private string searchString = "";

    public bool flagsFilterOpened = false;
    private Dictionary<int, bool?> flagsFilter = null;

    bool showMore = false;
    string showMoreText = "";
    private DialogOptions showMoreDialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true, DisableBackdropClick = false, CloseButton = true, NoHeader = false, MaxWidth = MaxWidth.Large };
    private ElementReference focusShowMoreDialog;

    private string favorite_name = "";
    private Dictionary<string, string> favorites = new Dictionary<string, string>();

    [Parameter]
    [SupplyParameterFromQuery(Name = "db")]
    public string Database { get; set; } = null;

    [Parameter]
    [SupplyParameterFromQuery(Name = "sql")]
    public string SavedSQL_ID { get; set; } = null;
    private bool sqlFromQS = true;

    protected override async Task OnInitializedAsync()
    {
        dbList = await Http.GetFromJsonAsync<string[]>("api/sqlquery/dblist");

        if (!String.IsNullOrEmpty(Database))
        {
            Database = dbList.FirstOrDefault(s => String.Equals(s, Database, StringComparison.OrdinalIgnoreCase));
        }

        if (String.IsNullOrEmpty(Database))
        {
            Database = await localStorage.GetAsync<string>("SQLQuery_currentDB");
            if (String.IsNullOrEmpty(Database))
            {
                Database = await Http.GetStringAsync("api/sqlquery/defaultdb");
            }
        }

        if (String.IsNullOrEmpty(SavedSQL_ID))
        {
            sqlFromQS = false;
            SavedSQL_ID = await localStorage.GetAsync<string>("SQLQuery_savedSQL_ID");
        }

        favorites = await Http.GetFromJsonAsync<Dictionary<string, string>>("api/sqlquery/favorites");
        if (!String.IsNullOrEmpty(SavedSQL_ID) && favorites.Values.Contains(SavedSQL_ID))
        {
            favorite_name = favorites.Keys.FirstOrDefault(n => favorites[n] == SavedSQL_ID);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!String.IsNullOrEmpty(SavedSQL_ID) && sqlFromQS)
            {
                SQL = await Http.GetStringAsync($"api/sqlquery/savedsql?name={SavedSQL_ID}");
            }

            if (String.IsNullOrEmpty(SQL))
            {
                SQL = await localStorage.GetAsync<string>("SQLQuery_SQL");
                if (String.IsNullOrEmpty(SQL))
                {
                    SQL = await Http.GetStringAsync("api/sqlquery/defaultsql");
                }
            }
            await js.InvokeVoidAsync("codemirror.create", textarea, SQL, "100%", "calc(100vh - 330px)", "text/x-mssql");
        }
    }

    protected async Task LoadData()
    {
        inProgress = true;

        if (queryResult != null)
        {
            queryResult = null;
            StateHasChanged();
        }

        SQL = await js.InvokeAsync<string>("codemirror.getValue", "taSQL");
        try
        {
            query = new Query
            {
                Database = Database,
                SQL = SQL,
                AllowUpdate = allowUpdate
            };
            var res = (await Http.PostAsJsonAsync("api/sqlquery",query));

            if (res.IsSuccessStatusCode)
            {
                errorMsg = "";
                queryResult = await res.Content.ReadFromJsonAsync<QueryResult>();
                if (queryResult.Columns.Length == 0)
                {
                    errorMsg = "No result";
                }
                else
                {
                    ConvertJsonElements();
                    flagsFilter = queryResult.Columns.Select((c, i) => new { i, c.TypeName }).Where(c => c.TypeName == typeof(bool).ToString()).ToDictionary(c => c.i, c => (bool?)null);
                }
            }
            else
            {
                errorMsg = await res.Content.ReadAsStringAsync();
                queryResult = null;
            }
            await SaveToLocalStorage();
        }
        catch (HttpRequestException exc)
        {
            errorMsg = exc.Message;
            queryResult = null;
        }
        inProgress = false;
        tabs.ActivatePanel(1);
    }

    protected async Task SaveToLocalStorage()
    {
        await localStorage.SetAsync("SQLQuery_SQL", SQL);
        await localStorage.SetAsync("SQLQuery_currentDB", Database);
        await localStorage.SetAsync("SQLQuery_savedSQL_ID", SavedSQL_ID);
    }

    protected async Task SaveSQL(bool share)
    {
        SQL = await js.InvokeAsync<string>("codemirror.getValue", "taSQL");
        var res = (await Http.PostAsJsonAsync($"api/sqlquery/save?name={SavedSQL_ID}&readonly={share}", new Query
            {
                Database = "",
                SQL = SQL
            }));

        if (res.IsSuccessStatusCode)
        {
            SavedSQL_ID = await res.Content.ReadAsStringAsync();
            await SaveToLocalStorage();
            if (share)
            {
                string uri = uriHelper.ToAbsoluteUri($"./sqlquery?db={Database}&sql={SavedSQL_ID}").ToString();
                await CopyToClipboard(uri, $"{uri} was copied to clipboard");
            }
        }
    }

    protected async Task SaveFavorites()
    {
        await Http.PostAsJsonAsync("api/sqlquery/favorites", favorites);
    }

    protected async Task AddToFavorites()
    {
        if (!favorites.ContainsKey(favorite_name) && !String.IsNullOrEmpty(SavedSQL_ID))
        {
            string savedSQL = await Http.GetStringAsync($"api/sqlquery/savedsql?name={SavedSQL_ID}");
            string currentSQL = await js.InvokeAsync<string>("codemirror.getValue", "taSQL");
            if (savedSQL != currentSQL)
            {
                SavedSQL_ID = null;
            }
        }

        await SaveSQL(false);

        if (favorites.ContainsKey(favorite_name))
        {
            favorites[favorite_name] = SavedSQL_ID;
            snackBar.Add($"\"{favorite_name}\" was saved", Severity.Success);
        }
        else
        {
            if (favorites.Values.Contains(SavedSQL_ID))
            {
                string oldName = favorites.Keys.FirstOrDefault(n => favorites[n] == SavedSQL_ID);
                favorites.Remove(oldName);
                snackBar.Add($"\"{oldName}\" was renamed to \"{favorite_name}\"", Severity.Success);
            }
            else
            {
                snackBar.Add($"\"{favorite_name}\" was added to favorites", Severity.Success);
            }
            favorites.Add(favorite_name, SavedSQL_ID);
        }

        await SaveFavorites();
    }

    protected async Task RemoveFromFavorites()
    {
        if (favorites.ContainsKey(favorite_name))
        {
            if ((await DialogService.ShowMessageBox(
                "Warning",
                $"Do you want to remove \"{favorite_name}\" from favorites ?",
                yesText: "Remove!", cancelText: "Cancel") != null))
            {
                snackBar.Add($"\"{favorite_name}\" was removed from favorites", Severity.Success);
                favorites.Remove(favorite_name);
                favorite_name = "";
                await SaveFavorites();
            }
        }
        else
        {
            snackBar.Add($"\"{favorite_name}\" was not found in favorites", Severity.Warning);
        }
    }

    protected async Task LoadFavoriteSQL(string id, string name)
    {
        SavedSQL_ID = id;
        favorite_name = name;
        SQL = await Http.GetStringAsync($"api/sqlquery/savedsql?name={SavedSQL_ID}");
        await js.InvokeAsync<string>("codemirror.setValue", "taSQL", SQL);
        queryResult = null;
        errorMsg = "No result";
        await SaveToLocalStorage();
    }

    protected async Task ClearQuery()
    {
        SavedSQL_ID = "";
        favorite_name = "";
        SQL = "";
        await js.InvokeAsync<string>("codemirror.setValue", "taSQL", SQL);
        await SaveToLocalStorage();
        queryResult = null;
        errorMsg = "No result";
    }

    protected async Task BuildQuery()
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                CloseButton = true
            };

        var parameters = new DialogParameters
            {
                ["Database"] = Database
            };

        var result = await DialogService.Show<NewQueryDialog>("Query builder", parameters, options).Result;
        if (!result.Canceled)
        {
            SavedSQL_ID = "";
            favorite_name = "";
            SQL = (string)result.Data;
            await js.InvokeAsync<string>("codemirror.setValue", "taSQL", SQL);
            await SaveToLocalStorage();
            queryResult = null;
            errorMsg = "No result";
        }
    }

    private async Task OpenEditRowDialog(object[] row, bool copy =  false)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            CloseButton = true
        };

        var parameters = new DialogParameters();

        if (copy && row != null)
        {
            if (row.Length != queryResult.Columns.Length || row.Select((v, i) => v != null && v.GetType().ToString() != queryResult.Columns[i].TypeName).Any(b => b))
            {
                await DialogService.ShowMessageBox("Error", "Incompatible row format");
                return;
            }

            query.OriginalRow = row;
            query.Row = null;
            row = null;
        }
        else
        {
            query.Row = row;
            query.OriginalRow = null;
        }

        parameters.Add("Query", query);
        parameters.Add("QueryResult", queryResult);        

        mudTable.SelectedItem = row;
        var result = await DialogService.Show<EditRowDialog>($"{Database} - {queryResult.TableName}{(row == null ? " - new row" : "")}", parameters, options).Result;
        if (!result.Canceled)
        {
            row = (object[])result.Data;
            mudTable.SelectedItem = row;
            StateHasChanged();
            if (row != null)
            {
                await Task.Delay(300);
                int pageIndex = (int)System.Math.Floor((double)(mudTable.FilteredItems.TakeWhile(r => r != row).Count()) / mudTable.RowsPerPage);
                if (pageIndex != mudTable.CurrentPage)
                {
                    mudTable.NavigateTo(pageIndex);
                    await Task.Delay(100);
                    await js.InvokeVoidAsync("scrollToElementClass", "selected");
                }
            }
            if (copy)
            {
                clipboard.Content = null;
            }
        }        
    }

    private bool FilterFunc(object[] row)
    {
        bool searchResult = false;

        if (string.IsNullOrWhiteSpace(searchString))
            searchResult = true;

        if (!searchResult && Int32.TryParse(searchString, out int num))
        {
            if (row.Any(v => (v is int) && (int)v == num))
            {
                searchResult = true;
            }
        }

        if (!searchResult && !row.Any(v => (v is string) && ((string)v).Contains(searchString, StringComparison.CurrentCultureIgnoreCase)))
        {
            return false;
        }

        return flagsFilter.Where(fv => fv.Value.HasValue).All(fv => (bool)row[fv.Key] == fv.Value);
    }

    private void ConvertJsonElements()
    {
        foreach (var row in queryResult.Rows)
        {
            for (int p = 0; p < row.Length; p++)
            {
                try
                {
                    row[p] = ((JsonElement)(row[p])).Deserialize(Type.GetType(queryResult.Columns[p].TypeName));
                }
                catch
                {
                    row[p] = null;
                }
            }
        }
    }

    private async Task CopyToClipboard(string text, string msg)
    {
        await js.InvokeVoidAsync("navigator.clipboard.writeText", text);
        snackBar.Add(msg, Severity.Success);
    }

    private string GetTableText(string divider = "\t", string qualifier = "\"")
    {
        string th = String.Join($"{qualifier}{divider}{qualifier}", queryResult.Columns.Select(c => c.Name));
        string td = String.Join($"{qualifier}\n{qualifier}", queryResult.Rows.Select(r => String.Join($"{qualifier}{divider}{qualifier}", r.Select(v => v.ToString().Replace(qualifier, $"{qualifier}{qualifier}").Replace(divider, "")))));
        return $"{qualifier}{th}{qualifier}\n{qualifier}{td}{qualifier}";
    }

    private string Format(object val, int index)
    {
        if (val == null)
        {
            return "NULL";
        }
        switch (Type.GetTypeCode(val.GetType()))
        {
            case TypeCode.Int32:
                return ((Int32)val).ToString(queryResult.Columns[index].Name.StartsWith("id_") ? "g0" : "n0");
            case TypeCode.DateTime:
                return ((DateTime)val).ToString("g");
            default:
                return val.ToString();
        }
    }

    private string SelectedRowClassFunc(object[] element, int rowNumber)
    {
        if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private async Task<IEnumerable<string>> SearchDB(string value)
    {
        if (string.IsNullOrEmpty(value))
            return dbList;
        return dbList.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}