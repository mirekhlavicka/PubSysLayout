@page "/sqlquery"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject HttpClient Http
@using System.Net.Http.Json
@using System.Text.Json.Serialization;
@using System.Text.Json;
@using System.Dynamic;
@using PubSysLayout.Shared.SQLQuery;
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@inject LocalStorage localStorage


<MudTabs Elevation="5" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="tabs" KeepPanelsAlive="true">
    <MudTabPanel Text="Query" Icon="@Icons.Material.Filled.Build">
        <div class="d-flex" style="max-width:600px;margin-bottom:10px">
            <MudSelect T="string" Label="Database" AnchorOrigin="Origin.BottomCenter" @bind-Value="database" FullWidth="false" Variant="Variant.Outlined" Class="mr-8">
                @foreach (string db in dbList)
                {
                    <MudSelectItem Value="@db">@db</MudSelectItem>
                }
            </MudSelect>
            <MudFab OnClick="async () => await LoadData()" StartIcon="@Icons.Material.Filled.PlayArrow" Color="Color.Default" IconColor="Color.Secondary" IconSize="Size.Large" Size="Size.Large" Label="Run&nbsp;" DisableElevation="true" accesskey="r" Style="margin-top:8px"></MudFab>
        </div>
        <MudDivider />
        <textarea @ref="textarea" id="taSQL" name="taSQL" style="display:none" />
    </MudTabPanel>
    <MudTabPanel Text="Results" @ref="panelResult" Icon="@Icons.Material.Filled.Dataset">
        @if (queryResult != null && queryResult.Columns.Length > 0)
        {
            <MudTable @ref="mudTable" Items="@queryResult.Rows" RowsPerPage="50" SortLabel="Sort By" AllowUnsorted="true" Virtualize="false"
                  Hover="true" FixedHeader="true" FixedFooter="true" HorizontalScrollbar="true" Dense="true" Bordered="true" Striped="true"
                  Height="calc(100vh - 323px)" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" Elevation="2"
                  Filter="new Func<object[],bool>(FilterFunc)"
                  T="object[]">
                <ToolBarContent>
                    <MudTooltip Text="Copy tabular data to clipboard">
                        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Medium" IconSize="Size.Medium" Class="mt-2 mb-2 ml-3" OnClick='async () => await CopyToClipboard(GetTableText("\t"))' Disabled="@(queryResult == null || queryResult.Columns.Length == 0)" />
                    </MudTooltip>
                    <MudSpacer />
                    <MudTextField DebounceInterval="300" @bind-Value="searchString" Placeholder="Search by text or ID" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    @for (int i = 0; i < queryResult.Columns.Length; i++)
                    {
                        int p = i; //Intermediate counter
                        <MudTh>
                            <MudTableSortLabel InitialDirection="SortDirection.None" SortBy="new Func<object[], object>(x => p < x.Length ? x[p] : null)">
                                @(queryResult.Columns[p].Name)
                            </MudTableSortLabel>
                        </MudTh>
                    }
                    <MudTh />
                </HeaderContent>
                <RowTemplate>
                    @foreach (var val in context)
                    {
                        <MudTd Style="max-width: 400px;overflow-x: hidden;white-space: nowrap" title="@val.ToString()">
                            @if (val is string)
                            {
                                <MudHighlighter Text="@(val.ToString())" HighlightedText="@searchString" />
                            }
                            else
                            {
                                @(val is DateTime ? ((DateTime)(val)).ToString("g") : val)
                            }
                        </MudTd>
                    }
                    <MudTd />
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{50, 100, 200, 500, 1000}" />
                </PagerContent>
            </MudTable>
        }
        else if (errorMsg != "")
        {
            <MudAlert Severity="Severity.Error">@errorMsg</MudAlert>
        }
    </MudTabPanel>
</MudTabs>

<MudOverlay Visible="@inProgress" DarkBackground="true" AutoClose="false" />

@code {
    MudTable<object[]> mudTable;
    MudTabs tabs;
    MudTabPanel panelResult;
    private ElementReference textarea;

    private QueryResult queryResult = null;
    private string errorMsg = "";
    private string searchString = "";
    private bool inProgress = false;
    private string[] dbList = { };
    private string database = "";
    private string SQL = "";

    protected override async Task OnInitializedAsync()
    {
        dbList = await Http.GetFromJsonAsync<string[]>("api/sqlquery/dblist");

        database = await localStorage.GetAsync<string>("SQLQuery_currentDB");

        if (String.IsNullOrEmpty(database))
        {
            database = await Http.GetStringAsync("api/sqlquery/defaultdb"); //dbList[0];
        }

        panelResult.Disabled = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //view-source:https://codemirror.net/5/mode/sql/
            //https://github.com/simonw/datasette/issues/949
            //https://stackoverflow.com/questions/20023381/codemirror-how-add-tables-to-sql-hint
            
            SQL = await localStorage.GetAsync<string>("SQLQuery_SQL");

            if (String.IsNullOrEmpty(SQL))
            {
                SQL = await Http.GetStringAsync("api/sqlquery/defaultsql");
            }
            
            await js.InvokeVoidAsync("codemirror.create", textarea, SQL, "100%", "calc(100vh - 280px)", "text/x-mssql");
        }
    }

    protected async Task LoadData()
    {
        inProgress = true;
        //if (Elements != null)
        //{
        //    Elements = null;
        //    StateHasChanged();
        //}

        SQL = await js.InvokeAsync<string>("codemirror.getValue", "taSQL");
        try
        {
            var res = (await Http.PostAsJsonAsync("api/sqlquery", new Query
                {
                    Database = database,
                    SQL = SQL
                }));

            if (res.IsSuccessStatusCode)
            {
                errorMsg = "";
                queryResult = await res.Content.ReadFromJsonAsync<QueryResult>();
                if (queryResult.Columns.Length == 0)
                {
                    errorMsg = "No result";
                }
                else
                {
                    ConvertJsonElements();
                }
            }
            else
            {
                errorMsg = await res.Content.ReadAsStringAsync();
                queryResult = null;
            }
            await localStorage.SetAsync("SQLQuery_currentDB", database);
            await localStorage.SetAsync("SQLQuery_SQL", SQL);
        }
        catch (HttpRequestException exc)
        {
            errorMsg = exc.Message;
            queryResult = null;
        }
        inProgress = false;
        panelResult.Disabled = false;
        ActivatePanel(1);
    }

    void ActivatePanel(int index)
    {
        tabs.ActivatePanel(index);
    }

    private void ConvertJsonElements()
    {
        foreach (var row in queryResult.Rows)
        {
            for (int p = 0; p < row.Length; p++)
            {
                JsonElement val = (JsonElement)(row[p]);
                if (val.ValueKind == JsonValueKind.Number)
                {
                    row[p] = val.GetDouble();
                }
                else if (val.ValueKind == JsonValueKind.String && val.TryGetDateTime(out DateTime dt))
                {
                    row[p] = dt;
                }
                else if (val.ValueKind == JsonValueKind.String)
                {
                    row[p] = val.GetString();
                }
                else
                {
                    row[p] = val.ToString();
                }
            }
        }
    }

    //private Dictionary<string, object> ExpandoJson2Dictionary(ExpandoObject src)
    //{
    //    Dictionary<string, object> res = new Dictionary<string, object>();
    //    IDictionary<string, object> srcd = src as IDictionary<string, object>;

    //    foreach (var p in srcd.Keys)
    //    {
    //        JsonElement val = (JsonElement)(srcd[p]);
    //        if (val.ValueKind == JsonValueKind.Number)
    //        {
    //            res[p] = val.GetDouble();
    //        }
    //        else if (val.ValueKind == JsonValueKind.String && val.TryGetDateTime(out DateTime dt))
    //        {
    //            res[p] = dt;
    //        }
    //        else if (val.ValueKind == JsonValueKind.String)
    //        {
    //            res[p] = val.GetString();
    //        }
    //        else
    //        {
    //            res[p] = val.ToString();
    //        }
    //    }

    //    return res;
    //}

    private bool FilterFunc(object[] i)
    {

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (Double.TryParse(searchString, out double num))
        {
            if (i.Any(v => (v is double) && (double)v == num))
            {
                return true;
            }
        }

        if (i.Any(v => (v is string) && ((string)v).Contains(searchString, StringComparison.CurrentCultureIgnoreCase)))
        {
            return true;
        }

        return false;
    }

    private async Task CopyToClipboard(string text)
    {
        snackBar.Add($"Tabular data was copied to clipboard", Severity.Success);
        await js.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private string GetTableText(string divider)
    {
        string th = String.Join(divider, queryResult.Columns.Select(c => c.Name));
        string td = String.Join("\"\n\"", queryResult.Rows.Select(r => String.Join($"\"{divider}\"", r)));
        return $"{th}\n\"{td}";
    }
}