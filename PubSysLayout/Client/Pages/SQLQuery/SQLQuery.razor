@page "/sqlquery"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@using System.Net.Http.Json
@using System.Text.Json.Serialization;
@using System.Text.Json;
@using PubSysLayout.Shared.SQLQuery;

@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@inject LocalStorage localStorage
@inject NavigationManager uriHelper
@inject IDialogService DialogService


<style>
    .valTD
    {
        max-width: 400px;
        overflow-x: hidden;
        white-space: nowrap;
        position: relative
    }

    .valTD .btnMore {
        display: none;
        position: absolute;
        z-index:100;
        right:2px;
        top:7px;
        width:40px;
        height:20px;
        border-radius: 4px;
        background-color: #e0e0e0;
        padding-left:14px;
        cursor:pointer;
    }

    .valTD:hover .btnMore {
        display: block
    }

    .btnMore:hover {
        background-color: #b0b0b0;
    }
</style>

<PageTitle>SQL query – @database</PageTitle>

<MudTabs Elevation="5" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="tabs" KeepPanelsAlive="true" @onclick="() => flagsFilterOpened = false ">
    <MudTabPanel Text="Query" Icon="@Icons.Material.Filled.Build">
        <div class="d-flex" style="max-width:600px;margin-bottom:10px">
            <MudSelect T="string" Label="Database" AnchorOrigin="Origin.BottomCenter" @bind-Value="database" FullWidth="false" Variant="Variant.Outlined" Class="mr-6">
                @foreach (string db in dbList)
                {
                    <MudSelectItem Value="@db">@db</MudSelectItem>
                }
            </MudSelect>
            <MudFab OnClick="async () => await LoadData()" StartIcon="@Icons.Material.Filled.PlayArrow" Color="Color.Default" IconColor="Color.Secondary" IconSize="Size.Large" Size="Size.Large" Label="Run&nbsp;" DisableElevation="true" accesskey="r" Style="margin-top:10px"></MudFab>
        </div>
        <MudDivider />
        <textarea @ref="textarea" id="taSQL" name="taSQL" style="display:none" />
    </MudTabPanel>
    <MudTabPanel Text="Results" Icon="@Icons.Material.Filled.Dataset">
        @if (queryResult != null && queryResult.Columns.Length > 0)
        {
            <MudTable @ref="mudTable" Items="@queryResult.Rows" RowsPerPage="50" SortLabel="Sort By" AllowUnsorted="true" Virtualize="false"
                  Hover="true" FixedHeader="true" FixedFooter="true" HorizontalScrollbar="true" Dense="true" Bordered="true" Striped="true"
                  Height="calc(100vh - 323px)" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" Elevation="2"
                  Filter="new Func<object[],bool>(FilterFunc)"
                  T="object[]">
                <ToolBarContent>
                    <MudTooltip Text="Copy tabular data to clipboard">
                        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Medium" IconSize="Size.Medium" Class="mt-4 mb-4 ml-3" OnClick='async () => await CopyToClipboard(GetTableText("\t"), "Tabular data was copied to clipboard")' Disabled="@(queryResult == null || queryResult.Columns.Length == 0)" />
                    </MudTooltip>
                    <MudTooltip Text="Save query and create a shareable link">
                        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Share" Size="Size.Medium" IconSize="Size.Medium" Class="mt-4 mb-4 ml-3" OnClick='async () => await Save()' Disabled="@(String.IsNullOrWhiteSpace(SQL))" />
                    </MudTooltip>
                    <MudSpacer />
                    <div class="d-flex">
                    @if (flagsFilter.Count > 0)
                    {
                        <div class="d-flex" style="width:130px; padding-bottom: 2px" @onclick:stopPropagation="true">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => flagsFilterOpened = !flagsFilterOpened)" EndIcon="@(flagsFilterOpened ? Icons.Material.Filled.ArrowDropUp : Icons.Material.Filled.ArrowDropDown)">Filter</MudButton>
                            <MudPopover Open="flagsFilterOpened" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                                <MudPaper Outlined="true" Class="px-4 py-4" MinWidth="200px">
                                    @foreach (var fi in flagsFilter.Keys)
                                    {
                                        <MudCheckBox @bind-Checked="flagsFilter[fi]" Color="@Color.Secondary" TriState="true">@queryResult.Columns[fi].Name</MudCheckBox>
                                    }
                                    <MudButton OnClick="@(() => { foreach(var f in flagsFilter){ flagsFilter[f.Key] = null;} })">Reset</MudButton>
                                </MudPaper>
                            </MudPopover>
                        </div>
                    }
                    <MudTextField DebounceInterval="300" @bind-Value="searchString" Placeholder="Search by text or ID" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true" Style="width:350px"></MudTextField>
                    </div>
                </ToolBarContent>
                <HeaderContent>
                    @for (int i = 0; i < queryResult.Columns.Length; i++)
                    {
                        int p = i; //Intermediate counter
                        <MudTh>
                            <MudTableSortLabel InitialDirection="SortDirection.None" SortBy="new Func<object[], object>(row => row[p])">
                                @(queryResult.Columns[p].Name)
                            </MudTableSortLabel>
                        </MudTh>
                    }
                    <MudTh />
                </HeaderContent>
                <RowTemplate>
                    @foreach (var val in context)
                    {
                        <MudTd Class="valTD">
                            @if (val is String && ((string)val).StartsWith("http"))
                            {
                                <a href="@val" title="@val" target="_blank"><MudIcon Icon="@Icons.Material.Filled.Forward" Color="Color.Primary" Size="Size.Small" Class="mr-3 mb-n1" /></a>
                            }
                            else if (val is String && !String.IsNullOrEmpty(searchString))
                            {
                                <MudHighlighter Text="@(val.ToString())" HighlightedText="@searchString" />
                            }
                            else if (val is Boolean)
                            {
                                <MudIcon Icon="@((bool)val ? Icons.Material.Outlined.CheckCircle : Icons.Material.Outlined.Circle)" Size="Size.Small" Class="mr-3 mb-n1" />
                            }
                            else
                            {
                                @Format(val)
                            }
                            @if (val is String && ((string)val).Length > 50)
                            {
                                <div class="btnMore" title="@val" @onclick="() => { showMoreText = val.ToString(); showMore = true; }">...</div>
                            }
                        </MudTd>
                    }
                    <MudTd />
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{50, 100, 200, 500, 1000}" />
                </PagerContent>
            </MudTable>
            <MudDialog @bind-IsVisible="showMore" Options="showMoreDialogOptions">
                <DialogContent>
                    <MudPaper Elevation="0" Class="mt-4">
                        <MudTextField T="string" Variant="Variant.Filled" Text="@showMoreText" Lines="25" AutoFocus="true" ReadOnly="true" />
                    </MudPaper>
                </DialogContent>
                <DialogActions>
                    <MudButton Variant="Variant.Filled" IconColor="Color.Primary" Color="Color.Default" OnClick='async () => await CopyToClipboard(showMoreText, "Text was copied to clipboard")' Class="ml-auto mr-4" StartIcon="@Icons.Material.Filled.ContentCopy">Copy to clipboard</MudButton>
                </DialogActions>
            </MudDialog>
        }
        else if (errorMsg != "")
        {
            <MudAlert Severity="Severity.Error">@errorMsg</MudAlert>
        }
    </MudTabPanel>
</MudTabs>

<MudOverlay Visible="@inProgress" DarkBackground="true" AutoClose="false" />

@code {
    private MudTable<object[]> mudTable;
    private MudTabs tabs;
    private ElementReference textarea;

    private string[] dbList = { };
    private string SQL = "";

    private QueryResult queryResult = null;
    private string errorMsg = "No result";
    private bool inProgress = false;

    private string searchString = "";

    public bool flagsFilterOpened = false;
    private Dictionary<int, bool?> flagsFilter = null;

    bool showMore = false;
    string showMoreText = "";
    private DialogOptions showMoreDialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true, DisableBackdropClick = false, CloseButton = true, NoHeader = false, MaxWidth = MaxWidth.Large };

    [Parameter]
    [SupplyParameterFromQuery(Name = "db")]
    public string database { get; set; } = null;

    [Parameter]
    [SupplyParameterFromQuery(Name = "sql")]
    public string SavedSQLName { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        dbList = await Http.GetFromJsonAsync<string[]>("api/sqlquery/dblist");

        if (!String.IsNullOrEmpty(database))
        {
            database = dbList.FirstOrDefault(s => String.Equals(s, database, StringComparison.OrdinalIgnoreCase));
        }

        if (String.IsNullOrEmpty(database))
        {
            database = await localStorage.GetAsync<string>("SQLQuery_currentDB");
            if (String.IsNullOrEmpty(database))
            {
                database = await Http.GetStringAsync("api/sqlquery/defaultdb");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!String.IsNullOrEmpty(SavedSQLName))
            {
                SQL = await Http.GetStringAsync($"api/sqlquery/savedsql?name={SavedSQLName}");
            }

            if (String.IsNullOrEmpty(SQL))
            {
                SQL = await localStorage.GetAsync<string>("SQLQuery_SQL");
                if (String.IsNullOrEmpty(SQL))
                {
                    SQL = await Http.GetStringAsync("api/sqlquery/defaultsql");
                }
            }
            await js.InvokeVoidAsync("codemirror.create", textarea, SQL, "100%", "calc(100vh - 280px)", "text/x-mssql");
        }
    }

    protected async Task LoadData()
    {
        inProgress = true;

        if (queryResult != null)
        {
            queryResult = null;
            StateHasChanged();
        }

        SQL = await js.InvokeAsync<string>("codemirror.getValue", "taSQL");
        try
        {
            var res = (await Http.PostAsJsonAsync("api/sqlquery", new Query
                {
                    Database = database,
                    SQL = SQL
                }));

            if (res.IsSuccessStatusCode)
            {
                errorMsg = "";
                queryResult = await res.Content.ReadFromJsonAsync<QueryResult>();
                if (queryResult.Columns.Length == 0)
                {
                    errorMsg = "No result";
                }
                else
                {
                    ConvertJsonElements();
                    flagsFilter = queryResult.Columns.Select((c, i) => new { i, c.TypeName }).Where(c => c.TypeName == typeof(bool).ToString()).ToDictionary(c => c.i, c => (bool?)null);
                }
            }
            else
            {
                errorMsg = await res.Content.ReadAsStringAsync();
                queryResult = null;
            }

            bool changes = await js.InvokeAsync<bool>("codemirror.getChanges", "taSQL");
            if (changes)
            {
                await localStorage.SetAsync("SQLQuery_SQL", SQL);

            }
            await localStorage.SetAsync("SQLQuery_currentDB", database);
        }
        catch (HttpRequestException exc)
        {
            errorMsg = exc.Message;
            queryResult = null;
        }
        inProgress = false;
        tabs.ActivatePanel(1);
    }

    private void ConvertJsonElements()
    {
        foreach (var row in queryResult.Rows)
        {
            for (int p = 0; p < row.Length; p++)
            {
                try
                {
                    row[p] = ((JsonElement)(row[p])).Deserialize(Type.GetType(queryResult.Columns[p].TypeName));
                }
                catch
                {
                    row[p] = String.Empty;
                }
            }
        }
    }

    protected async Task Save()
    {
        SQL = await js.InvokeAsync<string>("codemirror.getValue", "taSQL");
        var res = (await Http.PostAsJsonAsync($"api/sqlquery/save?name={SavedSQLName}", new Query
            {
                Database = "",
                SQL = SQL
            }));

        if (res.IsSuccessStatusCode)
        {
            SavedSQLName = await res.Content.ReadAsStringAsync();
            string uri = uriHelper.ToAbsoluteUri($"./sqlquery?db={database}&sql={SavedSQLName}").ToString();
            await js.InvokeVoidAsync("navigator.clipboard.writeText", uri);
            snackBar.Add($"{uri} was copied to clipboard", Severity.Success);
        }
    }

    private bool FilterFunc(object[] row)
    {
        bool searchResult = false;

        if (string.IsNullOrWhiteSpace(searchString))
            searchResult = true;

        if (!searchResult && Int32.TryParse(searchString, out int num))
        {
            if (row.Any(v => (v is int) && (int)v == num))
            {
                searchResult = true;
            }
        }

        if (!searchResult && !row.Any(v => (v is string) && ((string)v).Contains(searchString, StringComparison.CurrentCultureIgnoreCase)))
        {
            return false;
        }

        return flagsFilter.Where(fv => fv.Value.HasValue).All(fv => (bool)row[fv.Key] == fv.Value);
    }

    private async Task CopyToClipboard(string text, string msg)
    {
        await js.InvokeVoidAsync("navigator.clipboard.writeText", text);
        snackBar.Add(msg, Severity.Success);
    }

    private string GetTableText(string divider)
    {
        string th = String.Join(divider, queryResult.Columns.Select(c => c.Name));
        string td = String.Join("\"\n\"", queryResult.Rows.Select(r => String.Join($"\"{divider}\"", r)));
        return $"{th}\n\"{td}";
    }

    private string Format(object val)
    {
        switch (Type.GetTypeCode(val.GetType()))
        {
            case TypeCode.Int32:
                return ((Int32)val).ToString("n0");
            case TypeCode.DateTime:
                return ((DateTime)val).ToString("g");
            default:
                return val.ToString();
        }
    }
}