@page "/sqlquery"
@inject HttpClient Http

@using System.Net.Http.Json
@using System.Text.Json.Serialization;
@using System.Text.Json;
@using System.Dynamic;
@using PubSysLayout.Shared.SQLQuery;
@inject HttpClient httpClient
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar

<MudTabs Elevation="5" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="tabs" KeepPanelsAlive="true">
    <MudTabPanel Text="Query" Icon="@Icons.Material.Filled.Build">
        <div class="d-flex" style="max-width:600px;margin-bottom:10px">
            <MudSelect T="string" Label="Database" AnchorOrigin="Origin.BottomCenter" @bind-Value="database" FullWidth="false" Variant="Variant.Outlined" Class="mr-8">
                @foreach (string db in dbList)
                {
                    <MudSelectItem Value="@db">@db</MudSelectItem>
                }
            </MudSelect>
            <MudFab OnClick="async () => await LoadData()" StartIcon="@Icons.Material.Filled.PlayArrow" Color="Color.Default" IconColor="Color.Secondary" IconSize="Size.Large" Size="Size.Large" Label="Run&nbsp;" DisableElevation="true" accesskey="r" Style="margin-top:8px"></MudFab>
        </div>
        <MudDivider />
        <textarea @ref="textarea" id="taSQL" name="taSQL" style="display:none" />
    </MudTabPanel>
    <MudTabPanel Text="Results" @ref="panelResult" Icon="@Icons.Material.Filled.Dataset">
        @if (Elements != null && Elements.Length > 0)
        {
            <MudTable @ref="mudTable" Items="@Elements" RowsPerPage="50" SortLabel="Sort By" AllowUnsorted="true" Virtualize="false"
                  Hover="true" FixedHeader="true" FixedFooter="true" HorizontalScrollbar="true" Dense="true" Bordered="true" Striped="true"
                  Height="calc(100vh - 323px)" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" Elevation="2"
                  Filter="new Func<Dictionary<string, object>,bool>(FilterFunc)"
                  T="Dictionary<string, object>">
                <ToolBarContent>
                    <MudTooltip Text="Copy tabular data to clipboard">
                        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Medium" IconSize="Size.Medium" Class="mt-2 mb-2 ml-3" OnClick='async () => await CopyToClipboard(GetTableTex("\t"))' Disabled="@(Elements == null || Elements.Length == 0)" />
                    </MudTooltip>
                    <MudSpacer />
                    <MudTextField DebounceInterval="300" @bind-Value="searchString" Placeholder="Search by text or ID" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    @foreach (var p in (Elements[0]).Keys)
                    {
                        <MudTh>
                            <MudTableSortLabel InitialDirection="SortDirection.None" SortBy="new Func<Dictionary<string, object>, object>(x => {x.TryGetValue(p,out object res); return res;})">
                                @(p)
                            </MudTableSortLabel>
                        </MudTh>
                    }
                    <MudTh />
                </HeaderContent>
                <RowTemplate>
                    @foreach (var p in (Elements[0]).Keys)
                    {
                        <MudTd Style="max-width: 400px;overflow-x: hidden;white-space: nowrap" title="@context[p].ToString()">
                            @if (context[p] is string)
                            {
                                <MudHighlighter Text="@((context[p].ToString()))" HighlightedText="@searchString" />
                            }
                            else
                            {
                                @(context[p] is DateTime ? ((DateTime)(context[p])).ToString("g") : context[p])
                            }
                        </MudTd>
                    }
                    <MudTd />
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{50, 100, 200, 500, 1000}" />
                </PagerContent>
            </MudTable>
        }
        else if (errorMsg != "")
        {
            <MudAlert Severity="Severity.Error">@errorMsg</MudAlert>
        }
    </MudTabPanel>
</MudTabs>

<MudOverlay Visible="@inProgress" DarkBackground="true" AutoClose="false" />

@code {
    MudTable<Dictionary<string, object>> mudTable;
    MudTabs tabs;
    MudTabPanel panelResult;
    private ElementReference textarea;

    private Dictionary<string, object>[] Elements = null;
    private string errorMsg = "";
    private string searchString = "";
    private bool inProgress = false;
    private string[] dbList = { };
    private string database = "";
    private string SQL =
            @"-- last 100 released articles
SELECT TOP 100
	id_article,	title,
	dbo.udfGetArticleAuthorsFLName(a.id_article) AS author,
	u.firstname + ' ' + u.lastname AS creator,
	created, datereleased, datesort,
	(
		SELECT SUM(charcount) FROM Chapters ch WHERE ch.id_article=a.id_article
	) AS charcount,
	ISNULL((
		SELECT SUM(impressions) FROM StatArticlesMonth s WHERE s.id_article=a.id_article
	), 0) AS impressions,
	forumitems
FROM
	articles a JOIN
	users u ON a.id_user=u.id_user
WHERE
	a.del=0 AND released=1 AND complete=1 and GETDATE()>=datereleased AND id_arttype NOT IN (2,5)
ORDER BY
	a.datesort DESC";

    protected override async Task OnInitializedAsync()
    {
        dbList = await Http.GetFromJsonAsync<string[]>("api/sqlquery/dblist");
        database = dbList[0];
        //panelResult.Disabled = true;
        //await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //view-source:https://codemirror.net/5/mode/sql/
            //https://github.com/simonw/datasette/issues/949
            //https://stackoverflow.com/questions/20023381/codemirror-how-add-tables-to-sql-hint
            await js.InvokeVoidAsync("codemirror.create", textarea, SQL, "100%", "calc(100vh - 280px)", "text/x-mssql");
        }
    }


    protected async Task LoadData()
    {
        inProgress = true;
        //if (Elements != null)
        //{
        //    Elements = null;
        //    StateHasChanged();
        //}

        SQL = await js.InvokeAsync<string>("codemirror.getValue", "taSQL");
        try
        {
            var res = (await Http.PostAsJsonAsync("api/sqlquery", new Query
                {
                    Database = database,
                    SQL = SQL
                }));

            if (res.IsSuccessStatusCode)
            {
                errorMsg = "";
                Elements = (await res.Content.ReadFromJsonAsync<ExpandoObject[]>()).Select(e => ExpandoJson2Dictionary(e)).ToArray();
                if (Elements.Length == 0)
                {
                    errorMsg = "No result";
                }
            }
            else
            {
                errorMsg = await res.Content.ReadAsStringAsync();
                Elements = null;
            }
        }
        catch (HttpRequestException exc)
        {
            errorMsg = exc.Message;
            Elements = null;
        }
        inProgress = false;
        //panelResult.Disabled = false;
        ActivatePanel(1);
    }

    void ActivatePanel(int index)
    {
        tabs.ActivatePanel(index);
    }

    private Dictionary<string, object> ExpandoJson2Dictionary(ExpandoObject src)
    {
        Dictionary<string, object> res = new Dictionary<string, object>();
        IDictionary<string, object> srcd = src as IDictionary<string, object>;

        foreach (var p in srcd.Keys)
        {
            JsonElement val = (JsonElement)(srcd[p]);
            if (val.ValueKind == JsonValueKind.Number)
            {
                res[p] = val.GetDouble();
            }
            else if (val.ValueKind == JsonValueKind.String && val.TryGetDateTime(out DateTime dt))
            {
                res[p] = dt;
            }
            else if (val.ValueKind == JsonValueKind.String)
            {
                res[p] = val.GetString();
            }
            else
            {
                res[p] = val.ToString();
            }
        }

        return res;
    }

    private bool FilterFunc(Dictionary<string, object> i)
    {

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (Double.TryParse(searchString, out double num))
        {
            if (i.Values.Any(v => (v is double) && (double)v == num))
            {
                return true;
            }
        }

        if (i.Values.Any(v => (v is string) && ((string)v).Contains(searchString, StringComparison.CurrentCultureIgnoreCase)))
        {
            return true;
        }

        return false;
    }

    private async Task CopyToClipboard(string text)
    {
        snackBar.Add($"Tabular data was copied to clipboard", Severity.Success);
        await js.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private string GetTableTex(string divider)
    {
        string th = String.Join(divider, Elements[0].Keys);
        string td = String.Join("\"\n\"", Elements.Select(el => String.Join($"\"{divider}\"", el.Values)));
        return $"{th}\n\"{td}";
    }
}