@inject HttpClient Http
@inject LocalStorage localStorage
@inject SessionStorage session
@inject IJSRuntime js


<MudDialog DefaultFocus="DefaultFocus.None">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.GridOn" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="d-flex">
            <MudAutocomplete AutoFocus="true" T="string" Label="Type main table name" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Text" SearchFunc="@SearchTable" Clearable="true" ResetValueOnEmptyText="true" spellcheck="false" MaxItems="50" DebounceInterval="200" ValueChanged="TableChanged" Value="tableName" />
            <MudIconButton Disabled="@(String.IsNullOrEmpty(tableName))" Icon="@Icons.Material.Filled.PlayArrow" Color="@(currentTable == tableName ? Color.Primary : Color.Default)" Size="Size.Medium" Title="Show columns" OnClick="@(_ => currentTable = tableName)" Class="ml-1 mt-3"></MudIconButton>
            <MudSwitch @bind-Checked="@searchinside" Color="Color.Primary" title="Search inside table or view name" Class="ml-6 mt-4" />
        </div>
        @if (foreignKeys != null)
        {
            <MudText Typo="Typo.subtitle1" Class="mt-8">JOIN tables:</MudText>
            <MudContainer Style="height: 400px; overflow-y: scroll">
            @foreach (var fk in sortedForeignKeys)
            {
                <div class="d-flex" Style='@($"margin-left:{20 * (fk[0].Split(',').Length - 2) }px")'>
                    <MudIconButton Icon="@(expandForeignKeys.Contains(fk[0]) ? Icons.Material.Filled.ArrowDropDown : Icons.Material.Filled.ArrowRight)" Size="Size.Medium" Title="Show related tables" Style='@($"visibility:{(joinForeignKeys.Contains(fk[0]) ? "visible" : "hidden")};margin-right: -15px")' OnClick="@(async _ => { if(expandForeignKeys.Contains(fk[0])) { expandForeignKeys.RemoveWhere(path => path.StartsWith(fk[0]));} else { expandForeignKeys.Add(fk[0]); } await LoadForeignKeys(); })"></MudIconButton>
                    <MudCheckBox T="bool" Color="@(tableAlias.Keys.Contains(fk[0]) && currentTable == tableAlias[fk[0]] ? Color.Primary : Color.Default)" Title="Join table" Checked="@(joinForeignKeys.Contains(fk[0]))" CheckedChanged="async (v) => {if(v) {joinForeignKeys.Add(fk[0]); } else {joinForeignKeys.RemoveWhere(path => path.StartsWith(fk[0])); expandForeignKeys.RemoveWhere(path => path.StartsWith(fk[0]));} await LoadForeignKeys(); if(tableAlias.ContainsKey(fk[0])){ /*await Task.Delay(500);*/ currentTable = tableAlias[fk[0]]; includeAll = true; StateHasChanged(); } } ">@((MarkupString)fk[1])</MudCheckBox>
                    @if (joinForeignKeys.Contains(fk[0]))
                    {
                            <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Color="@(tableAlias.Keys.Contains(fk[0]) && currentTable == tableAlias[fk[0]] ? Color.Primary : Color.Default)" Size="Size.Medium" Title="Show columns" OnClick="@(_ => currentTable = tableAlias[fk[0]])"></MudIconButton>
                    }
                </div>
            }
            </MudContainer>
        }
        @if (currentTable != null && columnsInfo != null && columnsInfo.ContainsKey(currentTable))
        {
            <div class="d-flex">
                <MudSelect Label="Columns of table" T="string" @bind-Value="currentTable" Clearable="false" Class="ml-6 mr-6 mt-3 flex-grow-1" Dense="true" Margin="Margin.Dense" Variant=" Variant.Outlined">
                    @foreach (var utn in tableAlias.Values.OrderBy(tn => tn))
                    {
                        <MudSelectItem Value="@utn">@utn</MudSelectItem>
                    }
                </MudSelect>
                @*<MudSwitch @bind-Checked="@showAllWhereClause" Color="Color.Primary" title="Show all fields" Class="ml-auto mt-5" />*@
                <MudTextField DebounceInterval="300" @bind-Value="searchField" Placeholder="Search column" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-3 flex-grow-0" Clearable="true"></MudTextField>
            </div>
            <div class="d-flex">
                <MudCheckBox T="bool" title="check/uncheck all" Checked="includeAll" Style="padding-left: 24px" CheckedChanged="(v) => {includeAll = v; foreach(var cn in includeColumns[currentTable].Keys) { includeColumns[currentTable][cn] = v; }}"></MudCheckBox>
            </div>
            <MudContainer Style="height: 300px; overflow-y: scroll">
            @foreach (var cn in columnsInfo[currentTable][0/*showAllWhereClause ? 0 : 1*/].Where(cn => String.IsNullOrEmpty(searchField) || cn.ToLower().Contains(searchField)))
            {
                <div class="d-flex">
                    <MudCheckBox T="bool" title="include in SELECT" Class="mt-3" @bind-Checked="includeColumns[currentTable][cn]"></MudCheckBox>
                    <MudTextField Label="@cn" Variant="Variant.Text" T="string" @bind-Value="whereClause[currentTable][cn]" title="WHERE Clause value"></MudTextField>
                </div>
            }
            </MudContainer>

            <div class="d-flex mt-6">
                <MudSelect Label="ORDER BY:" T="string" @bind-Value="sortColumn" Clearable="true" Dense="true">
                    @foreach (var cn in columnsInfo.Keys.SelectMany(utn => columnsInfo[utn][0], (utn, cn) => $"{utn}.{(reservedKeywords.Contains(cn.ToLower()) ? "[" + cn + "]" : cn)}").OrderBy(cn => cn))
                    {
                        <MudSelectItem Value="@cn">@cn</MudSelectItem>
                    }
                </MudSelect>
                <MudSwitch @bind-Checked="@sortDESC" Color="Color.Primary" title="DESC" Class="ml-6 mt-4" />
            </div>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Class="ml-auto">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="OK" Variant="Variant.Filled" Disabled="@(String.IsNullOrEmpty(tableName))" Class="mr-4" >OK</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string Database { get; set; }

    private string[] reservedKeywords = { "order", "date", "user", "unique", "default", "image", "tran", "public" };

    private bool searchinside = true;

    private bool includeAll = true;

    private string searchField = "";

    private string tableName { get { return session["QB_tableName"] as string; } set { session["QB_tableName"] = value; } }
    private string currentTable { get { return session["QB_currentTable"] as string; } set { session["QB_currentTable"] = value; } }
    private Dictionary<string, string[][]> columnsInfo { get { return session["QB_columnsInfo"] as Dictionary<string, string[][]>; } set { session["QB_columnsInfo"] = value; } }
    private Dictionary<string, Dictionary<string, bool>> includeColumns { get { return session["QB_includeColumns"] as Dictionary<string, Dictionary<string, bool>>; } set { session["QB_includeColumns"] = value; } }
    private Dictionary<string, Dictionary<string, string>> whereClause { get { return session["QB_whereClause"] as Dictionary<string, Dictionary<string, string>>; } set { session["QB_whereClause"] = value; } }
    //private bool showAllWhereClause { get { return session["QB_showAllWhereClause"] as bool? ?? true; } set { session["QB_showAllWhereClause"] = value; } }
    private string sortColumn { get { return session["QB_sortColumn"] as string ?? String.Empty; } set { session["QB_sortColumn"] = value; } }
    private bool sortDESC { get { return session["QB_sortDESC"] as bool? ?? false; } set { session["QB_sortDESC"] = value; } }

    private string[][] foreignKeys { get { return session["QB_foreignKeys"] as string[][]; } set { session["QB_foreignKeys"] = value; } }
    private List<string[]> sortedForeignKeys { get { return session["QB_sortedForeignKeys"] as List<string[]>; } set { session["QB_sortedForeignKeys"] = value; } }
    private HashSet<string> joinForeignKeys { get { return session["QB_joinForeignKeys"] as HashSet<string>; } set { session["QB_joinForeignKeys"] = value; } }
    private HashSet<string> expandForeignKeys { get { return session["QB_expandForeignKeys"] as HashSet<string>; } set { session["QB_expandForeignKeys"] = value; } }
    private Dictionary<string, string> tableAlias { get { return session["QB_tableAlias"] as Dictionary<string, string>; } set { session["QB_tableAlias"] = value; } }

    protected async override Task OnInitializedAsync()
    {
        if (String.IsNullOrEmpty(tableName))
        {
            await TableChanged(await localStorage.GetAsync<string>("SQLQuery_query_tableName"));
        }
    }

    private async Task TableChanged(string value)
    {
        if (tableName != value)
        {
            tableName = value;
            currentTable = tableName;
            joinForeignKeys = new HashSet<string>();
            expandForeignKeys = new HashSet<string>();
            await localStorage.SetAsync("SQLQuery_query_tableName", tableName);
            await LoadColumns();
            await LoadForeignKeys();
        }
    }

    private async Task LoadColumns()
    {
        if (!String.IsNullOrEmpty(tableName))
        {
            columnsInfo = new Dictionary<string, string[][]>();
            columnsInfo[tableName] = await Http.GetFromJsonAsync<string[][]>($"api/sqlquery/tablecolumns?database={Database}&tablename={tableName}");
            whereClause = new Dictionary<string, Dictionary<string, string>>();
            whereClause[tableName] = columnsInfo[tableName][0].ToDictionary(s => s, s => "");
            includeColumns = new Dictionary<string, Dictionary<string, bool>>();
            includeColumns[tableName] = columnsInfo[tableName][0].ToDictionary(s => s, s => true);
            sortColumn = String.Empty;
            sortDESC = false;
        }
        else
        {
            columnsInfo = null;
            whereClause = null;
            includeColumns = null;
            sortColumn = String.Empty;
            sortDESC = false;
        }
    }

    private async Task LoadForeignKeys()
    {
        if (!String.IsNullOrEmpty(tableName))
        {
            foreignKeys = await Http.GetFromJsonAsync<string[][]>($"api/sqlquery/tableforeignkeys?database={Database}&tablenames={String.Join(',', GetJoinTables())}");
            List<string[]> tmp = new List<string[]>();
            tableAlias = new Dictionary<string, string>();
            tableAlias[""] = tableName;
            await foreach (var fk in SortForeignKeys(tableName))
            {
                tmp.Add(fk);
            }
            sortedForeignKeys = tmp;
            if (!tableAlias.Values.Contains(currentTable))
            {
                currentTable = tableName;
            }
            foreach (var rtn in columnsInfo.Keys.Where(utn => !tableAlias.Values.Contains(utn)).ToList())
            {
                columnsInfo.Remove(rtn);
                whereClause.Remove(rtn);
                includeColumns.Remove(rtn);
            }
            if(!String.IsNullOrEmpty(sortColumn) && !tableAlias.Values.Contains(sortColumn.Split('.')[0]))
            {
                sortColumn = String.Empty;
            }
        }
        else
        {
            foreignKeys = null;
            sortedForeignKeys = null;
        }
    }

    private IEnumerable<string> GetJoinTables()
    {
        if (joinForeignKeys == null || joinForeignKeys.Count == 0)
        {
            return new string[] { tableName };
        }
        else
        {
            return joinForeignKeys
                .SelectMany(path => path.Split(','))
                .Select(fkn => foreignKeys.SingleOrDefault(fk => fk[0] == fkn))
                .Where(fk => fk != null)
                .SelectMany(fk => fk.Skip(1))
                .Distinct();
        }
    }

    private async IAsyncEnumerable<string[]> SortForeignKeys(string table, string fromTable = null, int level = 0, string path = "")
    {
        if (level > 10)
        {
            yield break;
        }

        foreach (string[] fk in GetForeignKeysFromTable(table, fromTable))
        {
            string path1 = path + (path == "" ? "" : ",") + fk[0];

            string tn = null, utn = null;
            if (joinForeignKeys.Contains(path1))
            {
                tn = fk[1] == table ? fk[2] : fk[1];
                utn = tn;
                int p = 0;
                while (tableAlias.Values.Any(s => s == utn))
                {
                    p++;
                    utn = tn + p;
                }
                tableAlias[path1] = utn;

                if (!columnsInfo.ContainsKey(utn))
                {
                    columnsInfo[utn] = await Http.GetFromJsonAsync<string[][]>($"api/sqlquery/tablecolumns?database={Database}&tablename={tn}");
                    whereClause[utn] = columnsInfo[utn][0].ToDictionary(s => s, s => "");
                    includeColumns[utn] = columnsInfo[utn][0].ToDictionary(s => s, s => true);
                }
            }

            yield return new string[] { path1, (fk[1] == table ? $"{fk[1]} ⟹ <b>{fk[2]}</b>" : $"<b>{fk[1]}</b> ⟹ {fk[2]}") +  (tn != null && tn != utn ? " AS <b>" + utn : "</b>") };

            if (joinForeignKeys.Contains(path1))
            {
                await foreach (string[] fk1 in SortForeignKeys(fk[1] == table ? fk[2] : fk[1], table, level + 1, path1))
                {
                    if (expandForeignKeys.Contains(path1))
                    {
                        yield return fk1;
                    }
                }
            }
        }
    }

    private async IAsyncEnumerable<string> GetJoinForeignKeys(string table, string fromTable = null, string path = "")
    {
        foreach (string[] fk in GetForeignKeysFromTable(table, fromTable))
        {
            string path1 = path + (path == "" ? "" : ",") + fk[0];

            if (joinForeignKeys.Contains(path1))
            {
                string tn = fk[1] == table ? fk[2] : fk[1];
                string utn = tableAlias[path1];

                yield return (tn != utn ? tn + " AS " + utn : utn) + " ON " + (await GetForeignKeyJoinOn(fk[0], tn, utn, table, tableAlias[path]));
                await foreach(string fk1 in GetJoinForeignKeys(fk[1] == table ? fk[2] : fk[1], table, path1))
                {
                    yield return fk1;
                }
            }
        }
    }

    private async Task<string> GetForeignKeyJoinOn(string fkName, string tn, string utn, string tn1, string utn1)
    {
        var columns = await Http.GetFromJsonAsync<string[][]>($"api/sqlquery/foreignkeycolumns?database={Database}&fkname={fkName}");
        string res = String.Join(" AND ", columns.Select(r => $"{(r[0] == tn ? utn : utn1)}.{r[1]}={(r[2] == tn ? utn : utn1)}.{r[3]}"));
        return res;
    }

    private IEnumerable<string> GetTableColumnList(string table, string fromTable = null, string path = "")
    {
        yield return String.Join(", ", columnsInfo[tableAlias[path]][0].Where(c => includeColumns[tableAlias[path]][c]).Select(s => tableAlias[path] + "." + (reservedKeywords.Contains(s.ToLower()) ? $"[{s}]" : s)));

        foreach (string[] fk in GetForeignKeysFromTable(table, fromTable))
        {
            string path1 = path + (path == "" ? "" : ",") + fk[0];

            if (joinForeignKeys.Contains(path1))
            {
                foreach (string s in GetTableColumnList(fk[1] == table ? fk[2] : fk[1], table, path1))
                {
                    yield return s;
                }
            }
        }
    }

    private IEnumerable<string[]> GetForeignKeysFromTable(string table, string fromTable)
    {
        return foreignKeys
                .Where(fk => (fk[1] == table || fk[2] == table) && (fk[1] != fromTable && fk[2] != fromTable))
                .OrderBy(fk => fk[1] == table ? 0 : 1)
                .ThenBy(fk => fk[1] == table ? fk[2] : fk[1]);
    }

    private async Task OK()
    {
        if (String.IsNullOrEmpty(tableName))
        {
            return;
        }

        string columns = String.Join(",\r\n    ", GetTableColumnList(tableName).Where(cl => !String.IsNullOrEmpty(cl)));

        string  where = String.Join(" AND \r\n    ",
            whereClause.Keys.SelectMany(utn => 
            whereClause[utn]
                .Where(kv => !String.IsNullOrEmpty(kv.Value))
                .Select(kv => utn + "." + (reservedKeywords.Contains(kv.Key.ToLower()) ? $"[{kv.Key}]" : kv.Key) + (kv.Value.Contains('%') ? " LIKE " : "=") + (double.TryParse(kv.Value, out _) ? kv.Value : $"'{kv.Value}'"))));

        string join = "";
        if (joinForeignKeys.Count > 0)
        {
            List<string> joinTables = new List<string>();
            await foreach (var s in GetJoinForeignKeys(tableName))
            {
                joinTables.Add(s);
            }
            join = $" JOIN\r\n    {String.Join(" JOIN\r\n    ", joinTables)}";
        }

        string sql = 
$@"SELECT TOP 200
    {columns}
FROM
    {tableName}";

        if (!String.IsNullOrEmpty(join))
        {
            sql += join;
        }

        if(!String.IsNullOrEmpty(where))
        {
            sql += $@"
WHERE
    {where}";
        }

        if(!String.IsNullOrEmpty(sortColumn))
        {
            sql += $@"
ORDER BY
    {sortColumn}{(sortDESC ? " DESC" : "")}";
        }


        foreach (var tn in GetJoinTables())
        {
            await js.InvokeVoidAsync("codemirror.setTableHintOptions", "taSQL", tn, columnsInfo[tn][0]);
        }

        MudDialog.Close(DialogResult.Ok(sql));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task<IEnumerable<string>> SearchTable(string value)
    {
        return await Http.GetFromJsonAsync<string[]>($"api/sqlquery/searchtable?database={Database}&search={value}&searchinside={searchinside}");
    }
}