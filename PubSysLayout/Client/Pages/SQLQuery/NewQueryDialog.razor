@inject HttpClient Http
@inject LocalStorage localStorage
@inject SessionStorage session
@inject IJSRuntime js


<MudDialog DefaultFocus="DefaultFocus.None">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.GridOn" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="d-flex">
            <MudAutocomplete AutoFocus="true" T="string" Label="Type table name" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Text" SearchFunc="@SearchTable" Clearable="true" ResetValueOnEmptyText="true" spellcheck="false" MaxItems="50" DebounceInterval="200" ValueChanged="TableChanged" Value="tableName" />
            <MudSwitch @bind-Checked="@searchinside" Color="Color.Primary" title="Search inside table or view name" Class="ml-6 mt-4" />
        </div>
        @if (columnsInfo != null)
        {
            <div class="d-flex">
            <MudText Typo="Typo.subtitle1" Class="mt-8">WHERE clause:</MudText>
            <MudSwitch @bind-Checked="@showAllWhereClause" Color="Color.Primary" title="Show all fields" Class="ml-auto mt-6" />
            </div>
            <MudContainer Style="max-height: 300px; overflow-y: scroll">
            @foreach (var cn in columnsInfo[showAllWhereClause ? 0 : 1])
            {
                <MudTextField Label="@cn" Variant="Variant.Text" T="string" @bind-Value="whereClause[cn]"></MudTextField>
            }
            </MudContainer>

            <div class="d-flex mt-6">
                <MudSelect Label="ORDER BY clause:" T="string" @bind-Value="sortColumn" Clearable>
                    @foreach (var cn in columnsInfo[0])
                    {
                        <MudSelectItem Value="@cn">@cn</MudSelectItem>
                    }
                </MudSelect>
                <MudSwitch @bind-Checked="@sortDESC" Color="Color.Primary" title="DESC" Class="ml-6 mt-4" />
            </div>
        }
        @if (foreignKeys != null)
        {
            <MudText Typo="Typo.subtitle1" Class="mt-8">JOIN tables:</MudText>
            <MudContainer Style="max-height: 300px; overflow-y: scroll">
            @foreach (var fk in foreignKeys)
            {
                    <MudCheckBox T="bool" Label='@($"{fk[1]} ⟹ {fk[2]}")' Checked="@(joinForeignKeys.Contains(fk[0]))" CheckedChanged="async (v) => {if(v) {joinForeignKeys.Add(fk[0]); } else {joinForeignKeys.Remove(fk[0]); } await LoadForeignKeys(); } " Class='@("ml-" + 4 * foreignKeysLevel[fk[0]])' />
            }
            </MudContainer>
            @*@(String.Join(", ", GetJoinTables(tableName)))*@
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Class="ml-auto">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="OK" Variant="Variant.Filled" Disabled="@(String.IsNullOrEmpty(tableName))" Class="mr-4" >OK</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string Database { get; set; }

    private string[] reservedKeywords = { "order", "date", "user", "unique", "default", "image", "tran", "public" };

    private bool searchinside = true;

    private string tableName { get { return session["QB_tableName"] as string; } set { session["QB_tableName"] = value; } }
    private string[][] columnsInfo { get { return session["QB_columnsInfo"] as string[][]; } set { session["QB_columnsInfo"] = value; } }
    private Dictionary<string, string> whereClause { get { return session["QB_whereClause"] as Dictionary<string, string>; } set { session["QB_whereClause"] = value; } }
    private bool showAllWhereClause { get { return session["QB_showAllWhereClause"] as bool? ?? false; } set { session["QB_showAllWhereClause"] = value; } }
    private string sortColumn { get { return session["QB_sortColumn"] as string ?? String.Empty; } set { session["QB_sortColumn"] = value; } }
    private bool sortDESC { get { return session["QB_sortDESC"] as bool? ?? false; } set { session["QB_sortDESC"] = value; } }

    private string[][] foreignKeys { get { return session["QB_foreignKeys"] as string[][]; } set { session["QB_foreignKeys"] = value; } }
    private Dictionary<string, int> foreignKeysLevel { get { return session["QB_foreignKeysLevel"] as Dictionary<string, int>; } set { session["QB_foreignKeysLevel"] = value; } }
    private HashSet<string> joinForeignKeys { get { return session["QB_joinForeignKeys"] as HashSet<string>; } set { session["QB_joinForeignKeys"] = value; } }

    protected async override Task OnInitializedAsync()
    {
        if (String.IsNullOrEmpty(tableName))
        {
            await TableChanged(await localStorage.GetAsync<string>("SQLQuery_query_tableName"));
        }
    }

    private async Task TableChanged(string value)
    {
        if (tableName != value)
        {
            tableName = value;
            joinForeignKeys = new HashSet<string>();
            await localStorage.SetAsync("SQLQuery_query_tableName", tableName);
            await LoadColumns();
            await LoadForeignKeys();
        }
    }

    private async Task LoadColumns()
    {
        if (!String.IsNullOrEmpty(tableName))
        {
            columnsInfo = await Http.GetFromJsonAsync<string[][]>($"api/sqlquery/tablecolumns?database={Database}&tablename={tableName}");
            whereClause = columnsInfo[0].ToDictionary(s => s, s => "");
            sortColumn = String.Empty;
            sortDESC = false;
        }
        else
        {
            columnsInfo = null;
            whereClause = null;
            sortColumn = String.Empty;
            sortDESC = false;
        }
    }

    private async Task LoadForeignKeys()
    {
        if (!String.IsNullOrEmpty(tableName))
        {
            foreignKeys = await Http.GetFromJsonAsync<string[][]>($"api/sqlquery/tableforeignkeys?database={Database}&tablenames={String.Join(',', GetJoinTables(tableName))}");
            joinForeignKeys.RemoveWhere(fkn => !foreignKeys.Any(fk => fk[0] == fkn));
            foreignKeysLevel = new Dictionary<string, int>();
            foreignKeys = SortForeignKeys(tableName, GetJoinTables(tableName).ToHashSet()).ToArray();
        }
        else
        {
            foreignKeys = null;
            foreignKeysLevel = null;
        }
    }

    private IEnumerable<string> GetJoinTables(string table, string fromTable = null)
    {
        yield return table;
        if (joinForeignKeys != null)
        {
            foreach (string s in
                joinForeignKeys
                    .Select(fkn => foreignKeys.SingleOrDefault(fk => fk[0] == fkn))
                    .Where(fk => fk != null && (fk[1] == table || fk[2] == table))
                    .Select(fk => fk[1] == table ? fk[2] : fk[1])
                    .Where(s => s != fromTable)
                    .Distinct())
            {
                foreach (string s1 in GetJoinTables(s, table))
                {
                    yield return s1;
                }
            }
        }
    }

    private IEnumerable<string[]> SortForeignKeys(string table, HashSet<string> joinTables, string fromTable = null, int level = 0)
    {
        if (level > 4)
        {
            yield break;
        }

        foreach (string[] fk in
            foreignKeys
                .Where(fk => (fk[1] == table || fk[2] == table) && (fk[1] != fromTable && fk[2] != fromTable))
                .OrderBy(fk => fk[1] == table ? 0 : 1)
                .ThenBy(fk => fk[1] == table ? fk[2] : fk[1]))
        {
            if (!joinForeignKeys.Contains(fk[0]) && joinTables.Contains(fk[1] == table ? fk[2] : fk[1]))
            {
                continue;
            }

            yield return fk;
            foreignKeysLevel[fk[0]] = level;
            if (joinForeignKeys.Contains(fk[0]))
            {
                foreach (string[] fk1 in SortForeignKeys(fk[1] == table ? fk[2] : fk[1], joinTables, table, level + 1))
                {
                    yield return fk1;
                }
            }
        }
    }

    private async IAsyncEnumerable<string> GetJoinForeignKeys(string table, string fromTable = null)
    {
        if (joinForeignKeys != null)
        {
            foreach (var item in
                joinForeignKeys
                    .Select(fkn => foreignKeys.SingleOrDefault(fk => fk[0] == fkn))
                    .Where(fk => fk != null && (fk[1] == table || fk[2] == table))
                    .OrderBy(fk => fk[1] == table ? 0 : 1)
                    .ThenBy(fk => fk[1] == table ? fk[2] : fk[1])
                    .Select(fk => new { fk, table = fk[1] == table ? fk[2] : fk[1] })
                    .Where(it => it.table != fromTable))
            {
                yield return item.table + " ON " + (await GetForeignKeyJoinOn(item.fk[0]));
                await foreach (string s in GetJoinForeignKeys(item.table, table))
                {
                    yield return s;
                }
            }
        }
    }

    private async Task<string> GetForeignKeyJoinOn(string fkName)
    {
        var columns = await Http.GetFromJsonAsync<string[][]>($"api/sqlquery/foreignkeycolumns?database={Database}&fkname={fkName}");
        return String.Join(" AND ", columns.Select(r => $"{r[0]}.{r[1]}={r[2]}.{r[3]}"));
    }

    private async Task OK()
    {
        if (String.IsNullOrEmpty(tableName))
        {
            return;
        }       

        var columns = String.Join(", ", columnsInfo[0].Select(s => tableName + "." + (reservedKeywords.Contains(s.ToLower()) ? $"[{s}]" : s)));

        if (joinForeignKeys.Count > 0)
        {
            columns += ",\r\n    " + String.Join(",\r\n    ", await Task.WhenAll(GetJoinTables(tableName).Skip(1).Select(async tn =>
            {
                var c = await Http.GetFromJsonAsync<string[][]>($"api/sqlquery/tablecolumns?database={Database}&tablename={tn}");
                return String.Join(", ", c[0].Select(s => tn + "." + (reservedKeywords.Contains(s.ToLower()) ? $"[{s}]" : s)));
            })));
        }

        var where = String.Join(" AND \r\n    ", whereClause
        .Where(kv => !String.IsNullOrEmpty(kv.Value))
        .Select(kv => tableName + "." + (reservedKeywords.Contains(kv.Key.ToLower()) ? $"[{kv.Key}]" : kv.Key) + (kv.Value.Contains('%') ? " LIKE " : "=") + (double.TryParse(kv.Value, out _) ? kv.Value : $"'{kv.Value}'")));

        string sql = $@"SELECT TOP 200
    {columns}
FROM
    {tableName}";

        if (joinForeignKeys.Count > 0)
        {
            List<string> tmp = new List<string>();
            await foreach (var s in GetJoinForeignKeys(tableName))
            {
                tmp.Add(s);
            }

            sql += $@" JOIN
    { String.Join(@" JOIN
    ", tmp)}";
        }


        if(!String.IsNullOrEmpty(where))
        {
            sql +=
$@"
WHERE
    {where}";
        }

        if(!String.IsNullOrEmpty(sortColumn))
        {
            sql +=
$@"
ORDER BY
    {tableName + "." + (reservedKeywords.Contains(sortColumn.ToLower()) ? "[" + sortColumn + "]" : sortColumn)}{(sortDESC ? " DESC" : "")}";
        }

        await js.InvokeVoidAsync("codemirror.setTableHintOptions", "taSQL", tableName, columnsInfo[0]);

        MudDialog.Close(DialogResult.Ok(sql));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task<IEnumerable<string>> SearchTable(string value)
    {
        return await Http.GetFromJsonAsync<string[]>($"api/sqlquery/searchtable?database={Database}&search={value}&searchinside={searchinside}");
    }
}