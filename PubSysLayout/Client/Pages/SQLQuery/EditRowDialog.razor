@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager uriHelper
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject Clipboard clipboard
@using PubSysLayout.Shared.Model
@using PubSysLayout.Shared.SQLQuery;


<MudDialog DefaultFocus="DefaultFocus.Element">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: scroll">
            @for (int i = 0; i < editRow.Length; i++)
            {
                int p = i; //Intermediate counter
                object val = editRow[p];
                Type type = Type.GetType(QueryResult.Columns[p].TypeName);
                @if (type == typeof(string))
                {
                    <MudTextField Value="@((string)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="string" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" MaxLength="@(QueryResult.Columns[p].MaxLength)"></MudTextField>
                }
                else if (type == typeof(int))
                {
                    <MudNumericField Value="@((int)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="int" ReadOnly="@(QueryResult.Columns[p].ReadOnly)"></MudNumericField>
                }
                else if (val is byte)
                {
                    <MudNumericField Value="@((byte)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="byte" ReadOnly="@(QueryResult.Columns[p].ReadOnly)"></MudNumericField>
                }
                else if (type == typeof(short))
                {
                    <MudNumericField Value="@((short)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="short" ReadOnly="@(QueryResult.Columns[p].ReadOnly)"></MudNumericField>
                }
                else if (type == typeof(long))
                {
                    <MudNumericField Value="@((long)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="long" ReadOnly="@(QueryResult.Columns[p].ReadOnly)"></MudNumericField>
                }
                else if (type == typeof(DateTime))
                {
                    <div class="d-flex">
                        <MudDatePicker Date="@(((DateTime)val).Date)" DateChanged="(v) => editRow[p] = (v.Value.Date).Add(((DateTime)editRow[p]).TimeOfDay)" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" ReadOnly="@(QueryResult.Columns[p].ReadOnly)"></MudDatePicker>
                        <MudTimePicker Time="@(((DateTime)val).TimeOfDay)" TimeChanged="(v) => editRow[p] = ((DateTime)editRow[p]).Date.Add(v.Value)" Label="time" Variant="Variant.Text" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" Class="ml-2"></MudTimePicker>
                    </div>
                }
                else if (type == typeof(bool))
                {
                    <MudCheckBox Checked="@((bool)val)" CheckedChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" T="bool" ReadOnly="@(QueryResult.Columns[p].ReadOnly)"></MudCheckBox>
                }
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="OK" Variant="Variant.Filled" accesskey="s">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public QueryResult QueryResult { get; set; }
    [Parameter] public Query Query { get; set; }

    private object[] editRow = null;
    private object[] row = null;

    protected override void OnInitialized()
    {
        row = Query.Row;
        editRow = (object[])Query.Row.Clone();
        Query.Action = "UPDATE";
        Query.Row = editRow;
    }

    private async Task OK()
    {
        var response = (await Http.PutAsJsonAsync($"api/sqlquery", Query));

        if (!response.IsSuccessStatusCode)
        {
            var msg = await response.Content.ReadAsStringAsync();
            await DialogService.ShowMessageBox("Error", msg);
        }
        else
        {
            editRow.CopyTo(row, 0);
            snackBar.Add($"Row updated", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
            /*var updrow = await response.Content.ReadFromJsonAsync<object[]>();
            for (int p = 0; p < row.Length; p++)
            {
                try
                {
                    row[p] = ((JsonElement)(updrow[p])).Deserialize(Type.GetType(queryResult.Columns[p].TypeName));
                }
                catch
                {
                    row[p] = String.Empty;
                }
            }*/
        }
    }

    private void Cancel()
    {        
        MudDialog.Cancel();
    }
}