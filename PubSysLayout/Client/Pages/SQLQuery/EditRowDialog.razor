@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager uriHelper
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject PubSysLayout.Client.Pages.Code.CodeEdit codeEdit
@inject Clipboard clipboard
@using PubSysLayout.Shared.Model
@using PubSysLayout.Shared.SQLQuery;
@using System.ComponentModel;
@using System.Text.Json;

<style>
    .smallField {
        display:inline-block; 
        max-width:300px;
        margin-right:11px;
    }

    .editRowContainer{
        max-height: calc(100vh - 220px);
        overflow-y: scroll;
        padding-right: 12px;
    }

    .editRowContainer .mud-input-control{
        margin-bottom: 10px;
    }
</style>

<MudDialog DefaultFocus="DefaultFocus.Element">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Class="editRowContainer">
            @for (int i = 0; i < editRow.Length; i++)
            {
                int p = i; //Intermediate counter
                object val = editRow[p];
                Type type = Type.GetType(QueryResult.Columns[p].TypeName);
                @if (type == typeof(string))
                {
                    if (QueryResult.Columns[p].MaxLength > 300 && !QueryResult.Columns[p].ReadOnly)
                    {
                        <div style="display:flex;margin-bottom:-8px"><MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.EditNote" Color="Color.Primary" OnClick="@(async () => await CodeEdit(p))" Title="Edit content" Class="ml-auto"></MudIconButton></div>
                    }

                    <MudTextField Value="@((string)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Class='@(QueryResult.Columns[p].MaxLength < 50 ? "smallField" : null)' Variant="@(QueryResult.Columns[p].MaxLength > 100 ? Variant.Outlined : Variant.Text)" T="string" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" MaxLength="@(QueryResult.Columns[p].MaxLength)" Lines="@(QueryResult.Columns[p].MaxLength > 100 ? Math.Min(QueryResult.Columns[p].MaxLength / 100, 5)  : 1)"></MudTextField>
                }
                else if (type == typeof(int))
                {
                    <MudNumericField Class="smallField" Value="@((int)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="int" ReadOnly="@(QueryResult.Columns[p].ReadOnly)"></MudNumericField>
                }
                else if (val is byte)
                {
                    <MudNumericField Class="smallField" Value="@((byte)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="byte" ReadOnly="@(QueryResult.Columns[p].ReadOnly)"></MudNumericField>
                }
                else if (type == typeof(short))
                {
                    <MudNumericField Class="smallField" Value="@((short)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="short" ReadOnly="@(QueryResult.Columns[p].ReadOnly)"></MudNumericField>
                }
                else if (type == typeof(long))
                {
                    <MudNumericField Class="smallField" Value="@((long)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="long" ReadOnly="@(QueryResult.Columns[p].ReadOnly)"></MudNumericField>
                }
                else if (type == typeof(DateTime))
                {
                    <div class="d-flex">
                        <MudDatePicker @ref="datePickers[QueryResult.Columns[p].Name]" AutoClose="true" Editable="true" Placeholder="Select Date" Date="@(((DateTime)val).Date)" DateChanged="(v) => {if(v.HasValue) editRow[p] = (v.Value.Date).Add(((DateTime)editRow[p]).TimeOfDay);}" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" ReadOnly="@(QueryResult.Columns[p].ReadOnly)">
                            <PickerActions>
                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => {editRow[p] = (DateTime.Today).Add(((DateTime)editRow[p]).TimeOfDay); datePickers[QueryResult.Columns[p].Name].Close(); })">Today</MudButton>
                            </PickerActions>
                        </MudDatePicker>
                        <MudTimePicker @ref="timePickers[QueryResult.Columns[p].Name]" AutoClose="true" Editable="true" Placeholder="Select Time" Time="@(((DateTime)val).TimeOfDay)" TimeChanged="(v) => {if(v.HasValue) editRow[p] = ((DateTime)editRow[p]).Date.Add(v.Value); }" Label="time" Variant="Variant.Text" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" Class="ml-4">
                            <PickerActions>
                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => {editRow[p] = ((DateTime)editRow[p]).Date.Add(DateTime.Now.TimeOfDay); timePickers[QueryResult.Columns[p].Name].Close(); })">Now</MudButton>
                            </PickerActions>
                        </MudTimePicker>
                    </div>
                }
                else if (type == typeof(bool))
                {
                    <MudCheckBox Checked="@((bool)val)" CheckedChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" T="bool" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" Dense="true"></MudCheckBox>
                }
                else
                {
                    <MudTextField Class="smallField" Value="@((val??"").ToString())" ValueChanged='async (v) => {try{editRow[p] = TypeDescriptor.GetConverter(type).ConvertFrom(v);} catch(Exception exc){await DialogService.ShowMessageBox(" Error", exc.Message);}}' Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="string" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" MaxLength="@(QueryResult.Columns[p].MaxLength)"></MudTextField>
                }
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="Delete" Class="ml-6" Title="Delete row" Disabled="@(Query.OriginalRow == null)"></MudIconButton>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Class="ml-auto">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="OK" Variant="Variant.Filled" accesskey="s" Class="mr-5">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public QueryResult QueryResult { get; set; }
    [Parameter] public Query Query { get; set; }

    private object[] editRow = null;
    private object[] row = null;

    private Dictionary<string, MudDatePicker> datePickers = new Dictionary<string, MudDatePicker>();
    private Dictionary<string, MudTimePicker> timePickers = new Dictionary<string, MudTimePicker>();

    protected override void OnInitialized()
    {
        if (Query.Row != null)
        {
            row = Query.Row;
            editRow = (object[])Query.Row.Clone();
            Query.Action = "UPDATE";
            Query.Row = editRow;
            Query.OriginalRow = row;
        }
        else
        {
            row = null;
            editRow = QueryResult.Columns.Select(c => GetDefault(Type.GetType(c.TypeName))).ToArray();
            Query.Action = "INSERT";
            Query.Row = editRow;
            Query.OriginalRow = null;
        }
    }

    private object GetDefault(Type type)
    {
        if (type == typeof(DateTime))
        {
            return DateTime.Now;
        }
        else if (type == typeof(string))
        {
            return "";
        }
        else if (type.IsValueType)
        {
            return Activator.CreateInstance(type);
        }
        else
        {
            return null;
        }
    }

    private async Task OK()
    {
        var response = (await Http.PutAsJsonAsync($"api/sqlquery", Query));

        if (!response.IsSuccessStatusCode)
        {
            var msg = await response.Content.ReadAsStringAsync();
            await DialogService.ShowMessageBox("Error", msg);
        }
        else
        {
            if (row != null)
            {
                editRow.CopyTo(row, 0);
                snackBar.Add($"Row updated", Severity.Success);
            }
            else
            {
                row = editRow;
                var updrow = await response.Content.ReadFromJsonAsync<object[]>();
                for (int p = 0; p < row.Length; p++)
                {
                    row[p] = ((JsonElement)(updrow[p])).Deserialize(Type.GetType(QueryResult.Columns[p].TypeName));
                }
                var tmp = QueryResult.Rows.ToList();
                tmp.Add(row);
                QueryResult.Rows = tmp.ToArray();
                snackBar.Add($"Row added", Severity.Success);
            }
            MudDialog.Close(DialogResult.Ok(row));
        }
    }

    private async Task Delete()
    {
        if ((await DialogService.ShowMessageBox(
                    "Warning",
                    $"Do you want to delete row in table \"{QueryResult.TableName}\" ?",
                    yesText: "Delete!", cancelText: "Cancel") != null))
        {

            Query.Action = "DELETE";
            Query.Row = row;
            var response = (await Http.PutAsJsonAsync($"api/sqlquery", Query));

            if (!response.IsSuccessStatusCode)
            {
                var msg = await response.Content.ReadAsStringAsync();
                await DialogService.ShowMessageBox("Error", msg);
                Query.Action = "UPDATE";
                Query.Row = editRow;
            }
            else
            {
                var tmp = QueryResult.Rows.ToList();
                tmp.Remove(row);
                QueryResult.Rows = tmp.ToArray();
                snackBar.Add($"Row deleted", Severity.Success);
                MudDialog.Close(DialogResult.Ok((object[])(null)));
            }
        }
    }

    private async Task CodeEdit(int p)
    {
        await codeEdit.EditCode($"{MudDialog.Title}/{QueryResult.Columns[p].Name}", (string)editRow[p], async (code, _) => { editRow[p] = code; return true; });
    }

    private void Cancel()
    {        
        MudDialog.Cancel();
    }
}