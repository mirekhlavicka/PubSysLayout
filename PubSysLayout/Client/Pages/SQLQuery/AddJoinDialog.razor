@inject HttpClient Http
@inject LocalStorage localStorage
@inject SessionStorage session
@inject TableUsage tableUsage
@inject IJSRuntime js

<style>
    .CodeMirror-hints {
        z-index: 1000000 !important;
    }

    .CodeMirror {
        border: 1px solid #bdbdbd
    }

    .CodeMirror-focused {
        border: 1px solid #2b4db7
    }
</style>

@using MudBlazor.Utilities

<MudDialog DefaultFocus="DefaultFocus.None">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="d-flex">
            <MudSelect T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="JoinType" Class="mr-2">
                <MudSelectItem Value="@("INNER JOIN")" />
                <MudSelectItem Value="@("LEFT JOIN")" />
                <MudSelectItem Value="@("RIGHT JOIN")" />
            </MudSelect>
            <MudAutocomplete AutoFocus="true" T="string" Placeholder="Select table" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Text" Disabled="EditMode" SearchFunc="@SearchTable" Clearable="true" ResetValueOnEmptyText="true" spellcheck="false" MaxItems="50" DebounceInterval="200" ValueChanged="TableChanged" Value="SelectedTable" />
            <MudSwitch @bind-Checked="@searchInside" Disabled="EditMode" Color="Color.Primary" title="Search inside table or view name" Class="ml-4 mt-4 mr-n4" />
        </div>
        <div style="@($"visibility:{(String.IsNullOrEmpty(SelectedTable) ? "hidden" : "visible")}")">
            <MudText Typo="Typo.subtitle1" Class="mt-4 mb-2">ON:</MudText>
            <textarea @ref="textarea" id="taJOINON" name="taJOINON" style="display:none" />
            <MudText Typo="Typo.caption">use [CTRL-SPACE] to select table and column</MudText>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Class="ml-auto">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="OK" Variant="Variant.Filled" Disabled="@(String.IsNullOrEmpty(SelectedTable))" Class="mr-4">OK</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string Database { get; set; }
    [Parameter] public string FromTable { get; set; }
    [Parameter] public string[][] FromColumns { get; set; }

    [Parameter] public string JoinType { get; set; }
    [Parameter] public string SelectedTable { get; set; }
    [Parameter] public string JoinOn { get; set; }
    [Parameter] public bool EditMode{ get; set; }


    private bool searchInside = false;

    private ElementReference textarea;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("codemirror.create", textarea, JoinOn ?? "", "100%", "75px", "text/x-mssql");
            await js.InvokeVoidAsync("codemirror.setOption", "taJOINON", "lineNumbers", false);

            if (!String.IsNullOrEmpty(SelectedTable))
            {
                var columns = await Http.GetFromJsonAsync<string[][]>($"api/sqlquery/tablecolumns?database={Database}&tablename={SelectedTable}");
                await js.InvokeVoidAsync("codemirror.setTableHintOptions", "taJOINON", SelectedTable, columns[0]);

            }
            if (!String.IsNullOrEmpty(FromTable) && FromColumns != null && FromColumns.Length > 0)
            {
                await js.InvokeVoidAsync("codemirror.setTableHintOptions", "taJOINON", FromTable, FromColumns[0]);
            }
        }
    }

    private async Task TableChanged(string value)
    {
        if (SelectedTable != value)
        {
            SelectedTable = value;

            if (!String.IsNullOrEmpty(SelectedTable))
            {
                var columns = await Http.GetFromJsonAsync<string[][]>($"api/sqlquery/tablecolumns?database={Database}&tablename={SelectedTable}");
                await js.InvokeVoidAsync("codemirror.setTableHintOptions", "taJOINON", SelectedTable + (FromTable == SelectedTable ? "_1" : ""), columns[0]);
                await js.InvokeAsync<string>("codemirror.setValue", "taJOINON", $"{FromTable}. = {SelectedTable}{(FromTable == SelectedTable ? "_1" : "")}.");
                await tableUsage.Add(SelectedTable);
            }
            else
            {
                await js.InvokeAsync<string>("codemirror.setValue", "taJOINON", "");
            }
        }
    }


    private async Task OK()
    {
        if (String.IsNullOrEmpty(SelectedTable))
        {
            return;
        }

        JoinOn = await js.InvokeAsync<string>("codemirror.getValue", "taJOINON");

        MudDialog.Close(DialogResult.Ok(new string[] { SelectedTable, JoinOn, JoinType }));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task<IEnumerable<string>> SearchTable(string value)
    {
        var usage = await tableUsage.Load();
        if (String.IsNullOrEmpty(value) && usage.Count > 0)
        {
            return usage.OrderByDescending(u => u.Value).ThenBy(u => u.Key).Select(u => u.Key);
        }
        else
        {
            return (await Http.GetFromJsonAsync<string[]>($"api/sqlquery/searchtable?database={Database}&search={value}&searchinside={searchInside}")).OrderByDescending(tn => !string.IsNullOrEmpty(tn) && usage.ContainsKey(tn) ? usage[tn] : 0).ThenBy(tn => tn);
        }
    }
}