@page "/layoutdefinitions"
@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@inject NavigationManager uriHelper
@inject IDialogService DialogService
@inject CurrentDB currentDB
@inject Clipboard clipboard
@using PubSysLayout.Shared.Model

<PageTitle>@currentDB.Current – Layout definitions</PageTitle>

@if (layoutDefinitions == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudTooltip Text="Add new layout definition">
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" Link="layoutdefinitions/edit/0" Class="mt-0 mb-5" />
        </MudTooltip>
        <MudTooltip Text="Add module to selected layout definitions">
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.AddShoppingCart" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5 ml-3" OnClick="@(_ => OpenAddModuleDialog(false))" Disabled="@(selectedItems?.Count == 0)"/>
        </MudTooltip>
        <MudTooltip Text="Remove module from selected layout definitions">
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.RemoveShoppingCart" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5 ml-3" OnClick="@(_ => OpenAddModuleDialog(true))" Disabled="@(selectedItems?.Count == 0)"/>
        </MudTooltip>
        <MudTooltip Text="Delete selected layout definitions">
            <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5 ml-3" OnClick="DeleteSelected" Disabled="@(selectedItems?.Count == 0)"/>
        </MudTooltip>
        <MudTableFix @ref="mudTable" Items="layoutDefinitions" Hover="true" SortLabel="Sort By" AllowUnsorted="false" Elevation="5" RowsPerPage="0" FixedHeader="true" FixedFooter="true" Height="calc(100vh - 250px)"  Dense="true" 
            MultiSelection="true" @bind-SelectedItems="selectedItems"
            Filter="new Func<LayoutDefinition,bool>(FilterFunc)" OnRowClick="RowClicked" RowClass="cursor-pointer" Virtualize="true" T="LayoutDefinition">
            <ToolBarContent>
                <MudBadge Content='@($"{selectedItems.Count} / {mudTable?.GetFilteredItemsCount()}")' Color="Color.Info" Overlap="false" Class="mt-3">
                    <MudText Typo="Typo.h6">Layout definitions</MudText>
                </MudBadge>
                <MudSpacer />
                <MudSwitch Label="Hide unassigned" Color="Color.Info" @bind-Checked="hideUnassigned" />
                <MudSwitch Label="Hide assigned" Color="Color.Info" @bind-Checked="hideAssigned" />
                @*Checked="@hideUnused" CheckedChanged="@(async (bool b) => {hideUnused = b; await LoadData();})"*@
                <MudSpacer />
                <MudTextField DebounceInterval="300" @bind-Value="searchString" Placeholder="Search by name or ID" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true" ></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <col style="width:80px;" />
                <col style="width:100px;" />
                <col />
                <col style="width:20%;" />
                <col style="width:20%;" />
                <col style="width:100px;" />
                <col style="width:100px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LayoutDefinition, object>(x=>x.IdLayoutdefinition)">ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<LayoutDefinition, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
                <MudTh>Layout</MudTh>
                <MudTh>Style</MudTh>
                <MudTh>Assigned</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.IdLayoutdefinition</MudTd>
                <MudTd DataLabel="Name"><MudHighlighter Text="@context.Name" HighlightedText="@searchString" /></MudTd>
                <MudTd DataLabel="Layout">@layouts[context.IdLayout]</MudTd>
                <MudTd DataLabel="Style">@(styles.ContainsKey(context.IdStyle)?styles[context.IdStyle]:"(not selected)")</MudTd>
                <MudTd DataLabel="Assigned"><MudIcon Icon="@(assignedLayoutDefinitions.Contains(context.IdLayoutdefinition) ? Icons.Material.Outlined.CheckCircle: Icons.Material.Outlined.Circle)" Size="Size.Small" Class="mr-3 mb-n1"/></MudTd>
                <MudTd DataLabel="">
                    <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" @onclick="@(()=>Delete(@context.IdLayoutdefinition))"Size="Size.Small" Variant="Variant.Text" Title="Delete layout definition" />
                </MudTd>
            </RowTemplate>
        </MudTableFix>
    </MudContainer>
}

@code {
    private LayoutDefinition[] layoutDefinitions;
    private Dictionary<int, string> layouts;
    private Dictionary<int, string> styles;
    private HashSet<int> assignedLayoutDefinitions;

    private string searchString = "";
    private bool hideUnassigned = true;
    private bool hideAssigned = false;

    private HashSet<LayoutDefinition> selectedItems = new HashSet<LayoutDefinition>();

    MudTable<LayoutDefinition> mudTable;

    protected override async Task OnInitializedAsync()
    {
        if (currentDB.Current is null)
        {
            return;
        }

        layouts = (await Http.GetFromJsonAsync<LayoutDefinition[]>("api/layouts")).ToDictionary(l => l.IdLayout, l => l.Name);
        styles = (await Http.GetFromJsonAsync<Style[]>("api/styles")).ToDictionary(s => s.IdStyle, s => s.Name);
        assignedLayoutDefinitions = (await Http.GetFromJsonAsync<int[]>("api/layoutassigns/layoutdefinitions")).ToHashSet();

        await LoadData();
    }

    protected async Task LoadData()
    {
        layoutDefinitions = await Http.GetFromJsonAsync<LayoutDefinition[]>($"api/layoutdefinitions?hideUnused={/*hideUnused*/false}");
        selectedItems.Clear();
    }

    async Task Delete(int idLayoutdefinition)
    {
        var l = layoutDefinitions.First(x => x.IdLayoutdefinition == idLayoutdefinition);

        if ((await DialogService.ShowMessageBox(
            "Warning",
            $"Do you want to delete layout definition \"{l.Name} (id = {l.IdLayoutdefinition})\" ?",
            yesText: "Delete!", cancelText: "Cancel") != null))
        {
            await Http.DeleteAsync($"api/layoutdefinitions/{idLayoutdefinition}");
            snackBar.Add($"LayoutDefinition {idLayoutdefinition} deleted", Severity.Success);
            await LoadData();
        }
    }

    async Task DeleteSelected()
    {

        if ((await DialogService.ShowMessageBox(
            "Warning",
            $"Do you want to delete selected {selectedItems.Count} layout definitions ?",
            yesText: "Delete!", cancelText: "Cancel") != null))
        {
            foreach (var ld in selectedItems)
            {
                await Http.DeleteAsync($"api/layoutdefinitions/{ld.IdLayoutdefinition}");
                snackBar.Add($"LayoutDefinition {ld.IdLayoutdefinition} deleted", Severity.Success);
            }

            await LoadData();
        }
    }

    private async Task  OpenAddModuleDialog(bool remove)
    {
        var options = new DialogOptions { 
            MaxWidth = MaxWidth.Small, 
            CloseButton = true
        };

        var parameters = new DialogParameters();
        parameters.Add("Remove", remove);

        var dialog = DialogService.Show<LayoutDefinitions.AddModuleDialog>(remove ? "Remove module from selected layout definitions" : "Add module to selected layout definitions", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ModuleUsage mu = result.Data as ModuleUsage;

            if (!remove)
            {
                foreach (var ld in selectedItems)
                {
                    mu.IdLayoutdefinition = ld.IdLayoutdefinition;
                    using var response = await Http.PostAsJsonAsync("api/moduleusages", mu);
                    var xmu = await response.Content.ReadFromJsonAsync<ModuleUsage>();
                    snackBar.Add($"Module usage {xmu.IdModuleusage} created", Severity.Success);
                }
            }
            else
            {
                var moduleUsages = await Http.GetFromJsonAsync<ModuleUsage[]>($"api/moduleusages?id_module={mu.IdModule}");

                foreach (var ld in selectedItems)
                {
                    foreach (var mud in moduleUsages.Where(x => x.IdLayoutdefinition == ld.IdLayoutdefinition && (mu.IdSpot == -1 || x.IdSpot == mu.IdSpot)))
                    {
                        await Http.DeleteAsync($"api/moduleusages/{mud.IdModuleusage}");
                        snackBar.Add($"ModuleUsage {mud.IdModuleusage} deleted", Severity.Success);
                    }
                }
            }
        }
    }

    private bool FilterFunc(LayoutDefinition ld)
    {
        if (hideUnassigned && !assignedLayoutDefinitions.Contains(ld.IdLayoutdefinition))
        {
            return false;
        }

        if (hideAssigned && assignedLayoutDefinitions.Contains(ld.IdLayoutdefinition))
        {
            return false;
        }

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (ld.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if(ld.IdLayoutdefinition.ToString() == searchString)
            return true;

        return false;        
    }

    private void RowClicked(TableRowClickEventArgs<LayoutDefinition> p)
    {
        uriHelper.NavigateTo($"layoutdefinitions/edit/{p.Item.IdLayoutdefinition}");
    }
}