@page "/layoutdefinitions"
@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@inject NavigationManager uriHelper
@inject IDialogService DialogService
@inject CurrentDB currentDB
@using PubSysLayout.Shared.Model

<PageTitle>Layout definitions</PageTitle>

@if (layoutDefinitions == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudTooltip Text="Add new layout definition">
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" Link="layoutdefinitions/edit/0" Class="mt-0 mb-5" />
        </MudTooltip>
        <MudTable Items="layoutDefinitions" Hover="true" SortLabel="Sort By" AllowUnsorted="false" Elevation="5" RowsPerPage="0" FixedHeader="true" FixedFooter="true" Height="calc(100vh - 250px)"  Dense="true" 
            Filter="new Func<LayoutDefinition,bool>(FilterFunc)" OnRowClick="RowClicked" RowClass="cursor-pointer" Virtualize="true" T="LayoutDefinition">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Layout definitions</MudText>
                <MudSpacer />
                <MudSwitch Label="Hide unused" Color="Color.Info" Checked="@hideUnused" CheckedChanged="@(async (bool b) => {hideUnused = b; await LoadData();})" />
                <MudSpacer />
                <MudTextField DebounceInterval="500" @bind-Value="searchString" Placeholder="Search by name or ID" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true" ></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <col style="width:100px;" />
                <col />
                <col style="width:30%;" />
                <col style="width:30%;" />
                <col style="width:100px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LayoutDefinition, object>(x=>x.IdLayoutdefinition)">ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<LayoutDefinition, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
                <MudTh>Layout</MudTh>
                <MudTh>Style</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.IdLayoutdefinition</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Layout">@layouts[context.IdLayout]</MudTd>
                <MudTd DataLabel="Layout">@(styles.ContainsKey(context.IdStyle)?styles[context.IdStyle]:"(not selected)")</MudTd>
                <MudTd DataLabel="">
                    <MudTooltip Text="Delete layout definition">
                        <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" @onclick="@(()=>Delete(@context.IdLayoutdefinition))"Size="Size.Small" Variant="Variant.Text" />
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudContainer>
}

@code {
    //[Inject] private IDialogService DialogService { get; set; }

    private LayoutDefinition[] layoutDefinitions;
    private Dictionary<int, string> layouts;
    private Dictionary<int, string> styles;

    private string searchString = "";
    private bool hideUnused = true;

    protected override async Task OnInitializedAsync()
    {
        if (currentDB.Current is null)
        {
            return;
        }

        layouts = (await Http.GetFromJsonAsync<LayoutDefinition[]>("api/layouts")).ToDictionary(l => l.IdLayout, l => l.Name);
        styles = (await Http.GetFromJsonAsync<Style[]>("api/styles")).ToDictionary(s => s.IdStyle, s => s.Name);

        await LoadData();
    }

    protected async Task LoadData()
    {
        layoutDefinitions = await Http.GetFromJsonAsync<LayoutDefinition[]>($"api/layoutdefinitions?hideUnused={hideUnused}");
    }

    async Task Delete(int idLayoutdefinition)
    {
        var l = layoutDefinitions.First(x => x.IdLayoutdefinition == idLayoutdefinition);

        if ((await DialogService.ShowMessageBox(
            "Warning",
            $"Do you want to delete layout definition \"{l.Name} (id = {l.IdLayoutdefinition})\" ?",
            yesText: "Delete!", cancelText: "Cancel") != null))
        {
            await Http.DeleteAsync($"api/layoutdefinitions/{idLayoutdefinition}");
            snackBar.Add($"LayoutDefinition {idLayoutdefinition} deleted.", Severity.Success);
            await LoadData();
        }
    }

    private bool FilterFunc(LayoutDefinition ld)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (ld.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if(ld.IdLayoutdefinition.ToString() == searchString)
            return true;

        return false;
    }

    private void RowClicked(TableRowClickEventArgs<LayoutDefinition> p)
    {
        uriHelper.NavigateTo($"layoutdefinitions/edit/{p.Item.IdLayoutdefinition}");
    }
}