@page "/layoutdefinitions/edit/{idLayoutdefinition:int}"
@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager uriHelper
@inject MudBlazor.ISnackbar snackBar
@inject CurrentDB currentDB
@using PubSysLayout.Shared.Model

@if (layoutDefinition != null)
{
    <MudGrid>
        <MudItem xs="4">
            <MudFab Color="Color.Primary" Title="Copy layout definition" Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-1" Disabled="@(layoutDefinition.IdLayoutdefinition == 0)" /> 
            <MudCard Elevation="5" Class="mt-4">
                <MudCardContent>
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                        <MudTextField @bind-Value="layoutDefinition.Name" Label="Name" Required="true" RequiredError="Name is required!" />
                        <MudSelect @bind-Value="@layoutDefinition.IdLayout" Label="Layout" Validation='(int x) => x == 0 ? "Select layout" : null' Required="true">
                            <MudSelectItem Value="0">(not selected)</MudSelectItem>
                            @foreach (var l in layouts)
                            {
                                <MudSelectItem Value="@l.IdLayout">@l.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect @bind-Value="@layoutDefinition.IdStyle" Label="Style">
                            <MudSelectItem Value="0">(not selected)</MudSelectItem>
                            @foreach (var s in styles)
                            {
                                <MudSelectItem Value="@s.IdStyle">@s.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSwitch @bind-Checked="@layoutDefinition.Mainstyle" Label="Main style" Color="Color.Info" />
                    </MudForm>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="Save" Class="ml-auto" Style="margin-right:10px">Save</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GoBack">Cancel</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    @if (layoutDefinition.IdLayoutdefinition != 0)
        {
            <MudItem xs="8">
                <MudFab Color="Color.Primary" Title="Add new module" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-1" OnClick="AddModuleUsage" Disabled="@(newModuleUsage!=null || beforeEditModuleUsage != null)" />
                <MudTable @ref="moduleUsageTable" Items="layoutDefinition.ModuleUsages" Hover="true" SortLabel="Sort By" Elevation="5" Class="mt-4" Dense="true" CanCancelEdit="true" CommitEditTooltip="Commit Edit" CancelEditTooltip="Cancel Edit"
                  OnCommitEditClick="@(() => snackBar.Add("Edit saved"))" RowEditPreview="BackupModuleUsage" RowEditCancel="ResetEditModuleUsage" RowEditCommit="ModuleUsageHasBeenCommitted" IsEditRowSwitchingBlocked="true" FixedHeader="true" FixedFooter="true" Height="80vh">
                    <ColGroup>
                        <col style="width:50px;" />
                        <col style="width:30%;" />
                        <col style="width:30%;" />
                        <col style="width:80px;" />
                        <col style="width:150px;" />
                        <col style="width:50px"/>
                    </ColGroup>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ModuleUsage, object>(x=>x.IdModuleusage == 0 ? 999999 : x.IdModuleusage)">ID</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="/*new Func<ModuleUsage, object>*/(ModuleUsage x) => x.IdSpot == 0 ? String.Empty : (spots[x.IdSpot]?.Name + x.Order.ToString())">Spot</MudTableSortLabel></MudTh>
                        <MudTh>Module</MudTh>
                        <MudTh>Order</MudTh>
                        <MudTh>Cache time</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.IdModuleusage</MudTd>
                        <MudTd DataLabel="Spot">@(context.IdSpot == 0 ? "(not selected)" : spots[context.IdSpot]?.Name)</MudTd>
                        <MudTd DataLabel="Module">@(context.IdModule == 0 ? "(not selected)" : modules[context.IdModule]?.Name)</MudTd>
                        <MudTd DataLabel="Order">@context.Order</MudTd>
                        <MudTd DataLabel="Order">@context.CacheTime</MudTd>
                        <MudTd DataLabel="">                            
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Title="Delete row" @onclick="@(()=>DeleteModuleUsage(@context.IdModuleusage))"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="ID">@context.IdModuleusage<a id="editRow"/></MudTd>
                        <MudTd DataLabel="Spot">
                            <MudSelect @bind-Value="@context.IdSpot" Validation='(int x) => x == 0 ? "Select spot" : null' Required="true">
                                <MudSelectItem Value="0">(not selected)</MudSelectItem>
                                @foreach (var s in spots.Values.OrderBy(s => s.Name))
                                {
                                    <MudSelectItem Value="@s.IdSpot">@s.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Module">
                            <MudAutocomplete T="Module" SearchFunc="@SearchModule" 
                                ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="false" 
                                ToStringFunc='m => $"{m.Name} ({m.IdModule})"' @bind-Value="@context.IdModuleNavigation" MaxItems="100"
                                Validation='(Module x) => x == null ? "Type module name or ID" : null' Required="true" Placeholder="(not selected)"
                                AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"/>
                        </MudTd>
                        <MudTd DataLabel="Order">
                            <MudTextField @bind-Value="@context.Order" Required />
                        </MudTd>
                        <MudTd DataLabel="Cache time">
                            <MudNumericField  @bind-Value="@context.CacheTime" Required Step="100"/>
                        </MudTd>
                        @*<MudTd></MudTd>*@
                    </RowEditingTemplate>
                </MudTable>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Parameter] public int idLayoutdefinition { get; set; }

    LayoutDefinition layoutDefinition;
    Layout[] layouts;
    Style[] styles;
    Dictionary<int, Spot> spots;
    Dictionary<int, Module> modules;

    private ModuleUsage beforeEditModuleUsage = null;
    private ModuleUsage newModuleUsage = null;

    bool success;
    string[] errors = { };

    MudForm form;
    MudTable<ModuleUsage> moduleUsageTable;

    protected async override Task OnParametersSetAsync()
    {
        if (currentDB.Current is null)
        {
            return;
        }

        layouts = await Http.GetFromJsonAsync<Layout[]>("api/layouts");
        styles = await Http.GetFromJsonAsync<Style[]>("api/styles");
        spots = (await Http.GetFromJsonAsync<Spot[]>("api/spots")).ToDictionary(s => s.IdSpot);
        modules = (await Http.GetFromJsonAsync<Module[]>("api/modules")).ToDictionary(m => m.IdModule);

        if (idLayoutdefinition == 0)
        {
            layoutDefinition = new LayoutDefinition();
        }
        else
        {
            layoutDefinition = await Http.GetFromJsonAsync<LayoutDefinition>($"api/layoutdefinitions/{idLayoutdefinition}");
            foreach (var mu in layoutDefinition.ModuleUsages)
            {
                mu.IdModuleNavigation = modules[mu.IdModule];
            }
        }
    }

    async Task Save()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            return;
        }

        if (layoutDefinition.IdLayoutdefinition != 0)
        {
            await Http.PutAsJsonAsync($"api/layoutdefinitions/{idLayoutdefinition}", layoutDefinition);
            uriHelper.NavigateTo("layoutdefinitions");
        }
        else
        {
            using var response = await Http.PostAsJsonAsync("api/layoutdefinitions", layoutDefinition);
            var ld = await response.Content.ReadFromJsonAsync<LayoutDefinition>();
            uriHelper.NavigateTo($"layoutdefinitions/edit/{ld.IdLayoutdefinition}");
        }

        snackBar.Add($"LayoutDefinition {layoutDefinition.Name} saved.", Severity.Success);
    }

    private async void GoBack()
    {
        await js.InvokeVoidAsync("history.back");
    }

    private void BackupModuleUsage(object element)
    {
        ModuleUsage b = element as ModuleUsage;

        beforeEditModuleUsage = new()
        {
            IdModule = b.IdModule,
            IdSpot = b.IdSpot,
            Order = b.Order,
            CacheTime = b.CacheTime
        };

        StateHasChanged();
    }

    private void ResetEditModuleUsage(object element)
    {
        if (beforeEditModuleUsage != null)
        {
            ModuleUsage mu = element as ModuleUsage;
            mu.IdModule = beforeEditModuleUsage.IdModule;
            mu.IdSpot = beforeEditModuleUsage.IdSpot;
            mu.Order = beforeEditModuleUsage.Order;
            mu.CacheTime = beforeEditModuleUsage.CacheTime;
            beforeEditModuleUsage = null;
            StateHasChanged();
        }

        if (newModuleUsage != null)
        {
            layoutDefinition.ModuleUsages.Remove(newModuleUsage);
            newModuleUsage = null;
            StateHasChanged();
        }
    }

    private async void ModuleUsageHasBeenCommitted(object element)
    {
        beforeEditModuleUsage = null;
        newModuleUsage = null;

        ModuleUsage mu = element as ModuleUsage;

        if (mu.IdModuleNavigation != null)
        {
            mu.IdModule = mu.IdModuleNavigation.IdModule;
            mu.IdModuleNavigation = null;
        }

        if (mu.IdModuleusage != 0)
        {
            await Http.PutAsJsonAsync($"api/moduleusages/{mu.IdModuleusage}", mu);
        }
        else
        {
            using var response = await Http.PostAsJsonAsync("api/moduleusages", mu);
            var xmu = await response.Content.ReadFromJsonAsync<ModuleUsage>();
            mu.IdModuleusage = xmu.IdModuleusage;
            StateHasChanged();
        }
        mu.IdModuleNavigation = modules[mu.IdModule];
    }

    private async void AddModuleUsage()
    {
        newModuleUsage = new ModuleUsage
            {
                IdLayoutdefinition = layoutDefinition.IdLayoutdefinition
            };

        layoutDefinition.ModuleUsages.Add(newModuleUsage);

        await Task.Delay(300);

        await InvokeAsync(() =>
        {
            moduleUsageTable.SetEditingItem(newModuleUsage);                
            StateHasChanged();
        });

        await js.InvokeVoidAsync("scrollToElementId", "editRow");
    }

    private async Task DeleteModuleUsage(int IdModuleusage)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete ModuleUsage {IdModuleusage}) ?"))
        {
            var mu = layoutDefinition.ModuleUsages.First(x => x.IdModuleusage == IdModuleusage);
            layoutDefinition.ModuleUsages.Remove(mu);
            await Http.DeleteAsync($"api/moduleusages/{IdModuleusage}");
            snackBar.Add($"ModuleUsage {IdModuleusage} deleted.", Severity.Success);           
        }
    }

    private async Task<IEnumerable<Module>> SearchModule(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return modules.Values.OrderByDescending(m => m.IdModule).Take(10);

        return modules.Values.Where(m => m.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase) || m.IdModule.ToString() == value).OrderBy(m => m.Name);
    }
}
