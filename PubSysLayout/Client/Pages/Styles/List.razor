@page "/styles"
@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@inject NavigationManager uriHelper
@inject IDialogService DialogService
@inject CurrentDB currentDB
@inject Clipboard clipboard


@using PubSysLayout.Shared.Model

<PageTitle>@currentDB.Current – Styles</PageTitle>

@if (items == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudTooltip Text="Add new style">
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5" OnClick="@(()=> Addtem())" Disabled="@(newItem != null || beforeEditItem != null)"/>
        </MudTooltip>
        <MudTooltip Text="Paste style">
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ContentPaste" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5 ml-3" OnClick="@(()=> {Addtem(clipboard.Content as Style); clipboard.Content = null; })" Disabled="@(!(clipboard.Content is Style) || newItem !=null || beforeEditItem != null)"/>
        </MudTooltip>
        <MudTooltip Text="Delete selected styles">
            <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5 ml-3" OnClick="DeleteSelected" Disabled="@(selectedItems?.Count == 0 || newItem !=null || beforeEditItem != null)"/>
        </MudTooltip>
        <MudTableFix @ref="mudTable" Items="items" Hover="true" SortLabel="Sort By" AllowUnsorted="false" Elevation="5" RowsPerPage="0" FixedHeader="true" FixedFooter="true" Height="calc(100vh - 250px)"  Dense="true" 
            Filter="new Func<Style,bool>(FilterFunc)" 
            MultiSelection="true" @bind-SelectedItems="selectedItems"
            CommitEditTooltip="Commit Edit" CancelEditTooltip="Cancel Edit" RowEditPreview="Backup" RowEditCancel="ResetEdit" RowEditCommit="Committed" CanCancelEdit="true" IsEditRowSwitchingBlocked="true" OnRowClick="RowClicked" Virtualize="false" T="Style">
            <ToolBarContent>
                <MudBadge Content='@($"{selectedItems.Count} / {mudTable?.GetFilteredItemsCount()}")' Color="Color.Info" Overlap="false" Class="mt-3">
                    <MudText Typo="Typo.h6">Styles</MudText>
                </MudBadge>
                <MudSpacer />
                <MudSwitch Label="Hide unused" Color="Color.Info" @bind-Checked="hideUnused" Disabled="@(newItem !=null || beforeEditItem != null)"/>
                <MudSwitch Label="Hide used" Color="Color.Info" @bind-Checked="hideUsed" Disabled="@(newItem !=null || beforeEditItem != null)"/>
                <MudSpacer />
                <MudTextField DebounceInterval="300" @bind-Value="searchString" Placeholder="Search by name, Url or ID" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true" ></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <col style="width:80px;" />
                <col style="width:100px;" />
                <col style="width:20%;" />
                <col  />
                <col style="width:100px;" />
                <col style="width:100px;" />
                <col style="width:100px;" />
                <col style="width:0px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Style, object>(x => x.IdStyle == 0 ? 999999 :  x.IdStyle)">ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy='new Func<Style, object>(x => x.IdStyle == 0 ? "ZZZZZ" :  x.Name)'>Name</MudTableSortLabel></MudTh>
                <MudTh>Url</MudTh>
                <MudTh>Skin</MudTh>
                <MudTh>Used</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.IdStyle</MudTd>
                <MudTd DataLabel="Name"><MudHighlighter Text="@context.Name" HighlightedText="@searchString" /></MudTd>
                <MudTd DataLabel="Url"><MudHighlighter Text="@context.Url" HighlightedText="@searchString" /></MudTd>
                <MudTd DataLabel="Skin"><MudIcon Icon="@(@context.Skin ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)" Size="Size.Small" Class="mr-3 mb-n1"/></MudTd>
                <MudTd DataLabel="Used"><MudIcon Icon="@(usedItems.Contains(context.IdStyle) ? Icons.Material.Outlined.CheckCircle : Icons.Material.Outlined.Circle)" Size="Size.Small" Class="mr-3 mb-n1" /></MudTd>
                <MudTd DataLabel="">
                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" @onclick="@(()=> clipboard.Content = context)" Color="Color.Default" Size="Size.Small" Variant="Variant.Text" Title="Copy" />
                    <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" @onclick="@(()=>Delete(@context.IdStyle))"Size="Size.Small" Variant="Variant.Text" Title="Delete style"/>
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="ID">@context.IdStyle<a id="editRow" style="position:relative; top: -80px" /></MudTd>
                <MudTd DataLabel="Name">                
                    <MudTextField Margin="Margin.Dense" @bind-Value="@context.Name" Required Immediate="false" DebounceInterval="200" spellcheck="false" />
                </MudTd>
                <MudTd DataLabel="Url">                
                    <MudTextField Margin="Margin.Dense" @bind-Value="@context.Url" Required Immediate="false" DebounceInterval="200" spellcheck="false" />
                </MudTd>
                <MudTd DataLabel="Active">
                    <MudCheckBox @bind-Checked="@context.Skin"></MudCheckBox>
                </MudTd>
                <MudTd DataLabel="Used"><MudIcon Icon="@(usedItems.Contains(context.IdStyle) ? Icons.Material.Outlined.CheckCircle : Icons.Material.Outlined.Circle)" Size="Size.Small" Class="mr-3 mb-n1" /></MudTd>
            </RowEditingTemplate>
        </MudTableFix>
    </MudContainer>
}

@code {

    private List<Style> items;
    private HashSet<int> usedItems;

    private string searchString = "";
    private bool hideUnused = true;
    private bool hideUsed = false;

    private Style beforeEditItem = null;
    private Style newItem= null;
    private int justAddedID = 0;

    MudTable<Style> mudTable;

    private HashSet<Style> selectedItems = new HashSet<Style>();

    protected override async Task OnInitializedAsync()
    {
        if (currentDB.Current is null)
        {
            return;
        }

        await LoadData();
    }

    protected async Task LoadData()
    {
        usedItems = (await Http.GetFromJsonAsync<int[]>("api/layoutdefinitions/styles")).ToHashSet();
        items = await Http.GetFromJsonAsync<List<Style>>($"api/styles");
        selectedItems.Clear();
    }

    private void Backup(object element)
    {
        Style it = element as Style;

        beforeEditItem  = new()
            {
                Name = it.Name,
                Url = it.Url,
                Skin =it.Skin
            };

        StateHasChanged();
    }

    private void ResetEdit(object element)
    {
        if (beforeEditItem != null)
        {
            Style it = element as Style;
            it.Name = beforeEditItem.Name;
            it.Url = beforeEditItem.Url;
            it.Skin = beforeEditItem.Skin;

            beforeEditItem = null;
            StateHasChanged();
        }

        if (newItem != null)
        {
            items.Remove(newItem);
            newItem = null;
            StateHasChanged();
        }
    }

    private async void Committed(object element)
    {
        beforeEditItem = null;
        newItem = null;

        Style it = element as Style;

        if (it.IdStyle != 0)
        {
            await Http.PutAsJsonAsync($"api/styles/{it.IdStyle}", it);
            snackBar.Add($"Style {it.Name} saved", Severity.Success);
        }
        else
        {
            using var response = await Http.PostAsJsonAsync("api/styles", it);
            var x = await response.Content.ReadFromJsonAsync<Style>();
            it.IdStyle = x.IdStyle;
            justAddedID = it.IdStyle;
            snackBar.Add($"Style {it.Name} created", Severity.Success);
        }

        StateHasChanged();
    }

    private async void Addtem(Style copy = null)
    {
        newItem = new Style
        {
            Name = copy?.Name ?? "",
            Url = copy?.Url ?? "",
            Skin = copy?.Skin ?? false
        };

        items.Add(newItem);

        await Task.Delay(300);

        await InvokeAsync(() =>
        {
            mudTable.SetEditingItem(newItem);
            StateHasChanged();
        });

        await js.InvokeVoidAsync("scrollToElementId", "editRow");
    }


    async Task Delete(int id)
    {
        var it = items.First(x => x.IdStyle == id);

        if ((await DialogService.ShowMessageBox(
            "Warning",
            $"Do you want to delete style \"{it.Name} (id = {it.IdStyle})\" ?",
            yesText: "Delete!", cancelText: "Cancel") != null))
        {
            await Http.DeleteAsync($"api/styles/{id}");
            snackBar.Add($"Style {id} deleted", Severity.Success);
            await LoadData();
        }
    }

    async Task DeleteSelected()
    {
        if ((await DialogService.ShowMessageBox(
            "Warning",
            $"Do you want to delete selected {selectedItems.Count} styles ?",
            yesText: "Delete!", cancelText: "Cancel") != null))
        {
            foreach (var it in selectedItems)
            {
                await Http.DeleteAsync($"api/styles/{it.IdStyle}");
                snackBar.Add($"Style {it.IdStyle} deleted", Severity.Success);
            }
            await LoadData();
        }
    }

    private bool FilterFunc(Style i)
    {
        if (i.IdStyle == 0 || i.IdStyle == justAddedID)
        {
            return true;       
        }

        if (hideUnused && !usedItems.Contains(i.IdStyle))
        {
            return false;
        }

        if (hideUsed && usedItems.Contains(i.IdStyle))
        {
            return false;
        }

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (i.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) || i.Url.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if(i.IdStyle.ToString() == searchString)
            return true;

        return false;
    }

    private async void RowClicked(TableRowClickEventArgs<Style> p)
    {
        await Task.Delay(300);
        await js.InvokeVoidAsync("focusAt", p.MouseEventArgs.ClientX, p.MouseEventArgs.ClientY + 5);
    }
}