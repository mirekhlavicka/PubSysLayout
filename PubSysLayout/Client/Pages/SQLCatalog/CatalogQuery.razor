@page "/catquery"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@using System.Net.Http.Json
@using System.Text.Json.Serialization;
@using System.Text.Json;
@using PubSysLayout.Shared.SQLCatalog;

@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@inject LocalStorage localStorage
@inject NavigationManager uriHelper
@inject IDialogService DialogService
@inject Clipboard clipboard
@inject SessionStorage session

<style>
    .valTD {
        max-width: 400px;
        overflow-x: hidden;
        white-space: nowrap;
        position: relative
    }

        .valTD .btnMore {
            display: none;
            position: absolute;
            z-index: 100;
            right: 2px;
            top: 7px;
            width: 40px;
            height: 20px;
            border-radius: 4px;
            background-color: #e0e0e0;
            padding-left: 14px;
            cursor: pointer;
        }

        .valTD:hover .btnMore {
            display: block
        }

    .btnMore:hover {
        background-color: #b0b0b0;
    }

    .mud-table-dense * .mud-table-row .mud-table-cell {
        padding-inline-end: 5px;
    }

    .selected {
        background-color: #7dc2ff !important;
    }

        .selected > td, .selected .mud-icon-default {
            color: white !important;
        }

    .smallField {
        display: inline-flex;
        width: 300px;
        margin-right: 25px;
    }
</style>

<PageTitle>Catalog query – @query.Database</PageTitle>

<MudTabs Elevation="5" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="tabs" KeepPanelsAlive="true" @onclick="() => flagsFilterOpened = false " ActivePanelIndexChanged="(index) => {if(mudTable != null && !flagsFilterOpened){ mudTable.StopRender = (index == 0);}}">
    <MudTabPanel Text="Query" Icon="@Icons.Material.Filled.Build">
        <div class="d-flex mb-4">
            <div class="d-flex" style="max-width:800px;flex-grow:3">
                <MudAutocomplete T="string" Label="Database" AnchorOrigin="Origin.BottomCenter" Value="query.Database" ValueChanged="DBChanged" FullWidth="false" Variant="Variant.Outlined" Class="mr-6" SearchFunc="@SearchDB" Clearable="true" spellcheck="false" MaxItems="100" />
                <MudSelect Value="@query.IdForm" ValueChanged="CatChanged" Label="Catalog" Placeholder="Select catalog" Required="false" T="int" Variant="Variant.Outlined" Class="mr-6" ToStringFunc='(id) => id != 0 ? catList.FirstOrDefault(kv => kv.Key == id).Value : "" '>
                    @foreach (var kv in catList)
                    {
                        <MudSelectItem Value="@kv.Key">@kv.Value</MudSelectItem>
                    }
                </MudSelect>
                <MudFab OnClick="async () => await LoadData()" Disabled="@(query.IdForm == 0)" StartIcon="@Icons.Material.Filled.PlayArrow" Color="Color.Default" IconColor="Color.Secondary" IconSize="Size.Large" Size="Size.Large" Label="Run&nbsp;" DisableElevation="true" accesskey="r" Style="margin-top:10px" Class="mr-6"></MudFab>
                <MudFab OnClick="async () => await ShowSQL()" Disabled="@(query.IdForm == 0)" StartIcon="@Icons.Material.Filled.ArrowForward" Color="Color.Default" IconColor="Color.Default" IconSize="Size.Large" Size="Size.Large" Label="SQL&nbsp;" DisableElevation="true" Style="margin-top:10px"></MudFab>
            </div>
            <MudSpacer />
        </div>
        <MudDivider />

        <div style="height: calc(100vh - 290px); overflow-y: scroll; " class="d-flex">
            <div class="flex-grow-1 mr-4" style="flex-basis: 50%">
                <MudText Typo="Typo.subtitle1" Class="mt-4">Include fields:</MudText>
                @foreach (var fc in formControls)
                {
                    <MudCheckBox @key="fc.IdFControl" Dense="true" T="bool" title="include in SELECT" Class="mt-3 smallField" Label="@fc.Title" Checked="@query.Include.Contains(fc.IdFControl)" CheckedChanged="@(ch => {if (ch) {query.Include.Add(fc.IdFControl);} else {query.Include.Remove(fc.IdFControl);}})"></MudCheckBox>
                }

            </div>
            <div class="flex-grow-1 mr-4" style="flex-basis: 50%">
                <MudText Typo="Typo.subtitle1" Class="mt-4">Filter:</MudText>
                @foreach (var fc in formControls.Where(c => c.Searchable))
                {
                    if (new int[] { 2, 3, 4, 5 }.Contains(fc.IdControl) && listControlData.ContainsKey(fc.IdFControl))
                    {
                        <div class="smallField" @key="fc.IdFControl">
                        <MudSelect Label="@fc.Title" Variant="Variant.Text" T="string" @bind-Value="query.Where[fc.IdFControl]" Clearable="true">
                            @foreach (var li in listControlData[fc.IdFControl].Items)
                            {
                                <MudSelectItem Value="@li.Value">@li.Text</MudSelectItem>
                            }
                        </MudSelect>
                        </div>
                    }
                    else
                    {
                        <MudTextField @key="fc.IdFControl" Class="smallField" Label="@fc.Title" Variant="Variant.Text" T="string" @bind-Value="query.Where[fc.IdFControl]" Clearable="true"></MudTextField>
                    }
                }
            </div>
        </div>

    </MudTabPanel>
    <MudTabPanel Text="Results" Icon="@Icons.Material.Filled.Dataset">
        @if (queryResult != null && queryResult.Columns.Length > 0)
        {
            <MudTableFix @ref="mudTable" Items="@queryResult.Rows" RowsPerPage="50" SortLabel="Sort By" AllowUnsorted="true" Virtualize="false"
                     Hover="true" FixedHeader="true" FixedFooter="true" HorizontalScrollbar="true" Dense="true" Bordered="true" Striped="true"
                     Height="calc(100vh - 323px)" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" Elevation="2"
                     Filter="new Func<object[],bool>(FilterFunc)"
                     RowClassFunc="@SelectedRowClassFunc"
                     T="object[]">
                <ToolBarContent>
                    <MudTooltip Text="Copy tabular data to clipboard">
                        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Medium" IconSize="Size.Medium" Class="mt-4 mb-4 ml-3" OnClick='async () => await CopyToClipboard(GetTableText(), "Tabular data was copied to clipboard")' Disabled="@(queryResult == null || queryResult.Columns.Length == 0)" />
                    </MudTooltip>
                    <MudSpacer />
                    <div class="d-flex">
                        @if (flagsFilter.Count > 0)
                        {
                            <div class="d-flex" style="width:130px; padding-bottom: 2px" @onclick:stopPropagation="true">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => flagsFilterOpened = !flagsFilterOpened)" EndIcon="@(flagsFilterOpened ? Icons.Material.Filled.ArrowDropUp : Icons.Material.Filled.ArrowDropDown)">Filter</MudButton>
                                <MudPopover Open="flagsFilterOpened" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                                    <MudPaper Outlined="true" Class="px-4 py-4" MinWidth="200px">
                                        @foreach (var fi in flagsFilter.Keys)
                                        {
                                            <MudCheckBox @bind-Checked="flagsFilter[fi]" Color="@Color.Secondary" TriState="true">@queryResult.Columns[fi].Name</MudCheckBox>
                                        }
                                        <MudButton OnClick="@(() => { foreach(var f in flagsFilter){ flagsFilter[f.Key] = null;} })">Reset</MudButton>
                                    </MudPaper>
                                </MudPopover>
                            </div>
                        }
                        <MudTextField DebounceInterval="300" @bind-Value="searchString" Placeholder="Search by text or ID" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true" Style="width:350px"></MudTextField>
                    </div>
                </ToolBarContent>
                <HeaderContent>
                    @for (int i = 0; i < queryResult.Columns.Length; i++)
                    {
                        int p = i; //Intermediate counter
                        <MudTh>
                            <MudTableSortLabel InitialDirection="SortDirection.None" SortBy="new Func<object[], object>(row => row[p])">
                                @(queryResult.Columns[p].Name)
                            </MudTableSortLabel>
                        </MudTh>
                    }
                    <MudTh />
                </HeaderContent>
                <RowTemplate>
                    @foreach (var (val, index) in context.Select(((val, index) => (val, index))))
                    {
                        <MudTd Class="valTD">
                            @if (val is String && ((string)val).StartsWith("http"))
                            {
                                <a href="@val" title="@val" target="_blank"><MudIcon Icon="@Icons.Material.Filled.Forward" Color="Color.Primary" Size="Size.Small" Class="mr-3 mb-n1" /></a>
                            }
                            else if (val is String)
                            {
                                if (!String.IsNullOrEmpty(searchString))
                                {
                                    <MudHighlighter Text="@(val.ToString())" HighlightedText="@searchString" />
                                }
                                else
                                {
                                    @val
                                }
                                @if (((string)val).Length > 50)
                                {
                                    <div class="btnMore" title="@val" @onclick="async () => { mudTable.StopRender = true; showMoreText = val.ToString(); showMore = true; await Task.Delay(300); mudTable.StopRender =false; await focusShowMoreDialog.FocusAsync();}">...</div>
                                }
                            }
                            else if (val is Boolean)
                            {
                                <MudIcon Icon="@((bool)val ? Icons.Material.Outlined.CheckCircle : Icons.Material.Outlined.Circle)" Size="Size.Small" Class="mr-3 mb-n1" />
                            }
                            else
                            {
                                @Format(val, index)
                            }
                        </MudTd>
                    }
                    <MudTd DataLabel="" Class="valTD">
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{50, 100, 200, 500, 1000}" />
                </PagerContent>
            </MudTableFix>
            <MudDialog @bind-IsVisible="showMore" Options="showMoreDialogOptions">
                <DialogContent>
                    <MudPaper Elevation="0" Class="mt-4">
                        <MudTextField T="string" Variant="Variant.Filled" @bind-Value="showMoreText" Lines="25" AutoFocus="false" ReadOnly="true" />
                    </MudPaper>
                    <div class="fixed pointer-events-none" tabindex="-1" @ref="focusShowMoreDialog"></div>
                </DialogContent>
                <DialogActions>
                    <MudButton Variant="Variant.Filled" IconColor="Color.Primary" Color="Color.Default" OnClick='async () => await CopyToClipboard(showMoreText, "Text was copied to clipboard")' Class="ml-auto mr-4" StartIcon="@Icons.Material.Filled.ContentCopy">Copy to clipboard</MudButton>
                </DialogActions>
            </MudDialog>
        }
        else if (errorMsg != "")
        {
            <MudAlert Severity="Severity.Error">@errorMsg</MudAlert>
        }
    </MudTabPanel>
</MudTabs>

<MudOverlay Visible="@inProgress" DarkBackground="true" AutoClose="false" />

@code {
    private MudTableFix<object[]> mudTable;
    private MudTabs tabs;

    private string[] dbList = { };

    private KeyValuePair<int, string>[] catList = { };

    private FormControl[] formControls = { };
    private Dictionary<int, ListControlData> listControlData = null;

    private Query query

    {
        get
        {
            session["CQ_query"] ??= new Query
                {
                    Database = "",
                    IdForm = 0,
                    Include = new HashSet<int>(),
                    Where = new Dictionary<int, string>()
                };
            return session["CQ_query"] as Query;
        }
    }

    private PubSysLayout.Shared.SQLQuery.QueryResult queryResult = null;
    private string errorMsg = "No result";
    private bool inProgress = false;

    private string searchString = "";

    public bool flagsFilterOpened = false;
    private Dictionary<int, bool?> flagsFilter = null;

    bool showMore = false;
    string showMoreText = "";
    private DialogOptions showMoreDialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true, DisableBackdropClick = false, CloseButton = true, NoHeader = false, MaxWidth = MaxWidth.Large };
    private ElementReference focusShowMoreDialog;


    protected override async Task OnInitializedAsync()
    {
        dbList = await Http.GetFromJsonAsync<string[]>("api/sqlquery/dblist");

        if (String.IsNullOrEmpty(query.Database))
        {
            query.Database = await Http.GetStringAsync("api/sqlquery/defaultdb");
        }

        await LoadCatList();
        await LoadFormControls(query.IdForm == 0);
    }

    private async Task DBChanged(string value)
    {
        if (query.Database != value)
        {
            query.Database = value;
            await LoadCatList();
            query.IdForm = 0;
            query.Where.Clear();
            query.Include.Clear();
            await LoadFormControls(true);
        }
    }

    private async Task CatChanged(int value)
    {
        query.IdForm = value;
        if (query.IdForm != 0)
        {
            queryResult = null;
            errorMsg = "No result";
            await LoadFormControls(true);
        }
    }

    private async Task LoadCatList()
    {
        if (!String.IsNullOrEmpty(query.Database))
        {
            try
            {
                catList = await Http.GetFromJsonAsync<KeyValuePair<int, string>[]>($"api/sqlcatalog/catlist?database={query.Database}");
            }
            catch
            {
                catList = new KeyValuePair<int, string>[] { };
            }
        }
        else
        {
            catList = new KeyValuePair<int, string>[] { };
        }
    }

    private async Task LoadFormControls(bool clear)
    {
        if (!String.IsNullOrEmpty(query.Database) && query.IdForm != 0)
        {
            try
            {
                formControls = await Http.GetFromJsonAsync<FormControl[]>($"api/sqlcatalog/formcontrols?database={query.Database}&id_form={query.IdForm}");
                listControlData = await Http.GetFromJsonAsync<Dictionary<int, ListControlData>>($"api/sqlcatalog/listcontroldata?database={query.Database}&id_form={query.IdForm}");
            }
            catch
            {
                formControls = new FormControl[] { };
                listControlData = new Dictionary<int, ListControlData>();
            }
        }
        else
        {
            formControls = new FormControl[] { };
            listControlData = new Dictionary<int, ListControlData>();
        }
        if (clear)
        {
            query.Where = formControls.Where(fc => fc.Searchable).ToDictionary(fc => fc.IdFControl, fc => "");
            query.Include = formControls.Where(fc => fc.ShowInList).Select(fc => fc.IdFControl).ToHashSet();
        }
    }

    protected async Task LoadData()
    {
        inProgress = true;
        await session.Save();

        if (queryResult != null)
        {
            queryResult = null;
            StateHasChanged();
        }

        try
        {

            var res = (await Http.PostAsJsonAsync("api/sqlcatalog", query));

            if (res.IsSuccessStatusCode)
            {
                errorMsg = "";
                queryResult = await res.Content.ReadFromJsonAsync<PubSysLayout.Shared.SQLQuery.QueryResult>();
                if (queryResult.Columns.Length == 0)
                {
                    errorMsg = "No result";
                }
                else
                {
                    ConvertJsonElements();
                    flagsFilter = queryResult.Columns.Select((c, i) => new { i, c.TypeName }).Where(c => c.TypeName == typeof(bool).ToString()).ToDictionary(c => c.i, c => (bool?)null);
                }
            }
            else
            {
                errorMsg = await res.Content.ReadAsStringAsync();
                queryResult = null;
            }
        }
        catch (HttpRequestException exc)
        {
            errorMsg = exc.Message;
            queryResult = null;
        }
        inProgress = false;
        tabs.ActivatePanel(1);
    }

    protected async Task ShowSQL()
    {
        await session.Save();
        using var response = await Http.PostAsJsonAsync("api/sqlcatalog/sql", query);
        var SQL = await response.Content.ReadAsStringAsync();
        await localStorage.SetAsync("SQLQuery_SQL", SQL);
        await localStorage.SetAsync("SQLQuery_currentDB", query.Database);
        uriHelper.NavigateTo("sqlquery");
    }

    private bool FilterFunc(object[] row)
    {
        bool searchResult = false;

        if (string.IsNullOrWhiteSpace(searchString))
            searchResult = true;

        if (!searchResult && Int32.TryParse(searchString, out int num))
        {
            if (row.Any(v => (v is int) && (int)v == num))
            {
                searchResult = true;
            }
        }

        if (!searchResult && !row.Any(v => (v is string) && ((string)v).Contains(searchString, StringComparison.CurrentCultureIgnoreCase)))
        {
            return false;
        }

        return flagsFilter.Where(fv => fv.Value.HasValue).All(fv => (bool)row[fv.Key] == fv.Value);
    }

    private void ConvertJsonElements()
    {
        foreach (var row in queryResult.Rows)
        {
            for (int p = 0; p < row.Length; p++)
            {
                try
                {
                    row[p] = ((JsonElement)(row[p])).Deserialize(Type.GetType(queryResult.Columns[p].TypeName));
                }
                catch
                {
                    row[p] = null;
                }
            }
        }
    }

    private async Task CopyToClipboard(string text, string msg)
    {
        await js.InvokeVoidAsync("navigator.clipboard.writeText", text);
        snackBar.Add(msg, Severity.Success);
    }

    private string GetTableText(string divider = "\t", string qualifier = "\"")
    {
        string th = String.Join($"{qualifier}{divider}{qualifier}", queryResult.Columns.Select(c => c.Name));
        string td = String.Join($"{qualifier}\n{qualifier}", queryResult.Rows.Select(r => String.Join($"{qualifier}{divider}{qualifier}", r.Select(v => (v ?? "").ToString().Replace(qualifier, $"{qualifier}{qualifier}").Replace(divider, "")))));
        return $"{qualifier}{th}{qualifier}\n{qualifier}{td}{qualifier}";
    }

    private string Format(object val, int index)
    {
        if (val == null)
        {
            return "NULL";
        }
        switch (Type.GetTypeCode(val.GetType()))
        {
            case TypeCode.Int32:
                return ((Int32)val).ToString(queryResult.Columns[index].Name.StartsWith("id_") ? "g0" : "n0");
            case TypeCode.DateTime:
                return ((DateTime)val).ToString("g");
            default:
                return val.ToString();
        }
    }

    private string SelectedRowClassFunc(object[] element, int rowNumber)
    {
        if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private async Task<IEnumerable<string>> SearchDB(string value)
    {
        if (string.IsNullOrEmpty(value))
            return dbList;
        return dbList.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}