@using System.Net
@using PubSysLayout.Shared.Files

@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar

<div class="imgItem border-0">
    @if (IdFile > 0)
    {
        <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Class="btnRemoveImage" OnClick="@(async _ => {IdFile = 0; await IdFileChanged.InvokeAsync(IdFile);})" />
    }
    <MudText Typo="Typo.caption">@Title</MudText>

    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles"
                    Hidden="@false"
                    InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                   InputStyle="opacity:0; cursor: pointer"
                    title="Drag and drop file here or click"
                    @ondragenter="@SetDragClass"
                    @ondragleave="@ClearDragClass"
                    @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="330px" Outlined="true" Class="@_dragClass">
                @if (IdFile > 0)
                {
                    <img src="@($"https://{ServerName}/getthumbnail.aspx?q=60&crop=0&h=300&w=300&id_file={IdFile}")" />
                }
            </MudPaper>
@*             <MudIconButton HtmlTag="label"
                           Color="Color.Info"
                           Icon="@Icons.Material.Filled.PhotoCamera"
                           for="@context.Id">
            </MudIconButton>
 *@        </ButtonTemplate>
    </MudFileUpload>
</div>
@code {
    [Parameter] public int IdFile { get; set; }

    [Parameter]
    public EventCallback<int> IdFileChanged { get; set; }

    [Parameter]
    public string Title { get; set; }


    [Parameter] public string ServerName { get; set; }

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-1 mud-width-full mud-height-full z-10 imgContainer";
    private string _dragClass = DefaultDragClass;


    // IBrowserFile file = null;
    // string ImgUrl = "";

    async private void UploadFiles(IBrowserFile file)
    {
        //files.Add(file);
        //TODO upload the files to the server

        var fileData = new FileData();
        var buffers = new byte[file.Size];
        await file.OpenReadStream(maxAllowedSize: 5120000).ReadAsync(buffers);
        fileData.FileName = file.Name;
        fileData.FileSize = file.Size;
        fileData.FileType = file.ContentType;
        fileData.ImageBytes = buffers;

        var res = await Http.PostAsJsonAsync($"api/sqlcatalog/savefile?serverName={ServerName}", fileData);

        if (res.IsSuccessStatusCode)
        {
            var tmp = await res.Content.ReadAsStringAsync();
            IdFile = Int32.Parse(tmp.Split(":")[0]);
            StateHasChanged();
            await IdFileChanged.InvokeAsync(IdFile);
        }

        //this.file = file;
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    // public async Task<string> UploadProductImage(MultipartFormDataContent content)
    // {
    //     // var content = new MultipartFormDataContent();
    //     // content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
    //     // content.Add(/*new StreamContent(ms, Convert.ToInt32(ms.Length))*/new StreamContent(file.OpenReadStream(5120000)), "image", file.Name);
    //     // ImgUrl = await UploadProductImage(content);


    //     var postResult = await Http.PostAsync($"https://{ServerName}/siteadmin1/PubSystem.Controls.Admin.Files/Upload.ashx?nozip=1&id_user=1", content);
    //     var postContent = await postResult.Content.ReadAsStringAsync();
    //     if (!postResult.IsSuccessStatusCode)
    //     {
    //         throw new ApplicationException(postContent);
    //     }
    //     else
    //     {
    //         var imgUrl = postContent;// Path.Combine("https://localhost:5011/", postContent);
    //         return imgUrl;
    //     }
    // }
}
