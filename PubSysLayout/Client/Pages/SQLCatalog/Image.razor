@using System.Net
@using PubSysLayout.Shared.Files
@using PubSysLayout.Shared.SQLCatalog

@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar

<div class="imgItem">
    @if (IdFile > 0)
    {
        <MudIconButton Href="@($"https://{ServerName}/getfile.aspx?id_file={IdFile}")" Title="Show full image" Target="_blank" Icon="@Icons.Material.Filled.Forward" Color="Color.Primary" Size="Size.Medium" Class="btnShowImage" />
        <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Class="btnRemoveImage" OnClick="@(async _ => {IdFile = 0; await IdFileChanged.InvokeAsync(IdFile);})" Title="Remove image" />
    }
    <MudText Typo="Typo.caption">@Title</MudText>

    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles"
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                   InputStyle="opacity:0; cursor: pointer"
                   title="Drag and drop file here or click"
    @ondragenter="@SetDragClass"
    @ondragleave="@ClearDragClass"
    @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="330px" Outlined="true" Class="@_dragClass">
                @if (IdFile > 0)
                {
                    <MudImage Src="@($"https://{ServerName}/getthumbnail.aspx?q=60&crop=0&h=300&w=350&id_file={IdFile}")" />
                }
                else if (uploading)
                {
                    <MudProgressCircular Color="Color.Info" Indeterminate="true" />
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>

    <MudText Typo="Typo.caption">@FileInfo?.Width</MudText> x <MudText Typo="Typo.caption">@FileInfo?.Height</MudText>
    <div>@((MarkupString)(FileInfo?.Licence))</div>

</div>
@code {
    [Parameter] 
    public int IdFile { get; set; }

    [Parameter]
    public EventCallback<int> IdFileChanged { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter] 
    public string ServerName { get; set; }

    [Parameter]
    public  FileInfo FileInfo { get; set; }

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-1 mud-width-full mud-height-full z-10 imgContainer";
    private string _dragClass = DefaultDragClass;
    private bool uploading = false;

    async private void UploadFiles(IBrowserFile file)
    {
        uploading = true;

        var fileData = new FileData();
        var buffers = new byte[file.Size];
        await file.OpenReadStream(maxAllowedSize: 5120000).ReadAsync(buffers);
        fileData.FileName = file.Name;
        fileData.FileSize = file.Size;
        fileData.FileType = file.ContentType;
        fileData.ImageBytes = buffers;

        var res = await Http.PostAsJsonAsync($"api/sqlcatalog/savefile?serverName={ServerName}", fileData);

        if (res.IsSuccessStatusCode)
        {
            var tmp = await res.Content.ReadAsStringAsync();
            IdFile = Int32.Parse(tmp.Split(":")[0]);
            await IdFileChanged.InvokeAsync(IdFile);
        }

        uploading = false;
        ClearDragClass();
        StateHasChanged();
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
