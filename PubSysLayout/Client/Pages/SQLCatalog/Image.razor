@using System.Net
@using PubSysLayout.Shared.Files
@using PubSysLayout.Shared.SQLCatalog

@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService


<div class="imgItem">
    @if (IdFile > 0)
    {
        <MudIconButton Href="@($"https://{ServerName}/getfile.aspx?id_file={IdFile}")" Title="Show full image" Target="_blank" Icon="@Icons.Material.Filled.Forward" Color="Color.Primary" Size="Size.Medium" Class="btnShowImage" />
        <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Class="btnRemoveImage" OnClick="@(async _ => {FileInfo = new FileInfo{}; await FileChanged.InvokeAsync(FileInfo);})" Title="Remove image" />
        <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Class="btnEditFile" OnClick="@(async _ => {await EditFileInfo();})" Title="Edit image description and licence" />
    }

    <div class="d-flex">
        <MudText Typo="Typo.caption">@Title</MudText>
        @if (IdFile > 0)
        {
            <MudText Typo="Typo.caption" Class="ml-auto">@($"{FileInfo?.Width} × {FileInfo?.Height}")</MudText>
        }
    </div>

    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles"
            Hidden="@false"
            InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
            InputStyle="opacity:0; cursor: pointer"
            title="Drag and drop file here or click"
            @ondragenter="@SetDragClass"
            @ondragleave="@ClearDragClass"
            @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="330px" Outlined="true" Class="@_dragClass">
                @if (IdFile > 0)
                {
                    <MudImage Src="@($"https://{ServerName}/getthumbnail.aspx?q=60&crop=0&h=300&w=350&id_file={IdFile}")" />
                }
                else if (uploading)
                {
                    <MudProgressCircular Color="Color.Info" Indeterminate="true" />
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
    <div class="fileDesc">@((MarkupString)(FileInfo?.Description))</div>
    <div class="fileLic">@((MarkupString)(FileInfo?.Licence))</div>
</div>
@code {
    [Parameter]
    public FileInfo FileInfo { get; set; }
    private int IdFile { get { return FileInfo?.IdFile ?? 0; } }

    [Parameter]
    public EventCallback<FileInfo> FileChanged { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string ServerName { get; set; }


    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-1 mud-width-full mud-height-full z-10 imgContainer";
    private string _dragClass = DefaultDragClass;
    private bool uploading = false;

    async private void UploadFiles(IBrowserFile file)
    {
        uploading = true;

        var fileData = new FileData();
        var buffers = new byte[file.Size];
        await file.OpenReadStream(maxAllowedSize: 5120000).ReadAsync(buffers);
        fileData.FileName = file.Name;
        fileData.FileSize = file.Size;
        fileData.FileType = file.ContentType;
        fileData.ImageBytes = buffers;

        var res = await Http.PostAsJsonAsync($"api/sqlcatalog/savefile?serverName={ServerName}", fileData);

        if (res.IsSuccessStatusCode)
        {
            var s = await res.Content.ReadAsStringAsync();
            var tmp = s.Split(":");
            FileInfo = new FileInfo
                {
                    IdFile = Int32.Parse(tmp[0]),
                    Description = "",
                    Licence = "",
                    Width = Int32.Parse(tmp[1]),
                    Height = Int32.Parse(tmp[2])
                };
            await FileChanged.InvokeAsync(FileInfo);
        }

        uploading = false;
        ClearDragClass();
        StateHasChanged();
    }


    private async Task EditFileInfo()
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                CloseButton = true
            };

        var parameters = new DialogParameters
            {
                ["FileInfo"] =  new FileInfo { Description = FileInfo.Description, Licence = FileInfo.Licence}
            };


        var result = await DialogService.Show<FileInfoDialog>("Edit image info", parameters, options).Result;

        if (!result.Canceled)
        {
            FileInfo.Description = ((FileInfo)(result.Data)).Description;
            FileInfo.Licence = ((FileInfo)(result.Data)).Licence;

            StateHasChanged();
        }
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
