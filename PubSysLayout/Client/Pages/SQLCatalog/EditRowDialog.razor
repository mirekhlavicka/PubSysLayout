@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager uriHelper
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject PubSysLayout.Client.Pages.Code.CodeEdit codeEdit
@inject Clipboard clipboard
@using PubSysLayout.Shared.Model
@using PubSysLayout.Shared.SQLCatalog;
@using System.ComponentModel;
@using System.Text.Json;

<style>
    .smallFieldEdit {
        display: inline-block;
        width: 395px;
        margin-right: 11px;
    }

    .longFieldEdit {
        display: block;
        margin-right: 12px;
    }

    .multiLineEdit {
        margin-right: 11px;
    }

    .smallFieldEdit .mud-input-label {
        white-space: nowrap;
        overflow-x: clip;
        max-width: 500px;
    }

    .editRowContainer {
        max-height: calc(100vh - 365px);
        min-height: 50vh;
        overflow-y: scroll;
        padding-right: 12px;
    }

        .editRowContainer .mud-input-control {
            margin-bottom: 10px;
        }

    .singleTab .mud-tabs-toolbar {
        display: none
    }
</style>

<style>
    .imgItem {
        width: 350px;
        height: 400px;
        margin: 10px;
        display: inline-block;
        overflow: hidden;
        position: relative
    }

    .imgContainer {
        /*text-align: center;*/
        display: flex;
        justify-content: center;
        align-items: center;         
    }

    /*.imgContainer img {
                margin: auto;
                display: block;
            }*/

    .btnRemoveImage {
        z-index: 100;
        position: absolute;
        right: -10px;
        top: -10px
    }
</style>


<MudDialog DefaultFocus="DefaultFocus.Element">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="d-flex">
            <MudSwitch Label="Released" Color="Color.Info" T="bool" Class="ml-4" @bind-Checked="Released" Disabled="@(false/*IdItem <= 0*/)"/>
            <MudSpacer></MudSpacer>
            <MudTextField DebounceInterval="300" @bind-Value="searchField" Placeholder="Search field" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-4 ml-auto mr-2 flex-grow-0" Clearable="true" Style="width:350px" />
        </div>
        <MudForm @ref="form" @bind-IsValid="@canSave" Style="min-height: 50vh;">
            @if (FormControls != null && editRow != null && FormControls.Length == editRow.Length && tabPages != null && tabPages.Count > 0)
            {
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="@(tabPages.Count > 1)" PanelClass="pa-6" KeepPanelsAlive="false" Class='@(tabPages.Count == 1 ? "singleTab" : "")' Border="true">
                    @foreach (var tp in tabPages)
                    {
                        var ind = FormControls
                            .Select((fc, i) => new { fc, i })
                            .Where(fc => String.IsNullOrEmpty(searchField) || fc.fc.Title.ToLower().Contains(searchField.ToLower()))
                            .Where(fc => fc.fc.IdTabPage == tp.Key)
                            .Select(fc => fc.i).ToArray();

                        if (ind.Length == 0)
                        {
                            continue;
                        }

                        <MudTabPanel Text='@(tp.Value)'>
                            <MudContainer Class="editRowContainer">
                                @foreach (int i in ind)
                                {
                                    int p = i; //Intermediate counter
                                    var fc = FormControls[p];

                                    object val = editRow[p];
                                    Type type = fc.Type;

                                    if (fc.Multival && type == typeof(string))
                                    {
                                        <div class="@(fc.Width < 400 ? "smallFieldEdit" : "longFieldEdit")" @key="@p">
                                            <MudSelect MultiSelection="true" SelectAll="true" SelectedValues="@(((string)val)?.Split(',').Select(v => v.Trim()).Where(v => !String.IsNullOrEmpty(v)))" SelectedValuesChanged='(v) => editRow[p] = String.Join(", ", v) ' Label="@fc.Title" Variant="Variant.Text" T="string" Clearable="true" ToStringFunc="(v) => ListControlData[fc.IdFControl][v]" AnchorOrigin="Origin.BottomCenter">
                                                @foreach (var li in ListControlData[fc.IdFControl].Items/*.Where(li => !String.IsNullOrEmpty(li.Value))*/)
                                                {
                                                    <MudSelectItem Value="@li.Value">@li.Text</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </div>
                                    }
                                    else if (new int[] { 2, 3, 4, 5 }.Contains(fc.IdControl) && type == typeof(string))
                                    {
                                        <div class="@(fc.Width < 400 ? "smallFieldEdit" : "longFieldEdit")" @key="@p">
                                            <MudSelect Value="@((string)val)" ValueChanged="(v) => editRow[p] = v" Label="@fc.Title" Variant="Variant.Text" T="string" Clearable="true" ToStringFunc="(v) => ListControlData[fc.IdFControl][v]" AnchorOrigin="Origin.BottomCenter" Required="@(fc.Required)" RequiredError='@($"{fc.Title} is  required")'>
                                                @foreach (var li in ListControlData[fc.IdFControl].Items/*.Where(li => !String.IsNullOrEmpty(li.Value))*/)
                                                {
                                                    <MudSelectItem Value="@li.Value">@li.Text</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </div>
                                    }
                                    else if (type == typeof(string))
                                    {
                                        if (fc.MultiLine || fc.DataType == 10)
                                        {
                                            <div style="display:flex;margin-bottom:-8px"><MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.EditNote" Color="Color.Primary" OnClick="@(async () => await CodeEdit(p))" Title="Edit content" Class="ml-auto"></MudIconButton></div>
                                        }

                                        <MudTextField @key="p" Class='@(fc.MultiLine || fc.DataType == 10 ? "multiLineEdit": (fc.Width < 400 ? "smallFieldEdit" : "longFieldEdit"))' Variant="@(fc.MultiLine || fc.DataType == 10 ? Variant.Outlined : Variant.Text)" Value="@((string)val)" ValueChanged="(v) => editRow[p] = v" T="string" Label="@(fc.Title)" T="string" ReadOnly="@(false)" MaxLength="@(fc.MaxLength > 0 ? fc.MaxLength : 524288)" Lines="@(fc.MultiLine || fc.DataType == 10 ? 5 : 1)"></MudTextField>
                                    }
                                    else if (type == typeof(DateTime))
                                    {
                                        <div>
                                            <MudDatePicker @key="p" @ref="datePickers[fc.IdFControl]" AutoClose="true" Editable="true" Placeholder="Select Date" Date="@(((DateTime?)val)?.Date)" DateChanged="(v) => {editRow[p] = v.HasValue ? (v.Value.Date).Add(((DateTime?)editRow[p])?.TimeOfDay ?? new TimeSpan(0)) : null;}" Label="@(fc.Title)" Variant="Variant.Text" ReadOnly="@(false)" Class="smallFieldEdit" Required="@(fc.Required)" RequiredError='@($"{fc.Title} is  required")'>
                                                <PickerActions>
                                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => {editRow[p] = (DateTime.Today).Add(((DateTime?)editRow[p])?.TimeOfDay ?? new TimeSpan(0)); datePickers[fc.IdFControl].Close(); })">Today</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                            <MudTimePicker @key="p+1000" @ref="timePickers[fc.IdFControl]" AutoClose="true" Editable="true" Placeholder="Select Time" Time="@(((DateTime?)val)?.TimeOfDay)" TimeChanged="(v) => {if(v.HasValue) editRow[p] = ((DateTime?)editRow[p])?.Date.Add(v.Value); }" Variant="Variant.Text" ReadOnly="@(false)" Class="smallFieldEdit" Disabled="@(editRow[p] == null)">
                                                <PickerActions>
                                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => {editRow[p] = ((DateTime?)editRow[p])?.Date.Add(DateTime.Now.TimeOfDay); timePickers[fc.IdFControl].Close(); })">Now</MudButton>
                                                </PickerActions>
                                            </MudTimePicker>
                                        </div>
                                    }
                                    else if(fc.DataType == 5)
                                    {
                                        <Image IdFile="@((int?)val??0)" IdFileChanged="(v) => editRow[p] = v" ServerName="@serverName" Title="@(fc.Title)" />
                                    }
                                    else if (type == typeof(int))
                                    {
                                        <MudNumericField @key="p" Class="smallFieldEdit" Value="@((int?)val)" ValueChanged="(v) => editRow[p] = v" Label="@(fc.Title)" Variant="Variant.Text" T="int?" ReadOnly="@(false)" Required="@(fc.Required)" RequiredError='@($"{fc.Title} is  required")'></MudNumericField>
                                    }
                                    else if (type == typeof(decimal))
                                    {
                                        <MudNumericField @key="p" Class="smallFieldEdit" Value="@((decimal?)val)" Format="n2" ValueChanged="(v) => editRow[p] = v" Label="@(fc.Title)" Variant="Variant.Text" T="decimal?" ReadOnly="@(false)" Required="@(fc.Required)" RequiredError='@($"{fc.Title} is  required")'></MudNumericField>
                                    }
                                    else
                                    {
                                        <MudTextField @key="p" Class='@(fc.MultiLine ? "multiLineEdit": "smallFieldEdit")' Variant="@(fc.MultiLine ? Variant.Outlined : Variant.Text)" Value="@((val??"").ToString())" ValueChanged='async (v) => {try{editRow[p] = TypeDescriptor.GetConverter(type).ConvertFrom(v);} catch(Exception exc){await DialogService.ShowMessageBox(" Error", exc.Message);}}' Label="@(fc.Title)" T="string" ReadOnly="@(false)" MaxLength="@(fc.MaxLength > 0 ? fc.MaxLength : 524288)" Lines="@(fc.MultiLine ? 5 : 1)"></MudTextField>
                                    }
                                }
                            </MudContainer>
                        </MudTabPanel>
                    }
                </MudTabs>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="Delete" Class="ml-6" Title="Delete row" Disabled="@(IdItem <= 0)"></MudIconButton>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Class="ml-auto">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="OK" Variant="Variant.Filled" accesskey="s" Class="mr-5" Disabled="@(false/*!canSave*/)">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int IdItem { get; set; }
    [Parameter] public bool Released { get; set; }

    [Parameter] public FormControl[] FormControls { get; set; }
    [Parameter] public Dictionary<int, ListControlData> ListControlData { get; set; }

    [Parameter] public Query Query { get; set; }

    [Parameter] public object[] SourceRow { get; set; }

    private object[] editRow = null;

    private List<KeyValuePair<int, string>> tabPages = null;

    private Dictionary<int, MudDatePicker> datePickers = new Dictionary<int, MudDatePicker>();
    private Dictionary<int, MudTimePicker> timePickers = new Dictionary<int, MudTimePicker>();

    MudForm form;
    bool canSave;

    private string searchField = "";

    private string serverName = "";

    protected override async Task OnInitializedAsync()
    {
        serverName = await Http.GetStringAsync($"api/sqlcatalog/servername?database={Query.Database}");
        await LoadTabPages();
        await LoadRow();
    }

    private async Task LoadRow()
    {
        if (IdItem > 0)
        {
            editRow = await Http.GetFromJsonAsync<object[]>($"api/sqlcatalog/formitem?database={Query.Database}&id_form={Query.IdForm}&id_item={IdItem}");
            for (int p = 0; p < editRow.Length; p++)
            {
                try
                {
                    editRow[p] = ((JsonElement)(editRow[p])).Deserialize(FormControls[p].Type);
                }
                catch
                {
                    editRow[p] = null;
                }
            }
        }
        else
        {
            editRow = SourceRow ?? FormControls.Select(fc => GetDefault(fc.Type, false/*!fc.Required*/)).ToArray();
        }
    }

    private async Task LoadTabPages()
    {
        tabPages = await Http.GetFromJsonAsync<List<KeyValuePair<int, string>>>($"api/sqlcatalog/tabpages?database={Query.Database}&id_form={Query.IdForm}");
        tabPages.Insert(0, new KeyValuePair<int, string>(0, "Data"));
    }

    private object GetDefault(Type type, bool allowDBNull)
    {
        if (allowDBNull)
        {
            return null;
        }
        if (type == typeof(DateTime))
        {
            return DateTime.Today;
        }
        else if (type == typeof(string))
        {
            return "";
        }
        else if (type.IsValueType)
        {
            return Activator.CreateInstance(type);
        }
        else
        {
            return null;
        }
    }

    private async Task OK()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            await DialogService.ShowMessageBox("Error", $"Fill required fields: {String.Join("; ", form.Errors)}");
            return;
        }

        var response = (await Http.PutAsJsonAsync("api/sqlcatalog", new UpdateRow
            {
                Database = Query.Database,
                IdForm = Query.IdForm,
                IdItem = IdItem,
                Row = editRow,
                Include = Query.Include,
                Released = Released
            }));

        if (!response.IsSuccessStatusCode)
        {
            var msg = await response.Content.ReadAsStringAsync();
            await DialogService.ShowMessageBox("Error", msg);
        }
        else
        {
            var res = await response.Content.ReadFromJsonAsync<PubSysLayout.Shared.SQLQuery.QueryResult>();

            var row = res.Rows[0];

            for (int p = 0; p < row.Length; p++)
            {
                try
                {
                    row[p] = ((JsonElement)(row[p])).Deserialize(Type.GetType(res.Columns[p].TypeName));
                }
                catch
                {
                    row[p] = null;
                }
            }

            snackBar.Add($"Row {(IdItem > 0 ? "updated" : "added")}", Severity.Success);
            MudDialog.Close(DialogResult.Ok(row));
        }
    }

    private async Task Delete()
    {
        if ((await DialogService.ShowMessageBox(
                    "Warning",
                    $"Do you want to delete this row in catalog ?",
                    yesText: "Delete!", cancelText: "Cancel") != null))
        {

            var response = await Http.DeleteAsync($"api/sqlcatalog/{IdItem}?database={Query.Database}");

            if (!response.IsSuccessStatusCode)
            {
                var msg = await response.Content.ReadAsStringAsync();
                await DialogService.ShowMessageBox("Error", msg);
            }
            else
            {
                snackBar.Add($"Row deleted", Severity.Success);
                MudDialog.Close(DialogResult.Ok((object[])(null)));
            }
        }
    }

    private async Task CodeEdit(int p)
    {
         await codeEdit.EditCode($"{MudDialog.Title}/{FormControls[p].Title}", (string)editRow[p], async (code, _) => { editRow[p] = code; return true; });
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}