@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager uriHelper
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject PubSysLayout.Client.Pages.Code.CodeEdit codeEdit
@inject Clipboard clipboard
@using PubSysLayout.Shared.Model
@using PubSysLayout.Shared.SQLCatalog;
@using System.ComponentModel;
@using System.Text.Json;

<style>
    .smallFieldEdit {
        display: inline-block;
        width: 410px;
        margin-right: 20px;
    }

    .multiLineEdit {
        margin-right: 20px;
    }

    .smallFieldEdit .mud-input-label {
        white-space: nowrap;
        overflow: hidden;
        max-width: 500px;
    }

    .editRowContainer {
        max-height: calc(100vh - 290px);
        overflow-y: scroll;
        padding-right: 12px;
    }

        .editRowContainer .mud-input-control {
            margin-bottom: 10px;
        }
</style>

<MudDialog DefaultFocus="DefaultFocus.Element">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="d-flex">
            <MudTextField DebounceInterval="300" @bind-Value="searchField" Placeholder="Search field" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-4 ml-auto mr-2 flex-grow-0" Clearable="true" Style="width:350px" />
        </div>
        <MudContainer Class="editRowContainer">
            <MudForm @ref="form" @bind-IsValid="@canSave">
                @if (FormControls != null && editRow != null && FormControls.Length == editRow.Length)
                    @for (int i = 0; i < FormControls.Length; i++)
                    {
                        int p = i; //Intermediate counter
                        var fc = FormControls[p];
                        object val = editRow[p];
                        Type type = fc.Type;

                        if (!String.IsNullOrEmpty(searchField) && !FormControls[p].Title.ToLower().Contains(searchField.ToLower()))
                        {
                            continue;
                        }
                        else if (fc.Multival && type == typeof(string))
                        {
                            <MudTextField @key="p" Class="multiLineEdit" Variant="Variant.Filled" Value="@(String.Join(", ", val?.ToString().Split(',').Select(v => ListControlData[fc.IdFControl][v.Trim()])))" T="string" Label="@(fc.Title)" T="string" ReadOnly="@(true)" Lines="@(1)"></MudTextField>
                        }
                        else if (fc.IdControl == 2 && type == typeof(string))
                        {
                            <div class="smallFieldEdit" @key="@p">
                                <MudSelect Value="@((string)val)" ValueChanged="(v) => editRow[p] = v" Label="@fc.Title" Variant="Variant.Text" T="string">
                                    @foreach (var li in ListControlData[fc.IdFControl].Items/*.Where(li => !String.IsNullOrEmpty(li.Value))*/)
                                    {
                                        <MudSelectItem Value="@li.Value">@li.Text</MudSelectItem>
                                    }
                                </MudSelect>
                            </div>
                        }
                        else if (type == typeof(string))
                        {
                            <MudTextField @key="p" Class='@(fc.MultiLine ? "multiLineEdit": "smallFieldEdit")' Variant="@(fc.MultiLine ? Variant.Outlined : Variant.Text)" Value="@((string)val)" ValueChanged="(v) => editRow[p] = v" T="string" Label="@(fc.Title)" T="string" ReadOnly="@(false)" MaxLength="@(fc.MaxLength > 0 ? fc.MaxLength : 524288)" Lines="@(fc.MultiLine ? 5 : 1)"></MudTextField>
                        }
                        else if (type == typeof(int))
                        {
                            <MudNumericField @key="p" Class="smallFieldEdit" Value="@((int?)val)" ValueChanged="(v) => editRow[p] = v" Label="@(fc.Title)" Variant="Variant.Text" T="int?" ReadOnly="@(false)" Required="@(fc.Required)" RequiredError='@($"{fc.Title} is  required")'></MudNumericField>
                        }
                        else
                        {
                            <MudTextField @key="p" Class='@(fc.MultiLine ? "multiLineEdit": "smallFieldEdit")' Variant="@(fc.MultiLine ? Variant.Outlined : Variant.Text)" Value="@((val??"").ToString())" ValueChanged='async (v) => {try{editRow[p] = TypeDescriptor.GetConverter(type).ConvertFrom(v);} catch(Exception exc){await DialogService.ShowMessageBox(" Error", exc.Message);}}' Label="@(fc.Title)" T="string" ReadOnly="@(false)" MaxLength="@(fc.MaxLength > 0 ? fc.MaxLength : 524288)" Lines="@(fc.MultiLine ? 5 : 1)"></MudTextField>
                        }
                    }

                @* @for (int i = 0; i < editRow.Length; i++)
                {
                int p = i; //Intermediate counter

                object val = editRow[p];
                Type type = Type.GetType(QueryResult.Columns[p].TypeName);

                if (!String.IsNullOrEmpty(searchField) && !QueryResult.Columns[p].Name.ToLower().Contains(searchField.ToLower()))
                {
                continue;
                }
                else if (type == typeof(string))
                {
                if (QueryResult.Columns[p].MaxLength > 300 && !QueryResult.Columns[p].ReadOnly)
                {
                <div style="display:flex;margin-bottom:-8px"><MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.EditNote" Color="Color.Primary" OnClick="@(async () => await CodeEdit(p))" Title="Edit content" Class="ml-auto"></MudIconButton></div>
                }

                <MudTextField @key="p" Value="@((string)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Class='@(QueryResult.Columns[p].MaxLength < 50 ? "smallField" : null)' Variant="@(QueryResult.Columns[p].MaxLength > 100 ? Variant.Outlined : Variant.Text)" T="string" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" MaxLength="@(QueryResult.Columns[p].MaxLength)" Lines="@(QueryResult.Columns[p].MaxLength > 100 ? Math.Min(QueryResult.Columns[p].MaxLength / 100, 5)  : 1)"></MudTextField>
                }
                else if (type == typeof(int))
                {
                <MudNumericField @key="p" Class="smallField" Value="@((int?)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="int?" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" Required="@(!QueryResult.Columns[p].AllowDBNull)" RequiredError='@($"{QueryResult.Columns[p].Name} is  required")'></MudNumericField>
                }
                else if (val is byte)
                {
                <MudNumericField @key="p" Class="smallField" Value="@((byte?)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="byte?" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" Required="@(!QueryResult.Columns[p].AllowDBNull)" RequiredError='@($"{QueryResult.Columns[p].Name} is  required")'></MudNumericField>
                }
                else if (type == typeof(short))
                {
                <MudNumericField @key="p" Class="smallField" Value="@((short?)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="short?" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" Required="@(!QueryResult.Columns[p].AllowDBNull)" RequiredError='@($"{QueryResult.Columns[p].Name} is  required")'></MudNumericField>
                }
                else if (type == typeof(long))
                {
                <MudNumericField @key="p" Class="smallField" Value="@((long?)val)" ValueChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="long?" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" Required="@(!QueryResult.Columns[p].AllowDBNull)" RequiredError='@($"{QueryResult.Columns[p].Name} is  required")'></MudNumericField>
                }
                else if (type == typeof(DateTime))
                {
                <div class="d-flex">
                <MudDatePicker @key="p" @ref="datePickers[QueryResult.Columns[p].Name]" AutoClose="true" Editable="true" Placeholder="Select Date" Date="@(((DateTime?)val)?.Date)" DateChanged="(v) => {editRow[p] = v.HasValue ? (v.Value.Date).Add(((DateTime?)editRow[p])?.TimeOfDay ?? new TimeSpan(0)) : null;}" Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" Required="@(!QueryResult.Columns[p].AllowDBNull)" RequiredError='@($"{QueryResult.Columns[p].Name} is  required")'>
                <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => {editRow[p] = (DateTime.Today).Add(((DateTime?)editRow[p])?.TimeOfDay ?? new TimeSpan(0)); datePickers[QueryResult.Columns[p].Name].Close(); })">Today</MudButton>
                </PickerActions>
                </MudDatePicker>
                <MudTimePicker @key="p+1000" @ref="timePickers[QueryResult.Columns[p].Name]" AutoClose="true" Editable="true" Placeholder="Select Time" Time="@(((DateTime?)val)?.TimeOfDay)" TimeChanged="(v) => {if(v.HasValue) editRow[p] = ((DateTime?)editRow[p])?.Date.Add(v.Value); }" Label="time" Variant="Variant.Text" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" Class="ml-4" Disabled="@(editRow[p] == null)">
                <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => {editRow[p] = ((DateTime?)editRow[p])?.Date.Add(DateTime.Now.TimeOfDay); timePickers[QueryResult.Columns[p].Name].Close(); })">Now</MudButton>
                </PickerActions>
                </MudTimePicker>
                </div>
                }
                else if (type == typeof(bool))
                {
                <MudCheckBox @key="p" Checked="@((bool?)val)" CheckedChanged="(v) => editRow[p] = v" Label="@(QueryResult.Columns[p].Name)" T="bool?" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" Dense="true"></MudCheckBox>
                }
                else
                {
                <MudTextField @key="p" Class="smallField" Value="@((val??"").ToString())" ValueChanged='async (v) => {try{editRow[p] = TypeDescriptor.GetConverter(type).ConvertFrom(v);} catch(Exception exc){await DialogService.ShowMessageBox(" Error", exc.Message);}}' Label="@(QueryResult.Columns[p].Name)" Variant="Variant.Text" T="string" ReadOnly="@(QueryResult.Columns[p].ReadOnly)" MaxLength="@(QueryResult.Columns[p].MaxLength)"></MudTextField>
                }
                } *@
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="Delete" Class="ml-6" Title="Delete row" Disabled="@(true/*Query.OriginalRow == null*/)"></MudIconButton>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Class="ml-auto">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="OK" Variant="Variant.Filled" accesskey="s" Class="mr-5" Disabled="@(false/*!canSave*/)">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    //[Parameter] public int IdForm { get; set; }
    [Parameter] public int IdItem { get; set; }

    [Parameter] public FormControl[] FormControls { get; set; }
    [Parameter] public Dictionary<int, ListControlData> ListControlData { get; set; }

    //[Parameter] public QueryResult QueryResult { get; set; }
    [Parameter] public Query Query { get; set; }

    private object[] editRow = null;
    // private object[] row = null;

    private Dictionary<string, MudDatePicker> datePickers = new Dictionary<string, MudDatePicker>();
    private Dictionary<string, MudTimePicker> timePickers = new Dictionary<string, MudTimePicker>();

    MudForm form;
    bool canSave;

    private string searchField = "";

    protected override void OnInitialized()
    {
        // if (Query.OriginalRow != null) //copy
        // {
        //     row = null;
        //     editRow = (object[])Query.OriginalRow.Clone();
        //     foreach (int p in QueryResult.Columns.Select((c, i) => new { c, i }).Where(c => c.c.ReadOnly).Select(c => c.i))
        //     {
        //         editRow[p] = GetDefault(editRow[p].GetType(), false);
        //     }
        //     Query.Action = "INSERT";
        //     Query.Row = editRow;
        //     Query.OriginalRow = null;
        // }
        // else if (Query.Row != null) //edit
        // {
        //     row = Query.Row;
        //     editRow = (object[])Query.Row.Clone();
        //     Query.Action = "UPDATE";
        //     Query.Row = editRow;
        //     Query.OriginalRow = row;
        // }
        // else //new
        // {
        //     row = null;
        //     editRow = QueryResult.Columns.Select(c => GetDefault(Type.GetType(c.TypeName), c.AllowDBNull)).ToArray();
        //     Query.Action = "INSERT";
        //     Query.Row = editRow;
        //     Query.OriginalRow = null;
        // }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRow();
    }

    private async Task LoadRow()
    {
        editRow = await Http.GetFromJsonAsync<object[]>($"api/sqlcatalog/formitem?database={Query.Database}&id_form={Query.IdForm}&id_item={IdItem}");

        for (int p = 0; p < editRow.Length; p++)
        {
            try
            {
                editRow[p] = ((JsonElement)(editRow[p])).Deserialize(FormControls[p].Type);
            }
            catch
            {
                editRow[p] = null;
            }
        }

    }

    private object GetDefault(Type type, bool allowDBNull)
    {
        if (allowDBNull)
        {
            return null;
        }
        if (type == typeof(DateTime))
        {
            return DateTime.Now;
        }
        else if (type == typeof(string))
        {
            return "";
        }
        else if (type.IsValueType)
        {
            return Activator.CreateInstance(type);
        }
        else
        {
            return null;
        }
    }

    private async Task OK()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            await DialogService.ShowMessageBox("Error", $"Fill required fields: {String.Join("; ", form.Errors)}");
            return;
        }

        var response = (await Http.PutAsJsonAsync($"api/sqlcatalog?database={Query.Database}&id_form={Query.IdForm}&id_item={IdItem}", editRow));

        if (!response.IsSuccessStatusCode)
        {
            var msg = await response.Content.ReadAsStringAsync();
            await DialogService.ShowMessageBox("Error", msg);
        }
        else
        {
            /*if (row != null)
            {
                editRow.CopyTo(row, 0);
                snackBar.Add($"Row updated", Severity.Success);
            }
            else
            {
                row = editRow;
                var updrow = await response.Content.ReadFromJsonAsync<object[]>();
                for (int p = 0; p < row.Length; p++)
                {
                    try
                    {
                        row[p] = ((JsonElement)(updrow[p])).Deserialize(Type.GetType(QueryResult.Columns[p].TypeName));
                    }
                    catch
                    {
                        row[p] = null;
                    }
                }
                var tmp = QueryResult.Rows.ToList();
                tmp.Add(row);
                QueryResult.Rows = tmp.ToArray();
                snackBar.Add($"Row added", Severity.Success);
            }*/
            snackBar.Add($"Row updated", Severity.Success);
            MudDialog.Close(DialogResult.Ok(IdItem/*row*/));
        }
    }

    private async Task Delete()
    {
        // if ((await DialogService.ShowMessageBox(
        //             "Warning",
        //             $"Do you want to delete row in table \"{QueryResult.TableName}\" ?",
        //             yesText: "Delete!", cancelText: "Cancel") != null))
        // {

        //     Query.Action = "DELETE";
        //     Query.Row = row;
        //     var response = (await Http.PutAsJsonAsync($"api/sqlquery", Query));

        //     if (!response.IsSuccessStatusCode)
        //     {
        //         var msg = await response.Content.ReadAsStringAsync();
        //         await DialogService.ShowMessageBox("Error", msg);
        //         Query.Action = "UPDATE";
        //         Query.Row = editRow;
        //     }
        //     else
        //     {
        //         var tmp = QueryResult.Rows.ToList();
        //         tmp.Remove(row);
        //         QueryResult.Rows = tmp.ToArray();
        //         snackBar.Add($"Row deleted", Severity.Success);
        //         MudDialog.Close(DialogResult.Ok((object[])(null)));
        //     }
        // }
    }

    private async Task CodeEdit(int p)
    {
        // await codeEdit.EditCode($"{MudDialog.Title}/{QueryResult.Columns[p].Name}", (string)editRow[p], async (code, _) => { editRow[p] = code; return true; });
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}