@page "/"
@inject HttpClient Http
@inject NavigationManager uriHelper;
@inject CurrentDB currentDB
@inject DBList dbListService
@inject MudBlazor.ISnackbar snackBar

<style>
    .selectedDB {
        background-color: #1E88E5 !important;
    }

        .selectedDB > td {
            color: white !important;
        }
</style>

<PageTitle>@currentDB.Current – PubSysLayout</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">@server</MudText>
<MudText Typo="Typo.h6" Class="mb-8" Color="Color.Primary">@currentDB.Current</MudText>

@if (dblist != null)
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudTable Items="@GetFiltered()" T="String" 
            OnRowClick='(p) => {currentDB.Current = p.Item; snackBar.Add($"Layout database {p.Item} selected.", Severity.Info);}' 
            RowClassFunc="@SelectedRowClassFunc"
            Hover="true" Elevation="5" RowsPerPage="0" FixedHeader="true" FixedFooter="true" Height="calc(100vh - 300px)" Dense="true" RowClass="cursor-pointer">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Select database</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchTerm" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">
                    <MudHighlighter Text="@context" HighlightedText="@searchTerm" />
                </MudTd>
                <MudTd></MudTd>
            </RowTemplate>
        </MudTable>
    </MudContainer>
}

@code {
    private string server = null;
    private string[] dblist = null;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        dblist = await dbListService.GetList();

        if (!String.IsNullOrEmpty(currentDB.Current))
        {
            server = await Http.GetStringAsync("api/dblist/server");
        }
    }

    private IEnumerable<String> GetFiltered() => dblist.Where(db => searchTerm == "" || db.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private string SelectedRowClassFunc(string db, int rowNumber)
    {
        if (db == currentDB.Current)
        {
            return "selectedDB";
        }
        else
        {
            return string.Empty;
        }
    }
}