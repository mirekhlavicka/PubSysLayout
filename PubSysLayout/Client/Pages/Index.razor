@page "/"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject HttpClient Http
@inject NavigationManager uriHelper;
@inject CurrentDB currentDB
@inject DBList dbListService
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService

<style>
    .selectedDB {
        background-color: #1E88E5 !important;
    }
        .selectedDB > td {
            color: white !important;
        }
</style>

<PageTitle>PubSysLayout – @currentDB.Current</PageTitle>

<MudGrid>
    <MudItem xs="3">
        @if (String.IsNullOrEmpty(server))
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else
        {
            <MudText Typo="Typo.h4" GutterBottom="true">@server</MudText>
            <MudText Typo="Typo.h6" Class="mb-4" Color="Color.Default" Title="Selected database"><MudIcon Icon="@Icons.Material.Filled.ArrowRight" Style="margin-bottom: -4px;" />@currentDB.Current</MudText>
            <MudText Typo="Typo.h6" Class="mb-8" Color="Color.Primary" @onclick="SelectFTP" Style="cursor: pointer" Title="Selected FTP"><MudIcon Icon="@Icons.Material.Filled.ArrowRight" Style="margin-bottom: -4px" />@(currentDB.FTP ?? "FTP not selected")</MudText>
        }
    </MudItem>
    <MudItem xs="9">
        @if (dblist != null)
        {
            <MudTable Items="@GetFiltered()" T="String"
                  OnRowClick='(p) => {currentDB.Current = p.Item; snackBar.Add($"Layout database {p.Item} selected", Severity.Info);}'
                  RowClassFunc="@SelectedRowClassFunc"
                  Hover="true" Elevation="5" RowsPerPage="0" FixedHeader="true" FixedFooter="true" Height="calc(100vh - 220px)" Dense="true" RowClass="cursor-pointer" Class="mt-5" Style="max-width: 500px;">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Select database</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="Search by name" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" IconSize="Size.Medium" AdornmentColor="Color.Info" Class="mt-0" DebounceInterval="200" Clearable="true"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        <MudHighlighter Text="@context" HighlightedText="@searchString" />
                    </MudTd>
                    <MudTd></MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudItem>
</MudGrid>


@code {
    private string server = null;
    private string[] dblist = null;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        dblist = await dbListService.GetList();

        if (!String.IsNullOrEmpty(currentDB.Current))
        {
            server = await Http.GetStringAsync("api/dblist/server");
        }
    }

    private IEnumerable<String> GetFiltered() => dblist.Where(db => searchString == "" || db.Contains(searchString, StringComparison.OrdinalIgnoreCase));

    private string SelectedRowClassFunc(string db, int rowNumber)
    {
        if (db == currentDB.Current)
        {
            return "selectedDB";
        }
        else
        {
            return string.Empty;
        }
    }

    private async void SelectFTP()
    {
        var ftpresult = await DialogService.Show<Code.SelectFTPDialog>("Select FTP source",
                new DialogOptions()
                    {
                        MaxWidth = MaxWidth.Small,
                        CloseButton = true
                    }
                ).Result;

        if (!ftpresult.Cancelled)
        {
            currentDB.FTP = ftpresult.Data.ToString();
            StateHasChanged();
        }

    }
}