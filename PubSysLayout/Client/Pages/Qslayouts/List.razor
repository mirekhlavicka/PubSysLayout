@page "/qslayouts"
@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@inject NavigationManager uriHelper
@inject IDialogService DialogService
@inject CurrentDB currentDB
@inject Clipboard clipboard


@using PubSysLayout.Shared.Model

<PageTitle>@currentDB.Current – QS actions</PageTitle>

@if (qslayouts == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudTooltip Text="Add new QS action">
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5" OnClick="@(()=> AddQS())" Disabled="@(newQS !=null || beforeEditQS != null)"/>
        </MudTooltip>
        <MudTooltip Text="Paste QS action">
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ContentPaste" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5 ml-3" OnClick="@(()=> {AddQS(clipboard.Content as Qslayout); clipboard.Content = null; })" Disabled="@(!(clipboard.Content is Qslayout) || newQS !=null || beforeEditQS != null)"/>
        </MudTooltip>

        <MudTable @ref="qsTable" Items="qslayouts" Hover="true" SortLabel="Sort By" AllowUnsorted="false" Elevation="5" RowsPerPage="0" FixedHeader="true" FixedFooter="true" Height="calc(100vh - 250px)"  Dense="true" 
            Filter="new Func<Qslayout,bool>(FilterFunc)" 
            CommitEditTooltip="Commit Edit" CancelEditTooltip="Cancel Edit" RowEditPreview="Backup" RowEditCancel="ResetEdit" RowEditCommit="Committed" CanCancelEdit="true" IsEditRowSwitchingBlocked="true" OnRowClick="RowClicked" Virtualize="false" T="Qslayout">
            <ToolBarContent>
                <MudText Typo="Typo.h6">QS actions</MudText>
                <MudSpacer />
@*                <MudSwitch Label="Hide unused" Color="Color.Info" Checked="@hideUnassigned" CheckedChanged="@(async (bool b) => {hideUnassigned = b; await LoadData();})" Disabled="@(newQS !=null || beforeEditQS != null)" />
*@
                <MudSwitch Label="Hide unassigned" Color="Color.Info" @bind-Checked="hideUnassigned" Disabled="@(newQS !=null || beforeEditQS != null)"/>
                <MudSwitch Label="Hide assigned" Color="Color.Info" @bind-Checked="hideAssigned" Disabled="@(newQS !=null || beforeEditQS != null)"/>

                <MudSpacer />
                <MudTextField DebounceInterval="500" @bind-Value="searchString" Placeholder="Search by name, QS param or ID" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true" ></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <col style="width:100px;" />
                <col style="width:30%;" />
                <col  />
                <col style="width:100px;" />
                <col style="width:100px;" />
                <col style="width:100px;" />
                <col style="width:130px;" />
                <col style="width:0px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Qslayout, object>(x => x.IdQslayout == 0 ? 999999 :  x.IdQslayout)">ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy='new Func<Qslayout, object>(x => x.IdQslayout == 0 ? "ZZZZZ" :  x.Name)'>Name</MudTableSortLabel></MudTh>
                <MudTh>QS param</MudTh>
                <MudTh><MudTableSortLabel SortBy='new Func<Qslayout, object>(x => x.Priority)'>Priority</MudTableSortLabel></MudTh>
                <MudTh>Public</MudTh>
                <MudTh>Assigned</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.IdQslayout</MudTd>
                <MudTd DataLabel="Name"><MudHighlighter Text="@context.Name" HighlightedText="@searchString" /></MudTd>
                <MudTd DataLabel="QS param"><MudHighlighter Text="@context.ParamString" HighlightedText="@searchString" /></MudTd>
                <MudTd DataLabel="Priority">@context.Priority</MudTd>
                <MudTd DataLabel="Public"><MudIcon Icon="@(@context.Public ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)" Size="Size.Small" Class="mr-3 mb-n1"/></MudTd>
                <MudTd DataLabel="Assigned"><MudIcon Icon="@(assignedQSLayouts.Contains(context.IdQslayout) ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)" Size="Size.Small" Class="mr-3 mb-n1"/></MudTd>
                <MudTd DataLabel="">
                    <MudTooltip Text="Assign action to layout">
                        <MudIconButton Icon="@Icons.Material.Filled.ElectricalServices" @onclick="@(()=>OpenLayoutAssignsDialog(@context))" Color="Color.Default" Size="Size.Small" Variant="Variant.Text"></MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Copy">
                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" @onclick="@(()=> clipboard.Content = context)" Color="Color.Default" Size="Size.Small" Variant="Variant.Text"></MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Delete QS action">
                        <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" @onclick="@(()=>Delete(@context.IdQslayout))"Size="Size.Small" Variant="Variant.Text" />
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="ID">@context.IdQslayout<a id="editRow" style="position:relative; top: -80px" /></MudTd>
                <MudTd DataLabel="Name">                
                    <MudTextField Margin="Margin.Dense" @bind-Value="@context.Name" Required Immediate="false" spellcheck="false" />
                </MudTd>
                <MudTd DataLabel="QS param">                
                    <MudTextField Margin="Margin.Dense" @bind-Value="@context.ParamString" Immediate="false" spellcheck="false" />
                </MudTd>
                <MudTd DataLabel="Priority">
                    <MudNumericField Margin="Margin.Dense" @bind-Value="@context.Priority" Required Immediate="false" spellcheck="false" Step="1"/>
                </MudTd>
                <MudTd DataLabel="Public">
                    <MudCheckBox @bind-Checked="@context.Public"></MudCheckBox>
                </MudTd>
                <MudTd />
            </RowEditingTemplate>

        </MudTable>
    </MudContainer>
}

@code {

    private List<Qslayout> qslayouts;
    private HashSet<int> assignedQSLayouts;

    private string searchString = "";
    private bool hideUnassigned = true;
    private bool hideAssigned = false;

    private Qslayout beforeEditQS = null;
    private Qslayout newQS = null;


    MudTable<Qslayout> qsTable;

    protected override async Task OnInitializedAsync()
    {
        if (currentDB.Current is null)
        {
            return;
        }

        await LoadData();
    }

    protected async Task LoadData()
    {
        assignedQSLayouts = (await Http.GetFromJsonAsync<int[]>("api/layoutassigns/qslayouts")).ToHashSet();
        qslayouts = await Http.GetFromJsonAsync<List<Qslayout>>($"api/qslayouts?hideUnused={/*hideUnassigned*/false}");
    }

    private void Backup(object element)
    {
        Qslayout qs = element as Qslayout;

        beforeEditQS  = new()
            {
                Name = qs.Name,
                Description = qs.Description,
                ParamString = qs.ParamString,
                Priority = qs.Priority,
                Public = qs.Public
            };

        StateHasChanged();
    }

    private void ResetEdit(object element)
    {
        if (beforeEditQS != null)
        {
            Qslayout qs = element as Qslayout;
            qs.Name = beforeEditQS.Name;
            qs.Description = beforeEditQS.Description;
            qs.ParamString = beforeEditQS.ParamString;
            qs.Priority = beforeEditQS.Priority;
            qs.Public = beforeEditQS.Public;

            beforeEditQS = null;
            StateHasChanged();
        }

        if (newQS != null)
        {
            qslayouts.Remove(newQS);
            newQS = null;
            StateHasChanged();
        }
    }

    private async void Committed(object element)
    {
        beforeEditQS = null;
        newQS = null;

        Qslayout qs = element as Qslayout;

        if (qs.IdQslayout != 0)
        {
            await Http.PutAsJsonAsync($"api/qslayouts/{qs.IdQslayout}", qs);
            snackBar.Add($"QS action  {qs.Name} saved", Severity.Success);
        }
        else
        {
            using var response = await Http.PostAsJsonAsync("api/qslayouts", qs);
            var x = await response.Content.ReadFromJsonAsync<Qslayout>();
            qs.IdQslayout = x.IdQslayout;
            snackBar.Add($"QS action  {qs.Name} created", Severity.Success);
        }

        StateHasChanged();
    }

    private async void AddQS(Qslayout copy = null)
    {
        newQS = new Qslayout
        {
            Name = copy?.Name ?? "",
            Description = copy?.Description ?? "",
            ParamString = copy?.ParamString ?? "",
            Public = copy?.Public ?? true,
            Priority = copy?.Priority ?? 0
        };

        qslayouts.Add(newQS);

        await Task.Delay(300);

        await InvokeAsync(() =>
        {
            qsTable.SetEditingItem(newQS);
            StateHasChanged();
        });

        await js.InvokeVoidAsync("scrollToElementId", "editRow");
    }


    async Task Delete(int idQslayout)
    {
        var l = qslayouts.First(x => x.IdQslayout == idQslayout);

        if ((await DialogService.ShowMessageBox(
            "Warning",
            $"Do you want to delete QS action \"{l.Name} (id = {l.IdQslayout})\" ?",
            yesText: "Delete!", cancelText: "Cancel") != null))
        {
            await Http.DeleteAsync($"api/qslayouts/{idQslayout}");
            snackBar.Add($"QS action {idQslayout} deleted", Severity.Success);
            await LoadData();
        }
    }

    private bool FilterFunc(Qslayout q)
    {
        if (hideUnassigned && !assignedQSLayouts.Contains(q.IdQslayout))
        {
            return false;
        }

        if (hideAssigned && assignedQSLayouts.Contains(q.IdQslayout))
        {
            return false;
        }

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (q.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) || q.ParamString.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if(q.IdQslayout.ToString() == searchString)
            return true;

        return false;
    }

    private async void RowClicked(TableRowClickEventArgs<Qslayout> p)
    {
        await Task.Delay(300);
        await js.InvokeVoidAsync("focusAt", p.MouseEventArgs.ClientX, p.MouseEventArgs.ClientY + 5);
    }

    private async void OpenLayoutAssignsDialog(Qslayout qs)
    {
        var options = new DialogOptions { 
            MaxWidth = MaxWidth.Medium, 
            CloseButton = true
        };

        var parameters = new DialogParameters();

        parameters.Add("IdQslayout", qs.IdQslayout);

        var dialog = DialogService.Show<LayoutAssigns.LayoutAssignsDialog>($"Assign action {qs.Name} to layout definitions", parameters, options);

        var result = await dialog.Result;

        assignedQSLayouts = (await Http.GetFromJsonAsync<int[]>("api/layoutassigns/qslayouts")).ToHashSet();

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}