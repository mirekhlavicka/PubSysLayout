@page "/files"
@using Microsoft.AspNetCore.Authorization
@using System.Net
@attribute [Authorize]

@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@inject NavigationManager _navigation
@inject IDialogService DialogService
@inject CurrentDB currentDB
@inject PubSysLayout.Client.Pages.Code.CodeEdit codeEdit
@inject Clipboard clipboard

<style>
    :hover.hover-underline {
        text-decoration: underline;
    }

    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td,.selected .mud-icon-default {
            color: white !important;
        }
</style>

@using PubSysLayout.Shared.Model

<PageTitle>@currentDB.Current – Files</PageTitle>

@if (items == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudTableFix @ref="mudTable" Items="items" Hover="true" SortLabel="Sort By" AllowUnsorted="false" Elevation="5" RowsPerPage="0" FixedHeader="true" FixedFooter="true" Height="calc(100vh - 180px)" Dense="true"
                 Filter="new Func<FtpListItem,bool>(FilterFunc)"
                 MultiSelection="false"
                 RowClassFunc="@SelectedRowClassFunc"
                 RowClass="cursor-pointer" OnRowClick="RowClicked"
                 Virtualize="false" T="FtpListItem">
            <ToolBarContent>
                <MudBadge Content='@($"{mudTable?.GetFilteredItemsCount() - (currentDB.CurrentFTPPath == "~" ? 0 : 1) }")' Color="Color.Info" Overlap="false" Class="mt-0 ml-0" Origin="Origin.CenterRight">
                    <MudText Typo="Typo.subtitle2">@(currentDB.FTP.Split('/')[0])</MudText>
                    @{
                        string p = "";

                        @foreach (var s in currentDB.CurrentFTPPath.Split('/', StringSplitOptions.RemoveEmptyEntries))
                        {
                            p += s;
                            string pp = p;
                            p += "/";

                            if (!currentDB.CurrentFTPPath.EndsWith(s))
                            {
                                <MudText Typo="Typo.caption" Color="Color.Info" Class="cursor-pointer hover-underline" @onclick='async _ => {
                                    currentDB.CurrentFTPPath = pp;
                                    searchString = "";
                                    await LoadData();
                                    StateHasChanged();
                                }'>@(s == "~" ? currentDB.FTP.Split('/')[1] : s )</MudText>
                                <MudText Typo="Typo.caption">/</MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.caption">@(s == "~" ? currentDB.FTP.Split('/')[1] : s )</MudText>
                            }
                        }
                    }
                </MudBadge>
                <MudSpacer />
                <MudTextField DebounceInterval="300" @bind-Value="searchString" AutoFocus="false" Placeholder="Search by name or ext" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true"></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <col style="width:50%;" />
                <col style="width:10%;" />
                <col style="width:20%;" />
                <col style="width:20%;" />
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy='new Func<FtpListItem, object>(x => (mudTable.Context.SortDirection == SortDirection.Descending && x.Name == ".." ? "ZZZ" : "") + ((mudTable.Context.SortDirection == SortDirection.Ascending && x.Type == 1) || ((mudTable.Context.SortDirection == SortDirection.Descending && x.Type == 0)) ? "___" : "") + x.Name)'>Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy='new Func<FtpListItem, object>(x => (mudTable.Context.SortDirection == SortDirection.Descending && x.Name == ".." ? "ZZZ" : "") + ((mudTable.Context.SortDirection == SortDirection.Ascending && x.Type == 1) || ((mudTable.Context.SortDirection == SortDirection.Descending && x.Type == 0)) ? "___" : "") + x.Extension + x.Name)'>Ext</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy='new Func<FtpListItem, object>(x => (mudTable.Context.SortDirection == SortDirection.Ascending && x.Type == 1 ? -999999 : 0) + (mudTable.Context.SortDirection == SortDirection.Descending && x.Type == 1 ? 999999 : 0) + (mudTable.Context.SortDirection == SortDirection.Ascending && x.Name == ".." ? -9999999 : 0) + (mudTable.Context.SortDirection == SortDirection.Descending && x.Name == ".." ? 9999999 : 0) + x.Size)'>Size</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy='new Func<FtpListItem, object>(x => x.Modified.AddYears((mudTable.Context.SortDirection == SortDirection.Descending && x.Name == ".." ? 2150 : 0) + ((mudTable.Context.SortDirection == SortDirection.Ascending && x.Type == 1) || ((mudTable.Context.SortDirection == SortDirection.Descending && x.Type == 0)) ? 0 : 100)))'>Date</MudTableSortLabel></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name"><MudIcon Style="margin-bottom:-5px" Color="@(context.Type == 1 ? (context.Name == ".." ? Color.Info : Color.Info) : Color.Default)" Icon="@(context.Type == 1 ? (context.Name == ".." ? Icons.Material.Filled.ArrowBack : Icons.Material.Filled.Folder) : (editableExt.Contains(context.Extension) ? Icons.Material.Outlined.InsertDriveFile : Icons.Material.Outlined.FileOpen))" Size="Size.Small" Class="mr-2" /><MudHighlighter Text='@(context.Type == 0 ? context.Name.Replace(context.Extension, "") : $"[{context.Name}]")' HighlightedText="@searchString" /></MudTd>
                <MudTd DataLabel="Ext"><MudHighlighter Text='@context.Extension.Replace(".", "")' HighlightedText="@searchString" /></MudTd>
                <MudTd DataLabel="Size">@(context.Type == 0 ? context.Size.ToString("n0") : "<DIR>")</MudTd>
                <MudTd DataLabel="Date">@(context.Name == ".." ? "—" : context.Modified.ToString())</MudTd>
                <MudTd></MudTd>
            </RowTemplate>
        </MudTableFix>
    </MudContainer>
}

@code {
    public class FtpListItem
    {
        public int Type { get; set; }
        public String Name { get; set; }
        public long Size { get; set; }
        public DateTime Modified { get; set; }
        public string Extension { get; set; }
    }

    private List<FtpListItem> items;

    private string searchString = "";

    MudTable<FtpListItem> mudTable;

    private HashSet<string> editableExt = new HashSet<string> {".aspx", ".ascx", ".ashx", ".asax", ".asp", ".cs", ".config", ".browser", ".js", ".json", ".css", ".html", ".htm", ".xml", ".xsl", ".txt"};

    protected override async Task OnInitializedAsync()
    {
        if (currentDB.Current is null)
        {
            return;
        }

        if (currentDB.FTP == null)
        {
            await Task.Delay(500);
            if (await codeEdit.SelectFTP() == null)
            {
                _navigation.NavigateTo("/", false);
                return;
            }
        }

        await LoadData();
    }

    protected async Task LoadData()
    {
        items = await Http.GetFromJsonAsync<List<FtpListItem>>($"api/code/list?ftp={WebUtility.UrlEncode(currentDB.FTP)}&path={WebUtility.UrlEncode(currentDB.CurrentFTPPath)}");

        if (currentDB.CurrentFTPPath != "~")
        {
            items.Add(new FtpListItem
                {
                    Type = 1,
                    Name = "..",
                    Extension = ""
                });
        }
    }

    private bool FilterFunc(FtpListItem i)
    {
        if (string.IsNullOrWhiteSpace(searchString) || i.Name == "..")
            return true;

        if (i.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async void RowClicked(TableRowClickEventArgs<FtpListItem> i)
    {
        if (i.Item.Type == 1)
        {
            if (i.Item.Name == "..")
            {
                var tmp = currentDB.CurrentFTPPath.Split('/');
                currentDB.CurrentFTPPath = String.Join("/", tmp.Take(tmp.Length - 1));
            }
            else
            {
                currentDB.CurrentFTPPath += "/";
                currentDB.CurrentFTPPath += i.Item.Name;
            }

            await LoadData();
            searchString = "";
            StateHasChanged();
        }

        if (i.Item.Type == 0)
        {
            if (editableExt.Contains(i.Item.Extension))
            {
                await codeEdit.Edit(currentDB.CurrentFTPPath + "/" + i.Item.Name, i.Item.Extension);

                var refresh = (await Http.GetFromJsonAsync<List<FtpListItem>>($"api/code/list?ftp={WebUtility.UrlEncode(currentDB.FTP)}&path={WebUtility.UrlEncode(currentDB.CurrentFTPPath + "/" + i.Item.Name)}")).FirstOrDefault();

                if (refresh != null)
                {
                    i.Item.Modified = refresh.Modified;
                    i.Item.Size = refresh.Size;
                }

                StateHasChanged();
            }
            else
            {
                await js.InvokeAsync<object>("open", $"/api/code/download?ftp={WebUtility.UrlEncode(currentDB.FTP)}&path={WebUtility.UrlEncode(currentDB.CurrentFTPPath + "/" + i.Item.Name)}", "_blank");
            }
        }
    }

    private string SelectedRowClassFunc(FtpListItem element, int rowNumber)
    {
        if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element) && element.Type == 0)
        {
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
}