@page "/files"
@using Microsoft.AspNetCore.Authorization
@using System.Net
@using PubSysLayout.Shared.Files
@attribute [Authorize]

@inject HttpClient Http
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar
@inject NavigationManager _navigation
@inject IDialogService DialogService
@inject CurrentDB currentDB
@inject PubSysLayout.Client.Pages.Code.CodeEdit codeEdit
@inject Clipboard clipboard

@implements IAsyncDisposable

<style>
    :hover.hover-underline {
        text-decoration: underline;
    }

    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td, .selected .mud-icon-default {
            color: white !important;
        }

    .drop-zone {
        border: 2px solid #00000000;
        border-radius: 5px;
    }

        .drop-zone.hover {
            border: 2px dashed #0087F7;
        }
</style>

@using PubSysLayout.Shared.Model

<PageTitle>@currentDB.Current – Files</PageTitle>

<div @ref="dropZoneElement" class="drop-zone">
    <InputFile OnChange="OnInputFileChanged" hidden multiple  @ref="inputFile" />
    @if (items == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudMenu Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.TopLeft" Dense="true">
                <ActivatorContent>
                    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5"/>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem OnClick="@(()=> OpenContextDialog(new FtpListItem { Type = -1 }))">New file</MudMenuItem>
                    <MudMenuItem OnClick="@(()=> OpenContextDialog(new FtpListItem { Type = -2 }))">New folder</MudMenuItem>
                </ChildContent>
            </MudMenu>
            <MudTooltip Text="Refresh">
                <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" IconSize="Size.Medium" Class="mt-0 mb-5"  OnClick="@(async ()=> await LoadData())"/>
            </MudTooltip>
            <MudTableFix @ref="mudTable" Items="items" Hover="true" SortLabel="Sort By" AllowUnsorted="false" Elevation="5" RowsPerPage="0" FixedHeader="true" FixedFooter="true" Height="calc(100vh - 250px)" Dense="true"
                     Filter="new Func<FtpListItem,bool>(FilterFunc)"
                     MultiSelection="false"
                     RowClassFunc="@SelectedRowClassFunc"
                     RowClass="cursor-pointer" OnRowClick="RowClicked"
                     Virtualize="true" T="FtpListItem">
                <ToolBarContent>
                    <MudBadge Content='@($"{mudTable?.GetFilteredItemsCount() - (currentDB.CurrentFTPPath == "~" ? 0 : 1) }")' Color="Color.Info" Overlap="false" Class="mt-0 ml-0" Origin="Origin.CenterRight">
                        <MudText Typo="Typo.subtitle2">@(currentDB.FTP.Split('/')[0])</MudText>
                        @{
                            string p = "";

                            @foreach (var s in currentDB.CurrentFTPPath.Split('/', StringSplitOptions.RemoveEmptyEntries))
                            {
                                p += s;
                                string pp = p;
                                p += "/";

                                if (!currentDB.CurrentFTPPath.EndsWith(s))
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Info" Class="cursor-pointer hover-underline" @onclick='async _ => {
                                    currentDB.CurrentFTPPath = pp;
                                    searchString = "";
                                    await LoadData();
                                    StateHasChanged();
                                }'>@(s == "~" ? currentDB.FTP.Split('/')[1] : s )</MudText>
                                    <MudText Typo="Typo.caption">/</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.caption">@(s == "~" ? currentDB.FTP.Split('/')[1] : s )</MudText>
                                }
                            }
                        }
                    </MudBadge>
                    <MudSpacer />
                    <MudTextField DebounceInterval="300" @bind-Value="searchString" AutoFocus="false" Placeholder="Search by name or ext" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentColor="Color.Info" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true"></MudTextField>
                </ToolBarContent>
                <ColGroup>
                    <col style="width:50%;" />
                    <col style="width:10%;" />
                    <col style="width:20%;" />
                    <col style="width:20%;" />
                    <col style="width:50px;" />
                </ColGroup>
                <HeaderContent>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy='new Func<FtpListItem, object>(x => (mudTable.Context.SortDirection == SortDirection.Descending && x.Name == ".." ? "ZZZ" : "") + ((mudTable.Context.SortDirection == SortDirection.Ascending && x.Type == 1) || ((mudTable.Context.SortDirection == SortDirection.Descending && x.Type == 0)) ? "___" : "") + x.Name)'>Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy='new Func<FtpListItem, object>(x => (mudTable.Context.SortDirection == SortDirection.Descending && x.Name == ".." ? "ZZZ" : "") + ((mudTable.Context.SortDirection == SortDirection.Ascending && x.Type == 1) || ((mudTable.Context.SortDirection == SortDirection.Descending && x.Type == 0)) ? "___" : "") + x.Extension + x.Name)'>Ext</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy='new Func<FtpListItem, object>(x => (mudTable.Context.SortDirection == SortDirection.Ascending && x.Type == 1 ? -999999 : 0) + (mudTable.Context.SortDirection == SortDirection.Descending && x.Type == 1 ? 999999 : 0) + (mudTable.Context.SortDirection == SortDirection.Ascending && x.Name == ".." ? -9999999 : 0) + (mudTable.Context.SortDirection == SortDirection.Descending && x.Name == ".." ? 9999999 : 0) + x.Size)'>Size</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy='new Func<FtpListItem, object>(x => x.Modified.AddYears((mudTable.Context.SortDirection == SortDirection.Descending && x.Name == ".." ? 2150 : 0) + ((mudTable.Context.SortDirection == SortDirection.Ascending && x.Type == 1) || ((mudTable.Context.SortDirection == SortDirection.Descending && x.Type == 0)) ? 0 : 100)))'>Date</MudTableSortLabel></MudTh>
                    <MudTh></MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name"><MudIcon Style="margin-bottom:-5px" Color="@(context.Type == 1 ? (context.Name == ".." ? Color.Info : Color.Info) : Color.Default)" Icon="@(context.Type == 1 ? (context.Name == ".." ? Icons.Material.Filled.ArrowBack : Icons.Material.Filled.Folder) : (editableExt.Contains(context.Extension) ? Icons.Material.Outlined.InsertDriveFile : (imgExt.Contains(context.Extension) ? Icons.Material.Outlined.Image : Icons.Material.Outlined.FileOpen)))" Size="Size.Small" Class="mr-2" /><MudHighlighter Text='@(context.Type == 0 ? (!String.IsNullOrEmpty(context.Extension) ?  context.Name.Replace(context.Extension, "") : context.Name) : $"[{context.Name}]")' HighlightedText="@searchString" /></MudTd>
                    <MudTd DataLabel="Ext"><MudHighlighter Text='@context.Extension?.Replace(".", "")' HighlightedText="@searchString" /></MudTd>
                    <MudTd DataLabel="Size">@(context.Type == 0 ? context.Size.ToString("n0") : "<DIR>")</MudTd>
                    <MudTd DataLabel="Date">@(context.Name == ".." ? "—" : context.Modified.ToString())</MudTd>
                    <MudTd DataLabel="">
                        @if (context.Name != "..")
                        {
                            <MudButton Variant="Variant.Text" Size="Size.Small" Style="padding:0px" OnClick="@(_ => OpenContextDialog(context))">...</MudButton>
                        }
                    </MudTd>
                    <MudTd></MudTd>
                </RowTemplate>
            </MudTableFix>
            <MudDialog @bind-IsVisible="contextVisible" Options="contextDialogOptions" DisableSidePadding="false">
                <DialogContent>
                    <MudPaper Width="300px" Elevation="0">
                        <MudTextField @bind-Value="contextEditName" Variant="Variant.Text" DebounceInterval="300" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Check" OnAdornmentClick="Rename" Required="true" FullWidth="true" Label='@(contextItem.Type >= 0 ? "Rename" : (contextItem.Type == -2 ? "Enter new folder name" : "Enter new file name"))'></MudTextField>
                        @if (contextItem.Type == 0)
                        {
                            <MudList Clickable="true">
                                <MudListItem Text="Edit" Icon="@Icons.Material.Filled.Edit" IconSize="Size.Small" OnClick="@(_ => {CloseContextDialog(); Edit(contextItem);})" Disabled="@(!editableExt.Contains(contextItem.Extension))" />
                                <MudListItem Text="Download" Icon="@Icons.Material.Filled.Download" IconSize="Size.Small" OnClick="@(_ => {CloseContextDialog(); Download(contextItem);})" />
                                @*<MudDivider />*@
                                <MudListItem Text="Delete" Icon="@Icons.Material.Filled.Delete" IconSize="Size.Small" IconColor="Color.Secondary" OnClick="@(async _ => {CloseContextDialog();await Task.Delay(100);await Delete(contextItem);})" />
                            </MudList>
                        }
                        @if (contextItem.Type == 1)
                        {
                            <MudList Clickable="true">
                                <MudListItem Text="Delete" Icon="@Icons.Material.Filled.Delete" IconSize="Size.Small" IconColor="Color.Secondary" OnClick="@(async _ => {CloseContextDialog();await Task.Delay(100);await Delete(contextItem);})" />
                            </MudList>
                        }
                        @if (contextItem.Type < 0)
                        {
                            <br />
                        }
                    </MudPaper>
                    <div class="fixed pointer-events-none" tabindex="-1" @ref="focusContextDialog"></div>
                </DialogContent>
            </MudDialog>

        </MudContainer>
    }
</div>

@code {
    public class FtpListItem
    {
        public int Type { get; set; }
        public String Name { get; set; }
        public long Size { get; set; }
        public DateTime Modified { get; set; }
        public string Extension { get; set; }
    }

    private List<FtpListItem> items;

    private string searchString = "";

    MudTable<FtpListItem> mudTable;
    ElementReference focusContextDialog;

    private bool contextVisible = false;
    FtpListItem contextItem = null;
    string contextEditName = null;
    private async void OpenContextDialog(FtpListItem item) { contextVisible = true; contextItem = item; contextEditName = item.Name; await Task.Delay(300); await focusContextDialog.FocusAsync(); }
    void CloseContextDialog() => contextVisible = false;
    private DialogOptions contextDialogOptions = new() { FullWidth = false, CloseOnEscapeKey = true, DisableBackdropClick = false, CloseButton = true, NoHeader = true, MaxWidth = MaxWidth.Medium };

    private HashSet<string> editableExt = new HashSet<string> { ".aspx", ".ascx", ".ashx", ".asax", ".asp", ".cs", ".config", ".browser", ".js", ".json", ".css", ".html", ".htm", ".xml", ".xsl", ".txt" };
    private HashSet<string> imgExt = new HashSet<string> { ".png", ".jpg", ".jpeg", ".gif" };

    ElementReference dropZoneElement;
    InputFile inputFile;

    IJSObjectReference _module;
    IJSObjectReference _dropZoneInstance;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await js.InvokeAsync<IJSObjectReference>("import", "./DropZone.js?v=1.05");
            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, inputFile.Element);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (currentDB.Current is null)
        {
            return;
        }

        if (currentDB.FTP == null)
        {
            await Task.Delay(500);
            if (await codeEdit.SelectFTP() == null)
            {
                _navigation.NavigateTo("/", false);
                return;
            }
        }

        await LoadData();
    }

    protected async Task LoadData()
    {
        items = await Http.GetFromJsonAsync<List<FtpListItem>>($"api/code/list?ftp={WebUtility.UrlEncode(currentDB.FTP)}&path={WebUtility.UrlEncode(currentDB.CurrentFTPPath)}");

        if (currentDB.CurrentFTPPath != "~")
        {
            items.Add(new FtpListItem
                {
                    Type = 1,
                    Name = "..",
                    Extension = ""
                });
        }
    }

    private bool FilterFunc(FtpListItem i)
    {
        if (string.IsNullOrWhiteSpace(searchString) || i.Name == "..")
            return true;

        if (i.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async void RowClicked(TableRowClickEventArgs<FtpListItem> i)
    {
        if (i.Item.Type == 1)
        {
            if (i.Item.Name == "..")
            {
                var tmp = currentDB.CurrentFTPPath.Split('/');
                currentDB.CurrentFTPPath = String.Join("/", tmp.Take(tmp.Length - 1));
            }
            else
            {
                currentDB.CurrentFTPPath += "/";
                currentDB.CurrentFTPPath += i.Item.Name;
            }

            await LoadData();
            searchString = "";
            StateHasChanged();
        }

        if (i.Item.Type == 0)
        {
            if (editableExt.Contains(i.Item.Extension))
            {
                Edit(i.Item);
            }
            else if (imgExt.Contains(i.Item.Extension))
            {
                Show(i.Item);
            }
            else
            {
                Download(i.Item);
            }
        }
    }

    private async void Edit(FtpListItem item)
    {
        await codeEdit.Edit(currentDB.CurrentFTPPath + "/" + item.Name, item.Extension);

        if (item.Type != -1)
        {
            var refresh = (await Http.GetFromJsonAsync<List<FtpListItem>>($"api/code/list?ftp={WebUtility.UrlEncode(currentDB.FTP)}&path={WebUtility.UrlEncode(currentDB.CurrentFTPPath + "/" + item.Name)}")).FirstOrDefault();

            if (refresh != null)
            {
                item.Modified = refresh.Modified;
                item.Size = refresh.Size;
                StateHasChanged();
            }
        }
        else
        {
            newFileNames.Add(item.Name);
            await LoadData();
            searchString = "";
            StateHasChanged();
            await Task.Delay(5000);
            newFileNames.Clear();
        }
    }

    private async void Download(FtpListItem item)
    {
        await js.InvokeVoidAsync("open", $"/api/code/download?ftp={WebUtility.UrlEncode(currentDB.FTP)}&path={WebUtility.UrlEncode(currentDB.CurrentFTPPath + "/" + item.Name)}", "_self");
    }

    private async void Show(FtpListItem item)
    {
        await js.InvokeVoidAsync("open", $"/api/code/download?ftp={WebUtility.UrlEncode(currentDB.FTP)}&path={WebUtility.UrlEncode(currentDB.CurrentFTPPath + "/" + item.Name)}&show=true", "_blank");
    }

    private string SelectedRowClassFunc(FtpListItem element, int rowNumber)
    {
        if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element) && element.Type == 0)
        {
            return "selected";
        }
        else if (newFileNames.Contains(element.Name))
        {
            //newFileNames.Remove(element.Name);
            return "editRow";
        }
        else
        {
            return string.Empty;
        }
    }

    protected async void Rename()
    {
        if (contextItem.Type == -1 && !String.IsNullOrEmpty(contextEditName))
        {
            contextItem.Name = contextEditName;
            contextItem.Extension = "." + contextItem.Name.Split('.').Last();
            CloseContextDialog(); 
            Edit(contextItem);
        }
        else if (contextItem.Type == -2 && !String.IsNullOrEmpty(contextEditName))
        {
            CloseContextDialog(); 

            var res = await Http.GetAsync($"api/code/newfolder?ftp={WebUtility.UrlEncode(currentDB.FTP)}&path={WebUtility.UrlEncode(currentDB.CurrentFTPPath + "/" + contextEditName)}");

            if (res.IsSuccessStatusCode)
            {
                snackBar.Add($"{contextEditName} folder added", Severity.Success);
                newFileNames.Add(contextEditName);
                searchString = "";
                await LoadData();
                StateHasChanged();
                await Task.Delay(5000);
                newFileNames.Clear();
            }
            else
            {
                await DialogService.ShowMessageBox("New folder", "Invalid folder name", options: new DialogOptions { CloseOnEscapeKey = true });
            }
        }
        else
        {
            if (!String.IsNullOrEmpty(contextEditName))
            {
                var res = await Http.GetAsync($"api/code/rename?ftp={WebUtility.UrlEncode(currentDB.FTP)}&path={WebUtility.UrlEncode(currentDB.CurrentFTPPath + "/" + contextItem.Name)}&newpath={WebUtility.UrlEncode(currentDB.CurrentFTPPath + "/" + contextEditName)}");

                if (res.IsSuccessStatusCode)
                {
                    snackBar.Add($"{contextItem.Name} renamed", Severity.Success);
                    contextItem.Name = contextEditName;
                }
                else
                {
                    await DialogService.ShowMessageBox("Rename", "Invalid file name", options: new DialogOptions { CloseOnEscapeKey = true });
                    contextEditName = contextItem.Name;
                }
            }
            else
            {
                contextEditName = contextItem.Name;
            }
        }
        StateHasChanged();
    }

    private async Task Delete(FtpListItem item)
    {
        if ((await DialogService.ShowMessageBox(
            "Warning",
            $"Do you want to delete {(item.Type == 0 ? "file" : "folder")} \"{item.Name}\" ?",
            yesText: "Delete!", cancelText: "Cancel")) != null)
        {
            if (item.Type == 0)
            {
                var res = await Http.GetAsync($"api/code/delete?ftp={WebUtility.UrlEncode(currentDB.FTP)}&path={WebUtility.UrlEncode(currentDB.CurrentFTPPath + "/" + item.Name)}");
            }
            if (item.Type == 1)
            {
                var res = await Http.GetAsync($"api/code/deletefolder?ftp={WebUtility.UrlEncode(currentDB.FTP)}&path={WebUtility.UrlEncode(currentDB.CurrentFTPPath + "/" + item.Name)}");

                if (!res.IsSuccessStatusCode)
                {
                    await DialogService.ShowMessageBox("Delete", "Cannot Delete folder: The directory is not empty", options: new DialogOptions { CloseOnEscapeKey = true });
                    return;
                }
            }            

            snackBar.Add($"{item.Name} deleted", Severity.Success);
            await LoadData();
            StateHasChanged();
        }
    }

    List<string> newFileNames = new List<string>();
    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        SaveFile saveFile = new SaveFile();
        newFileNames.Clear();

        foreach (var file in e.GetMultipleFiles().Where(e => !String.IsNullOrEmpty(e.ContentType)))
        {
            if (items.Any(i => i.Name == file.Name) && ((await DialogService.ShowMessageBox(
                     "Warning",
                     $"Do you want to replace file {file.Name} ?",
                     yesText: "Replace!", cancelText: "Skip") == null)))
            {
                continue;
            }

            var fileData = new FileData();
            var buffers = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize:5120000).ReadAsync(buffers);
            fileData.FileName = file.Name;
            fileData.FileSize = file.Size;
            fileData.FileType = file.ContentType;
            fileData.ImageBytes = buffers;
            saveFile.Files.Add(fileData);
            newFileNames.Add(file.Name);
        }

        await Http.PostAsJsonAsync($"api/code/savefile?ftp={WebUtility.UrlEncode(currentDB.FTP)}&path={WebUtility.UrlEncode(currentDB.CurrentFTPPath)}", saveFile);

        await LoadData();
        searchString = "";
        StateHasChanged();

        await Task.Delay(5000);
        newFileNames.Clear();
    }

    public async ValueTask DisposeAsync()
    {
        if (_dropZoneInstance != null)
        {
            await _dropZoneInstance.InvokeVoidAsync("dispose");
            await _dropZoneInstance.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }
}